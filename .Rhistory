color = "Data Type") +
theme_minimal() +
theme(legend.position = "top") %>%
ggplotly()
}
print(plot_transformation(transformed_data, 'manual')  )
plot_transformation <- function(data, var_name) {
# Prepare the data
plot_data <- data %>%
select({{ var_name }}, paste0({{ var_name }}, "_transf")) %>%
mutate(id = row_number()) %>%
pivot_longer(cols = -id, names_to = "type", values_to = "value") %>%
mutate(type = if_else(type == {{ var_name }}, "Original", "Transformed"))
# Create the plot
(ggplot(plot_data, aes(x = reorder(id, value), y = value, color = type)) +
geom_point() +
geom_line(aes(group = id), color = "grey", alpha = 0.5) +
scale_color_manual(values = c("Original" = "blue", "Transformed" = "red")) +
labs(title = paste("Transformation of", {{ var_name }}),
x = "Observation ID",
y = "Value",
color = "Data Type") +
theme_minimal() +
theme(legend.position = "top") ) %>%
ggplotly()
}
print(plot_transformation(transformed_data, 'manual')  )
#| echo: false
transformed_data <- data.frame(uniform = runif(10, 0, 15), poisson = rpois(10, 2), manual = c(rnorm(9, 10, 2), 30) ) %>%
mutate(across(everything(),
.fns = list(transf = ~(. - min(., na.rm = TRUE)) /
(max(., na.rm = TRUE) - min(., na.rm = TRUE))),
.names = "{.col}_{.fn}"))
plot_transformation <- function(data, var_name) {
# Prepare the data
plot_data <- data %>%
select({{ var_name }}, paste0({{ var_name }}, "_transf")) %>%
mutate(id = row_number()) %>%
pivot_longer(cols = -id, names_to = "type", values_to = "value") %>%
mutate(type = if_else(type == {{ var_name }}, "Original", "Transformed"))
# Create the plot
(ggplot(plot_data, aes(x = reorder(id, value), y = value, color = type)) +
geom_point() +
geom_line(aes(group = id), color = "grey", alpha = 0.5) +
scale_color_manual(values = c("Original" = "blue", "Transformed" = "red")) +
labs(title = paste("Transformation of", {{ var_name }}),
x = "Observation ID",
y = "Value",
color = "Data Type") +
theme_minimal() +
theme(legend.position = "top") ) %>%
ggplotly()
}
# Example usage for a variable named 'example_var'
plot_transformation(transformed_data, 'uniform')
plot_transformation(transformed_data, 'manual')
dummy_data = data.frame(uniform = runif(10, 0, 15), poisson = rpois(10, 2), manual = c(rnorm(9, 10, 2), 30) )
saveRDS(dummy_data, '../r_objects/dummy_data.Rdata')
transformed_data <- readRDS('../r_objects/dummy_data.R')  %>%
mutate(across(everything(),
.fns = list(transf = ~(. - min(., na.rm = TRUE)) /
(max(., na.rm = TRUE) - min(., na.rm = TRUE))),
.names = "{.col}_{.fn}"))
transformed_data <- readRDS('../r_objects/dummy_data.Rdata')  %>%
mutate(across(everything(),
.fns = list(transf = ~(. - min(., na.rm = TRUE)) /
(max(., na.rm = TRUE) - min(., na.rm = TRUE))),
.names = "{.col}_{.fn}"))
plot_transformation <- function(data, var_name) {
# Prepare the data
plot_data <- data %>%
select({{ var_name }}, paste0({{ var_name }}, "_transf")) %>%
mutate(id = row_number()) %>%
pivot_longer(cols = -id, names_to = "type", values_to = "value") %>%
mutate(type = if_else(type == {{ var_name }}, "Original", "Transformed"))
# Create the plot
(ggplot(plot_data, aes(x = reorder(id, value), y = value, color = type)) +
geom_point() +
geom_line(aes(group = id), color = "grey", alpha = 0.5) +
scale_color_manual(values = c("Original" = "blue", "Transformed" = "red")) +
labs(title = paste("Transformation of", {{ var_name }}),
x = "Observation ID",
y = "Value",
color = "Data Type") +
theme_minimal() +
theme(legend.position = "top") ) %>%
ggplotly()
}
# Example usage for a variable named 'example_var'
plot_transformation(transformed_data, 'uniform')
plot_transformation(transformed_data, 'manual')
plot_transformation <- function(data, var_name, title) {
# Prepare the data
plot_data <- data %>%
select({{ var_name }}, paste0({{ var_name }}, "_transf")) %>%
mutate(id = row_number()) %>%
pivot_longer(cols = -id, names_to = "type", values_to = "value") %>%
mutate(type = if_else(type == {{ var_name }}, "Original", "Transformed"))
# Create the plot
(ggplot(plot_data, aes(x = reorder(id, value), y = value, color = type)) +
geom_point() +
geom_line(aes(group = id), color = "grey", alpha = 0.5) +
scale_color_manual(values = c("Original" = "blue", "Transformed" = "red")) +
labs(title =title ),
plot_transformation(transformed_data, 'manual', '')
plot_transformation <- function(data, var_name, title) {
# Prepare the data
plot_data <- data %>%
select({{ var_name }}, paste0({{ var_name }}, "_transf")) %>%
mutate(id = row_number()) %>%
pivot_longer(cols = -id, names_to = "type", values_to = "value") %>%
mutate(type = if_else(type == {{ var_name }}, "Original", "Transformed"))
# Create the plot
(ggplot(plot_data, aes(x = reorder(id, value), y = value, color = type)) +
geom_point() +
geom_line(aes(group = id), color = "grey", alpha = 0.5) +
scale_color_manual(values = c("Original" = "blue", "Transformed" = "red")) +
labs(title =title ),
# Create the plot
(ggplot(plot_data, aes(x = reorder(id, value), y = value, color = type)) +
geom_point() +
geom_line(aes(group = id), color = "grey", alpha = 0.5) +
scale_color_manual(values = c("Original" = "blue", "Transformed" = "red")) +
labs(title = title,
x = "Observation ID",
y = "Value",
color = "Data Type") +
theme_minimal() +
theme(legend.position = "top") ) %>%
ggplotly()
plot_transformation <- function(data, var_name, title) {
# Prepare the data
plot_data <- data %>%
select({{ var_name }}, paste0({{ var_name }}, "_transf")) %>%
mutate(id = row_number()) %>%
pivot_longer(cols = -id, names_to = "type", values_to = "value") %>%
mutate(type = if_else(type == {{ var_name }}, "Original", "Transformed"))
# Create the plot
(ggplot(plot_data, aes(x = reorder(id, value), y = value, color = type)) +
geom_point() +
geom_line(aes(group = id), color = "grey", alpha = 0.5) +
scale_color_manual(values = c("Original" = "blue", "Transformed" = "red")) +
labs(title = title,
x = "Observation ID",
y = "Value",
color = "Data Type") +
theme_minimal() +
theme(legend.position = "top") ) %>%
ggplotly()
}
# Example usage for a variable named 'example_var'
plot_transformation(transformed_data, 'uniform', '')
theme_report <- function(){
font <- "Georgia"   #assign font family up front
theme_minimal() %+replace%    #replace elements we want to change
theme(
#grid elements
panel.grid.major = element_blank(),    #strip major gridlines
panel.grid.minor = element_blank(),    #strip minor gridlines
axis.ticks = element_blank(),          #strip axis ticks
#since theme_minimal() already strips axis lines,
#we don't need to do that again
#text elements
# plot.title = element_text(             #title
#   family = font,            #set font family
#   size = 20,                #set font size
#   face = 'bold',            #bold typeface
#   hjust = 0,                #left align
#   vjust = 2),               #raise slightly
#
# plot.subtitle = element_text(          #subtitle
#   family = font,            #font family
#   size = 14),               #font size
#
# plot.caption = element_text(           #caption
#   family = font,            #font family
#   size = 9,                 #font size
#   hjust = 1),               #right align
#
# axis.title = element_text(             #axis titles
#   family = font,            #font family
#   size = 10),               #font size
#
# axis.text = element_text(              #axis text
#   family = font,            #axis famuly
#   size = 9),                #font size
#
# axis.text.x = element_text(            #margin for axis text
#   margin=margin(5, b = 10))
#
#since the legend often requires manual tweaking
#based on plot content, don't define it here
)
}
#| echo: false
prefix = '../'
transformed_scores = readRDS(paste0(prefix, 'r_objects/transformed_scores.Rdata')) %>%
as.data.frame() %>%
rename(Station_Name = "station")
locations = readRDS(paste0(prefix, 'r_objects/locations.Rdata'))
scores_for_lga = transformed_scores %>%
left_join(locations, by = 'Station_Name') %>%
st_as_sf(coords = c('lng','lat')) %>%
arrange(desc(score)) %>%
mutate(rank = row_number())
scores_for_lga = slice_head(scores_for_lga, n = n_slice) %>%
select(Station_Name)
scores_for_lga = st_set_crs(scores_for_lga, 'wgs84') %>%
st_transform(crs = 7844)
#load geometries
lga <- read_sf(paste0(prefix, 'shapefiles/lga_boundaries/LGA_2023_AUST_GDA2020.shp'))
lga_with_n_sf <- st_join(lga, scores_for_lga) %>%
filter(!is.na(Station_Name)) %>%
group_by(LGA_NAME23) %>%
summarise(n = n())
locations = st_as_sf(locations, coords = c('lng','lat'), crs = st_crs(lga), agr = 'constant')
number_of_stations_in_lga <- st_join(lga, locations) %>%
filter(!is.na(Station_Name)) %>%
group_by(LGA_NAME23) %>%
summarise(total_stations = n())
(lga_with_n_sf %>%
st_drop_geometry() %>%
left_join(number_of_stations_in_lga %>%
st_drop_geometry(), by = 'LGA_NAME23') %>%
mutate(ratio = (n / total_stations)*100 ) %>%
ggplot(mapping = aes(x = ratio, y = reorder(LGA_NAME23, ratio), fill = ratio ) ) +
geom_col()  +
theme_minimal() +
theme(legend.position = 'none') +
scale_fill_gradientn(colors = create_green_palette(11)) +
xlab("Station Ratio (%)")) %>%
ggplotly()
(lga_with_n_sf %>%
st_drop_geometry() %>%
left_join(number_of_stations_in_lga %>%
st_drop_geometry(), by = 'LGA_NAME23') %>%
mutate(ratio = (n / total_stations)*100 ) %>%
ggplot(mapping = aes(x = ratio, y = reorder(LGA_NAME23, ratio), fill = ratio ) ) +
geom_col()  +
theme_report() +
theme_minimal() +
theme(legend.position = 'none') +
scale_fill_gradientn(colors = create_green_palette(11)) +
xlab("Station Ratio (%)")) %>%
ggplotly()
(lga_with_n_sf %>%
st_drop_geometry() %>%
left_join(number_of_stations_in_lga %>%
st_drop_geometry(), by = 'LGA_NAME23') %>%
mutate(ratio = (n / total_stations)*100 ) %>%
ggplot(mapping = aes(x = ratio, y = reorder(LGA_NAME23, ratio), fill = ratio ) ) +
geom_col()  +
theme_report() +
theme(legend.position = 'none') +
scale_fill_gradientn(colors = create_green_palette(11)) +
xlab("Station Ratio (%)")) %>%
ggplotly()
source("D:/train_capacity/r/theme.R", echo=TRUE)
(lga_with_n_sf %>%
st_drop_geometry() %>%
left_join(number_of_stations_in_lga %>%
st_drop_geometry(), by = 'LGA_NAME23') %>%
mutate(ratio = (n / total_stations)*100 ) %>%
ggplot(mapping = aes(x = ratio, y = reorder(LGA_NAME23, ratio), fill = ratio ) ) +
geom_col()  +
theme_report() +
theme(legend.position = 'none') +
scale_fill_gradientn(colors = create_green_palette(11)) +
xlab("Station Ratio (%)")) %>%
ggplotly()
?theme
source("D:/train_capacity/r/theme.R", echo=TRUE)
(lga_with_n_sf %>%
st_drop_geometry() %>%
left_join(number_of_stations_in_lga %>%
st_drop_geometry(), by = 'LGA_NAME23') %>%
mutate(ratio = (n / total_stations)*100 ) %>%
ggplot(mapping = aes(x = ratio, y = reorder(LGA_NAME23, ratio), fill = ratio ) ) +
geom_col()  +
theme_report() +
theme(legend.position = 'none') +
scale_fill_gradientn(colors = create_green_palette(11)) +
xlab("Station Ratio (%)")) %>%
ggplotly()
source("D:/train_capacity/r/theme.R", echo=TRUE)
library(devtools)
#devtools::install_github("walkerke/mapgl")
library(mapgl)
library(sf)
library(tidyverse)
library(data.table)
library(leaflet)
library(htmltools)
library(quarto)
library(dtplyr)
library(janitor)
library(arrow)
library(stringr)
library(DescTools)
library(mapview)
library(geosphere)
library(chron)
library(RColorBrewer)
library(osmdata)
library(collapse)
library(ggiraph)
library(patchwork)
station_rankings = readRDS('../r_objects/station_rankings.Rdata')
View(station_rankings)
station_rankings %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Station_with_Max = station[which.max(value)],
Station_with_Min = station[which.min(value)]
) %>%
select(Column = column, everything())
station_rankings %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Station_with_Max = station[which.max(value)],
Station_with_Min = station[which.min(value)]
) %>%
select(Column = column, everything()) %>%
reactable()
library(reactablefmtr)
station_rankings %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = station[which.max(value)],
Lowest_Value = station[which.min(value)]
) %>%
select(Column = column, everything()) %>%
rowwise() %>%
mutate(Column = translations[Column])
station_rankings %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = station[which.max(value)],
Lowest_Value = station[which.min(value)]
) %>%
select(Column = column, everything()) %>%
rowwise() %>%
mutate(Column = translations_simple[Column])
transformed_scores %>% v
transformed_scores %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = station[which.max(value)],
Lowest_Value = station[which.min(value)]
) %>%
select(Column = column, everything()) %>%
rowwise() %>%
mutate(Column = translations_simple[Column])
transformed_scores
transformed_scores %>% v
transformed_scores %>%
select(Station_Name, where(is.numeric)) %>%
pivot_longer(cols = -Station_Name, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = Station_Name[which.max(value)],
Lowest_Value = Station_Name[which.min(value)]
) %>%
select(Column = column, everything()) %>%
rowwise() %>%
mutate(Column = translations_simple[Column])
station_rankings %>%
filter_stations(name_var = 'station') %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = station[which.max(value)],
Lowest_Value = station[which.min(value)]
) %>%
select(Column = column, everything()) %>%
rowwise() %>%
mutate(Column = translations_simple[Column])
station_walkability = readRDS('../r_objects/station_walkability.Rdata')
View(station_walkability)
station_walkability %>%
filter_stations(name_var = 'station') %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = station[which.max(value)],
Lowest_Value = station[which.min(value)]
) %>%
select(Column = column, everything()) %>%
rowwise() %>%
mutate(Column = translations_simple[Column]) %>%
reactable()
station_walkability %>%
filter(station %in% transformed_scores %>% pull(Station_Name)) %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = station[which.max(value)],
Lowest_Value = station[which.min(value)]
) %>%
select(Column = column, everything()) %>%
rowwise() %>%
mutate(Column = translations_simple[Column]) %>%
reactable()
station_walkability %>%
filter(station %in% (transformed_scores %>% pull(Station_Name))) %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = station[which.max(value)],
Lowest_Value = station[which.min(value)]
) %>%
select(Column = column, everything()) %>%
rowwise() %>%
mutate(Column = translations_simple[Column]) %>%
reactable()
station_walkability %>%
filter(station %in% (transformed_scores %>% pull(Station_Name))) %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = station[which.max(value)],
Lowest_Value = station[which.min(value)]
) %>%
select(Column = column, everything())
station_walkability %>%
filter(station %in% (transformed_scores %>% pull(Station_Name))) %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = station[which.max(value)],
Lowest_Value = station[which.min(value)]
) %>%
select(Column = column, everything()) %>%
reactable()
station_walkability %>%
filter(station %in% (transformed_scores %>% pull(Station_Name))) %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = paste(station[which.max(value)] , which.max(value)),
Lowest_Value = station[which.min(value)]
) %>%
select(Column = column, everything()) %>%
reactable()
station_walkability %>%
filter(station %in% (transformed_scores %>% pull(Station_Name))) %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = paste0(station[which.max(value)], ": ", which.max(value)),
Lowest_Value = paste0(station[which.min(value)], ": ", which.min(value))
) %>%
select(Column = column, everything()) %>%
reactable()
station_walkability %>% v
station_walkability %>% v
station_walkability %>% v
station_walkability %>%
filter(station %in% (transformed_scores %>% pull(Station_Name))) %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>% v
station_walkability %>%
filter(station %in% (transformed_scores %>% pull(Station_Name))) %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = paste0(station[which.max(value)], ": ", max(value)),
Lowest_Value = paste0(station[which.min(value)], ": ", min(value))
) %>%
select(Column = column, everything()) %>%
reactable()
station_walkability %>%
filter(station %in% (transformed_scores %>% pull(Station_Name))) %>%
select(station, where(is.numeric)) %>%
pivot_longer(cols = -station, names_to = "column", values_to = "value") %>%
group_by(column) %>%
summarise(
Highest_Value = paste0(station[which.max(value)], ": ", max(value)),
Lowest_Value = paste0(station[which.min(value)], ": ", min(value))
) %>%
select(Column = column, everything()) %>%
reactable(
columns = list(
Column = colDef(name = "Amenity"),
Highest_Value = colDef(name = "Highest Value"),
Lowest_Value = colDef(name = "Lowest Value")
)
)
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata')
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata')
transformed_scores
quarto_render()
quarto_render(as_job = F)
