library(qs)
install.packages()
install.packages('qs')
library(sf)
library(tidyverse)
devtools::install_github("walkerke/mapgl")
data <- qs::qread_url("https://yimby-mel.s3.ap-southeast-2.amazonaws.com/rmd_data.qs")
library(qs)
data <- qs::qread_url("https://yimby-mel.s3.ap-southeast-2.amazonaws.com/rmd_data.qs")
library(qs)
library(qs)
install.packages('qs')
library(qs)
library(qs)
remove.packages('qs')
install.packages('qs')
library(qs)
library(sf)
library(tidyverse)
devtools::install_github("walkerke/mapgl")
library(mapgl)
#download.file("https://yimby-mel.s3.ap-southeast-2.amazonaws.com/rmd_data.qs",destfile = 'data/rmd_data.qs')
data <- qs::qread_url("https://yimby-mel.s3.ap-southeast-2.amazonaws.com/rmd_data.qs")
library(data.table)
#data <- qs::qread_url("https://yimby-mel.s3.ap-southeast-2.amazonaws.com/rmd_data.qs")
saveRDS(data, 'data.Rdata')
library(data.table)
#st_write(data, 'data/rmd_data.shp')
yimby_colours <- list(
hero = "#10461B",
body = "#000000",
background  = "#FDFFEE",
green_base  = "#10461B",
blue_base   = "#283696",
red_base    = "#BA1B21",
yellow_base = "#F6AE00",
green_palette  = c("#10461B", "#2C6F3A", "#579A64", "#8FC49A", "#D6EFDB"),
blue_palette   = c("#1A235F", "#283696", "#9EA7E2", "#D0D6FF", "#E8ECFF"),
red_palette    = c("#D92127", "#BA1B21", "#8E3437", "#C6A2A3", "#E3BABB"),
yellow_palette = c("#F6AE00", "#DE9B00", "#C79E3E", "#F2DCA5", "#FFF7E3")
)
specified_colors <- c("Already developed"                       = "#989898",
"Housing not permitted"                   = "#b1b1b1",
"Civic use makes development less likely" = "#cacaca",
"Low density residential"                 = yimby_colours$blue_palette[5],
"2 storeys (NRZ)"                         = yimby_colours$blue_palette[4],
"3 storeys (GRZ)"                         = yimby_colours$blue_palette[3],
"4 storeys (RGZ)"                         = yimby_colours$blue_palette[2],
"4+ storeys (Mixed use zones)"            = yimby_colours$blue_palette[1],
"6 storeys (Missing middle)"              = yimby_colours$green_palette[3]
)
data = data %>% st_set_geometry('geom')
#brunswick = data %>% filter(lga_name_2022 == "Merri-bek") %>% filter(category != 'Already developed')
brunswick = data %>% filter(sa2_code_2021 == "206011106") %>% filter(category != 'Already developed')
percentage_to_build = 0.15
profitable_apartments = brunswick %>%
st_drop_geometry() %>%
arrange(desc(profit)) %>%
slice_head(prop=percentage_to_build ) %>%
mutate(willBeBuilt = T) %>%
select(c(lat,lon,willBeBuilt))
brunswick = brunswick %>%
left_join(profitable_apartments, by = c('lat', 'lon'))
height_of_storey = 6
map_mult = 1
multiplier = height_of_storey * map_mult
brunswick = brunswick %>%
mutate(old_height = as.numeric(regmatches(category, gregexpr("[0-9]+", category))) * multiplier ,
new_height = ifelse( !is.na(willBeBuilt) , storey * multiplier , old_height )  )
values = c(brunswick$category, brunswick$category_new) %>% unique()
brunswick = brunswick %>% mutate( old_color = specified_colors[category], new_color = specified_colors[category_new] )
m1 <- mapgl::maplibre(style = mapgl::carto_style('positron')) %>%
mapgl::add_fill_extrusion_layer(id = 'brunswick', source = brunswick,
fill_extrusion_opacity = 0.85,
fill_extrusion_color = c('get', 'old_color'),
fill_extrusion_height = c("get", "old_height") ) %>%
mapgl::fly_to(
center = c(145.063115,-37.814175),
zoom = 9,
pitch = 40
)
m2 <- mapgl::maplibre(style = mapgl::carto_style('positron')) %>%
mapgl::add_fill_extrusion_layer(id = 'brunswick', source = brunswick,
fill_extrusion_opacity = 0.85,
fill_extrusion_color = c('get', 'new_color'),
fill_extrusion_height = c("get", "new_height") ) %>%
mapgl::fly_to(
center = c(145.063115,-37.814175),
zoom = 9,
pitch = 40
)
mapgl::compare(m1,m2)
library(devtools)
devtools::install_github("walkerke/mapgl")
library(mapgl)
library(sf)
library(tidyverse)
library(data.table)
library(leaflet)
train_stations <- read_sf('shapefiles/ptv/PTV_METRO_TRAIN_STATION.SHP')
setwd("~/Documents/yimbymelbourne/train_capacity/r")
train_stations <- read_sf('shapefiles/ptv/PTV_METRO_TRAIN_STATION.SHP')
train_stations <- read_sf('../shapefiles/ptv/PTV_METRO_TRAIN_STATION.SHP')
leaflet(train_stations) %>%
addProviderTiles('CartoDB.Positron') %>%
addMarkers()
patronage_data <- fread('../data/Train_Service_Passenger_Counts_Financial_Year_2022-2023.csv') %>%
as.data.frame()
city_loop_stations = c('Flagstaff', 'Parliament', 'Melbourne Central', 'Flinders Street', 'Southern Cross')
interchange_stations = c('North Melbourne', 'South Yarra', 'Richmond')
city_loop_stations = c('Flagstaff', 'Parliament', 'Melbourne Central', 'Flinders Street', 'Southern Cross')
interchange_stations = c('North Melbourne', 'South Yarra', 'Richmond')
patronage_data = patronage_data %>%
mutate( capacity_factor = Passenger_Departure_Load / 600 ) %>%
mutate(hour_of_day = sub("\\:.*", "", Arrival_Time_Scheduled)) %>%
mutate(isCityLoop =  Station_Name %in% city_loop_stations  ) %>%
mutate(isInterchange = Station_Name %in% interchange_stations )
hourly_factors <- patronage_data %>%
group_by(hour_of_day, Station_Name) %>%
summarise(capacity_factor = mean(capacity_factor), avg_patronage = mean(Passenger_Departure_Load))
plotStressLevels <- function(station_name) {
to_plot <- hourly_factors %>% filter(Station_Name == station_name)
plot(to_plot$hour_of_day, to_plot$avg_patronage, type = 'l')
}
plotStressLevels('Brunswick')
View(patronage_data)
colnames(patronage_data)
patronage_by_station <- patronage_data %>%
filter(Mode=='Metro') %>%
group_by(Station_Name, Direction) %>%
summarise(avg_patronage = mean(Passenger_Departure_Load),
lat = first(Station_Latitude),
lon = first(Station_Longitude) ) %>%
st_as_sf(., coords = c("lon", "lat"))
station_name == 'Brunswick'
station_name = 'Brunswick'
to_plot <- hourly_factors %>% filter(Station_Name == station_name)
View(to_plot)
hourly_factors <- patronage_data %>%
group_by(hour_of_day, Station_Name, Direction) %>%
summarise(capacity_factor = mean(capacity_factor), avg_patronage = mean(Passenger_Departure_Load))
station_name = 'Brunswick'
to_plot <- hourly_factors %>% filter(Station_Name == station_name)
View(to_plot)
ggplot(to_plot, mapping = aes(x = hour_of_day, y = avg_patronage)) + geom_line()
ggplot(to_plot, mapping = aes(x = hour_of_day, y = avg_patronage)) + geom_point()
p <- ggplot(to_plot, mapping = aes(x = hour_of_day, y = avg_patronage)) + geom_point()
p + facet_grid(rows = vars(Direction))
p <- ggplot(to_plot, mapping = aes(x = hour_of_day, y = avg_patronage)) + geom_line()
p + facet_grid(rows = vars(Direction))
p <- ggplot(to_plot, mapping = aes(x = hour_of_day, y = avg_patronage)) + geom_point()
p + facet_grid(rows = vars(Direction))
p + facet_grid(rows = vars(Direction)) + theme_minimal()
p + facet_grid(rows = vars(Direction)) + theme_bw()
?case_when
group_by(hour_of_day, Station_Name, dir) %>%
summarise(capacity_factor = mean(capacity_factor), avg_patronage = mean(Passenger_Departure_Load))
hourly_factors <- patronage_data %>%
mutate(dir = case_when( Direction == "U" ~ "Away from Flinders", Direction == "D" ~ "Towards Flinders" ) ) %>%
group_by(hour_of_day, Station_Name, dir) %>%
summarise(capacity_factor = mean(capacity_factor), avg_patronage = mean(Passenger_Departure_Load))
to_plot <- hourly_factors %>% filter(Station_Name == station_name)
p <- ggplot(to_plot, mapping = aes(x = hour_of_day, y = avg_patronage)) + geom_point()
p + facet_grid(rows = vars(Direction)) + theme_bw()
p + facet_grid(rows = vars(dir)) + theme_bw()
?theme()
p + facet_grid(rows = vars(dir)) + theme(base_size = 10) + theme_bw()
p + facet_grid(rows = vars(dir)) + theme(base_size = 20) + theme_bw()
p + facet_grid(rows = vars(dir)) + theme_bw() + theme(base_size = 20)
p + facet_grid(rows = vars(dir)) + theme_bw(base_size = 20)
p + facet_grid(rows = vars(dir)) + theme_bw(base_size = 15)
plotStressLevels <- function(station_name) {
to_plot <- hourly_factors %>% filter(Station_Name == station_name)
p <- ggplot(to_plot, mapping = aes(x = hour_of_day, y = avg_patronage)) + geom_point()
p + facet_grid(rows = vars(dir)) + theme_bw(base_size = 15)
}
plotStressLevels('toorak')
plotStressLevels('Toorak')
plotStressLevels('Hawthorn')
plotStressLevels('Coburg')
plotStressLevels('North Melbourne')
library(quarto)
install.packages('quarto')
?quarto_render
quarto::quarto_render('markdown/run_for_station.qmd', paste0('outputs/stations/', station_name))
quarto::quarto_render('markdown/run_for_station.qmd', paste0('outputs/stations/', station_name))
quarto::quarto_render('../markdown/run_for_station.qmd', paste0('outputs/stations/', station_name))
quarto::quarto_render('../quarto/run_for_station.qmd', paste0('outputs/stations/', station_name))
quarto::quarto_render('quarto/run_for_station.qmd', paste0('outputs/stations/', station_name))
quarto::quarto_render('quarto/run_for_station.qmd')
quarto::quarto_render('../quarto/run_for_station.qmd')
?quarto_render
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0('../outputs/stations/',station_name), execute_params = c(station = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0('../outputs/stations/',station_name, '.html'), execute_params = c(station = "Coburg"))
writeRDS(hourly_factors, 'r_objects/hourly_factors.Rdata')
saveRDS(hourly_factors, 'r_objects/hourly_factors.Rdata')
saveRDS(hourly_factors, '../r_objects/hourly_factors.Rdata')
library(tidyverse)
hourly_factors = readRDS('../r_objects/hourly_factors.Rdata')
to_plot <- hourly_factors %>% filter(Station_Name == station)
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0('../outputs/stations/',station_name, '.html'), output_format = 'html', execute_params = c(station = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0(station_name, '.html'), output_format = 'html', execute_params = c(station = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0(station_name, '.html'), output_format = 'html', execute_params = c('station' = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0(station_name, '.html'), output_format = 'html', execute_params = list('station' = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0('../outputs/',station_name, '.html'), output_format = 'html', execute_params = list('station' = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0('stations/',station_name, '.html'), output_format = 'html', execute_params = list('station' = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0(station_name, '.html'), output_format = 'html', execute_params = list('station' = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0(station_name, '.html'), output_format = 'html', execute_params = list('station' = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0(station_name, '.html'), output_format = 'html', execute_params = list('station' = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0(station_name, '.html'), output_format = 'html', execute_params = list('station' = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0(station_name, '.html'), output_format = 'html', execute_params = list('station' = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0(station_name, '.html'), output_format = 'html', execute_params = list('station' = "Coburg"))
rmarkdown::render()
rmarkdown::render('../quarto/run_for_station.qmd')
quarto::quarto_render('../quarto/run_for_station.qmd', output_file = paste0(station_name, '.html'), output_format = 'html', execute_params = list('station' = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd',
output_file = paste0(station_name, '.html'),
output_format = 'html',
execute_params = list('station' = "Coburg"))
quarto::quarto_render('../quarto/run_for_station.qmd',
output_file = paste0(station_name, '.html'),
output_format = 'html',
execute_params = list('station' = "Coburg"))
setwd("~/Documents/yimbymelbourne/train_capacity")
quarto::quarto_render('run_for_station.qmd',
output_file = paste0(station_name, '.html'),
output_format = 'html',
execute_params = list('station' = "Coburg"))
quarto::quarto_render('stations/run_for_station.qmd',
output_file = paste0(station_name, '.html'),
output_format = 'html',
execute_params = list('station' = "Coburg"))
quarto::quarto_render('stations/run_for_station.qmd',
output_file = paste0(station_name, '.html'),
output_format = 'html',
execute_params = list('station' = "Coburg"))
my.file.rename <- function(from, to) {
todir <- dirname(to)
if (!isTRUE(file.info(todir)$isdir)) dir.create(todir, recursive=TRUE)
file.rename(from = from,  to = to)
}
my.file.rename(from = "Brunswick.html", to = "stations/Brunswick.html")
run_a_station <- funmction(stn) {
run_a_station <- function(stn) {
quarto::quarto_render('stations/run_for_station.qmd',
output_file = paste0(station_name, '.html'),
output_format = 'html',
execute_params = list('station' = stn))
my.file.rename(from = paste0(stn,".html"), to = paste0("stations/",stn,'.html'))
}
run_a_station('Brunswick')
run_a_station('Coburg')
run_a_station <- function(stn) {
quarto::quarto_render('stations/run_for_station.qmd',
output_file = paste0(stn, '.html'),
output_format = 'html',
execute_params = list('station' = stn))
my.file.rename(from = paste0(stn,".html"), to = paste0("stations/",stn,'.html'))
}
run_a_station('Coburg')
run_a_station <- function(stn) {
quarto::quarto_render('stations/run_for_station.qmd',
output_file = paste0(stn, '.html'),
output_format = 'html',
execute_params = list('station' = stn))
my.file.rename(from = paste0(stn,".html"), to = paste0("stations/",stn,'.html'))
}
run_a_station('Coburg')
run_a_station('South Yarra')
run_a_station('South Yarra')
run_a_station('Brunswick')
run_a_station <- function(stn) {
quarto::quarto_render('stations/run_for_station.qmd',
output_file = paste0(stn, '.html'),
output_format = 'html',
execute_params = list('station' = stn))
my.file.rename(from = paste0(stn,".html"), to = paste0("stations/",stn,'.html'))
}
run_a_station('Brunswick')
stations = c('Brunswick', 'South Yarra')
reports <-
tibble(
input = "run_for_station.qmd",
output_file = str_glue("{stations}.html"),
execute_params = map(stations, ~ list(station = .))
)
library(quarto)
library(tidyverse)
stations = c('Brunswick', 'South Yarra')
reports <-
tibble(
input = "run_for_station.qmd",
output_file = str_glue("{stations}.html"),
execute_params = map(stations, ~ list(station = .))
)
pwalk(reports, quarto_render)
reports <-
tibble(
input = "run_for_station.qmd",
output_file = str_glue("{stations}.html"),
execute_params = map(stations, ~ list(station = .))
)
pwalk(reports, quarto_render)
stations = c('Brunswick', 'South Yarra')
reports <-
tibble(
input = "run_for_station.qmd",
output_file = str_glue("{stations}.html"),
execute_params = map(stations, ~ list(station = .))
)i
stations = c('Brunswick', 'South Yarra')
reports <-
tibble(
input = "run_for_station.qmd",
output_file = str_glue("{stations}.html"),
execute_params = map(stations, ~ list(station = .))
)
pwalk(reports, quarto_render)
stations = c('Brunswick', 'South Yarra')
reports <-
tibble(
input = "run_for_station.qmd",
output_file = str_glue("{stations}.html"),
execute_params = map(stations, ~ list(station = .))
)
pwalk(reports, quarto_render)
stations = c('Brunswick', 'South Yarra')
reports <-
tibble(
input = "run_for_station.qmd",
output_file = str_glue("{stations}.html"),
execute_params = map(stations, ~ list(station = .))
)
pwalk(reports, quarto_render)
library(knitr)
stations = c('Brunswick', 'South Yarra')
reports <-
tibble(
input = "run_for_station.qmd",
output_file = str_glue("{stations}.html"),
execute_params = map(stations, ~ list(station = .))
)
pwalk(reports, quarto_render)
stations = c('Brunswick', 'South Yarra')
reports <-
tibble(
input = "run_for_station.qmd",
output_file = str_glue("{stations}.html"),
execute_params = map(stations, ~ list(station = .))
)
pwalk(reports, quarto_render)
?knitr::opts_chunk$set
?knitr::opts_chunk
knitr::opts_chunk$set(label = dynamic_label)
dynamic_label <- "dynamic_chunk_" %>% paste0(params$station)
knitr::opts_chunk$set(label = dynamic_label)
