fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7)
library(htmltools)
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
colours = tribble(
~group, ~ colour,
'Sandringham' , "#F178AF",
'CrossCity' , "#028430",
'Cran/Pak' , "#279FD5",
"Burnley" , "#152C6B",
"Northern" , "#FFBE00",
"Eastern" , "#BE1014",
'event' , "#95979A"
)
library(devtools)
#devtools::install_github("walkerke/mapgl")
library(mapgl)
library(sf)
library(tidyverse)
library(data.table)
library(leaflet)
library(quarto)
library(dtplyr)
library(janitor)
library(arrow)
library(stringr)
library(DescTools)
library(geosphere)
library(htmltools)
colours = tribble(
~group, ~ colour,
'Sandringham' , "#F178AF",
'CrossCity' , "#028430",
'Cran/Pak' , "#279FD5",
"Burnley" , "#152C6B",
"Northern" , "#FFBE00",
"Eastern" , "#BE1014",
'event' , "#95979A"
)
data_to_map <- xminmaxtransform %>%
as.data.frame() %>%
slice_head(n = 10) %>%
arrange(desc(score)) %>%
mutate(rank = row_number(), label = paste0(station, ": ", rank )) %>%
select(station, score, rank, label) %>%
rename(Station_Name = 'station') %>%
dplyr::left_join(locations, by = 'Station_Name') %>%
mutate(message =
paste0(
'<div style = \" background-color: black; \">',
"<p style = \" color: white; text-align:center ; padding: 5px; \" >", rank, '. ' , Station_Name, '</p>',
'</div>'
)
)
source("D:/train_capacity/r/station_functions.R", echo=TRUE)
source("D:/train_capacity/r/main_functions.R", echo=TRUE)
patronage_data = load_and_clean_patronage_data()
hourly_factors = generate_hourly_information()
service_frequences = generate_service_frequency_information()
stations = patronage_data %>%
filter(Mode == 'Metro') %>%
select(Station_Name) %>%
distinct() %>%
slice_sample(prop = 1) %>%
unlist() %>%
as.vector()
walkability = read_parquet('data/walkability_by_node.parquet')%>%
janitor::clean_names() %>%
st_set_geometry('geometry') %>%
st_set_crs('wgs84')
dwelling_data = readRDS(paste0('data/final_dwelling_data.Rdata')) %>%
st_transform( 'wgs84')
station_rankings <- stations %>%
map(~ as_tibble(as.list(return_information(.x))), .progress = T) %>%
list_rbind() %>%
mutate(across(-station, as.numeric)) %>%
filter(!is.nan(walkability_score))
fromQuarto = F
prefix_dir = ifelse(fromQuarto, '../', '')
station_rankings <- stations %>%
map(~ as_tibble(as.list(return_information(.x))), .progress = T) %>%
list_rbind() %>%
mutate(across(-station, as.numeric)) %>%
filter(!is.nan(walkability_score))
bad_columns = c('heritage_pc', 'average_peak_service_cap', 'distance')
xminmaxtransform = station_rankings %>%
mutate( across(-station, ~ as.numeric(.) )) %>%
filter(distance < 25000, distance > 3000) %>%
mutate( across(-station, .fns = function(x) { ( x - min(x, na.rm= T)) / ( max(x, na.rm= T) - min(x, na.rm= T)  ) } )) %>%
mutate(across(any_of(bad_columns), .fns = function(x) {-x} )) %>%
mutate(across(-station, .fns = function(x) { x*(weights[cur_column()] %>% as.vector())  }  )) %>%
rowwise() %>%
mutate(score = sum(across(-station))) %>%
arrange(desc(score))
weights = c(
"grz_nrz_pc" = 1,
"capacity_delta" = 1,
'average_peak_service_freq' = 1,
'average_peak_service_cap' = 1,
'walkability_score' = 1,
'distance' = 1,
'n_bus_tram' = 1
)
bad_columns = c('heritage_pc', 'average_peak_service_cap', 'distance')
xminmaxtransform = station_rankings %>%
mutate( across(-station, ~ as.numeric(.) )) %>%
filter(distance < 25000, distance > 3000) %>%
mutate( across(-station, .fns = function(x) { ( x - min(x, na.rm= T)) / ( max(x, na.rm= T) - min(x, na.rm= T)  ) } )) %>%
mutate(across(any_of(bad_columns), .fns = function(x) {-x} )) %>%
mutate(across(-station, .fns = function(x) { x*(weights[cur_column()] %>% as.vector())  }  )) %>%
rowwise() %>%
mutate(score = sum(across(-station))) %>%
arrange(desc(score))
print(xminmaxtransform %>%
select(station, score) %>%
tibble())
colours = tribble(
~group, ~ colour,
'Sandringham' , "#F178AF",
'CrossCity' , "#028430",
'Cran/Pak' , "#279FD5",
"Burnley" , "#152C6B",
"Northern" , "#FFBE00",
"Eastern" , "#BE1014",
'event' , "#95979A"
)
data_to_map <- xminmaxtransform %>%
as.data.frame() %>%
slice_head(n = 10) %>%
arrange(desc(score)) %>%
mutate(rank = row_number(), label = paste0(station, ": ", rank )) %>%
select(station, score, rank, label) %>%
rename(Station_Name = 'station') %>%
dplyr::left_join(locations, by = 'Station_Name') %>%
mutate(message =
paste0(
'<div style = \" background-color: black; \">',
"<p style = \" color: white; text-align:center ; padding: 5px; \" >", rank, '. ' , Station_Name, '</p>',
'</div>'
)
)
locations = readRDS(paste0('r_objects/locations.Rdata'))
colours = tribble(
~group, ~ colour,
'Sandringham' , "#F178AF",
'CrossCity' , "#028430",
'Cran/Pak' , "#279FD5",
"Burnley" , "#152C6B",
"Northern" , "#FFBE00",
"Eastern" , "#BE1014",
'event' , "#95979A"
)
data_to_map <- xminmaxtransform %>%
as.data.frame() %>%
slice_head(n = 10) %>%
arrange(desc(score)) %>%
mutate(rank = row_number(), label = paste0(station, ": ", rank )) %>%
select(station, score, rank, label) %>%
rename(Station_Name = 'station') %>%
dplyr::left_join(locations, by = 'Station_Name') %>%
mutate(message =
paste0(
'<div style = \" background-color: black; \">',
"<p style = \" color: white; text-align:center ; padding: 5px; \" >", rank, '. ' , Station_Name, '</p>',
'</div>'
)
)
lines_dissolved <- read_sf('shapefiles/qgis/final_map.shp') %>%
left_join(colours, by = 'group')
coords_vec <-  data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
st_bbox() %>%
st_as_sfc(., crs = st_crs(7844)) %>%
st_as_sf(.) %>%
st_buffer(., dist = 500) %>%
st_bbox() %>%
as.vector()
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] )
coords_vec <-  data_to_map %>%
st_bbox() %>%
as.vector()
coords_vec <-  data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
st_bbox() %>%
as.vector()
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
mp = function(x) {
leaflet(x) %>% addProviderTiles('CartoDB.Positron') %>% addPolygons()
}
mc = function(x) {
leaflet(x) %>% addProviderTiles('CartoDB.Positron') %>% addCircleMarkers()
}
coords_vec <-  data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
st_bbox() %>%
mp()
coords_vec <-  data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
st_buffer(dist = 500) %>%
mp()
coords_vec <-  data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = '32755') %>%
st_buffer(dist = 500) %>%
mp()
data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = '32755') %>%
st_buffer(dist = 500) %>%
mp()
data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
st_buffer(dist = 500) %>%
mp()
coords_vec <-  data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
st_bbox() %>%
st_as_sf() %>%
st_buffer(dist = 500) %>%
mp()
coords_vec <-  data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
st_bbox() %>%
st_as_sfc() %>%
st_buffer(dist = 500) %>%
mp()
data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
st_bbox() %>%
st_as_sfc() %>%
st_buffer(dist = 500) %>%
mp()
coords_vec <-  data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
st_bbox() %>%
st_as_sfc() %>%
st_buffer(dist = 500) %>%
st_bbox()
coords_vec <-  data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
st_bbox() %>%
st_as_sfc() %>%
st_buffer(dist = 500) %>%
st_bbox() %>%
as.vector()
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] )
st_crs(lines_dissolved)
View(colours)
View(data_to_map)
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
leaflet::fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
?fitBounds
coords_vec <-  data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
st_bbox() %>%
st_as_sfc() %>%
st_buffer(dist = 0) %>%
st_bbox() %>%
as.vector()
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
leaflet::fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
leaflet::flyToBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
leaflet::fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
leaflet::fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
leaflet::fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
getwd*
getwd()
getwd()
saveRDS(data_to_map, 'r_objects/index_map/data_to_map.Rdata')
saveRDS(lines_dissolved, 'r_objects/index_map/lines_dissolved.Rdata')
saveRDS(coords_vec, 'r_objects/index_map/coords_vec.Rdata')
data_to_map <- readRDS('../r_objects/index_map/data_to_map.Rdata')
lines_dissolved <- readRDS('../r_objects/index_map/lines_dissolved.Rdata')
coords_vec <- readRDS('../r_objects/index_map/coords_vec.Rdata')
?leaflet
map <-  leaflet(lines_dissolved) %>%
addPolylines(color = ~colour, opacity = 1) %>%
leaflet::fitBounds(coords_vec[1],coords_vec[2], coords_vec[3], coords_vec[4] ) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = 18,
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
print(map)
htmltools::HTML("<div style = \" width: 100%;  \" ></div>")
htmltools::HTML("<div style = \" width: 100%; height: 100%; background-color: blue;  \" ></div>")
:::{#cr-map1}
