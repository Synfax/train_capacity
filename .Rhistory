transformed_scores %>%
rename(!!!remove_null_weighted_translations(translations_simple_inv)) %>%
reactable(
defaultSorted = 'score',
defaultSortOrder = 'desc',
defaultColDef = colDef(),
columns = list(
station = colDef(name = 'Station', filterable = T)
) )
#| echo: false
top_10_chart()
#| echo: false
station_lines = readRDS('../r_objects/stations_with_lines.Rdata')
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
rename(Station_Name = "station") %>%
arrange(desc(score)) %>%
mutate(rank = row_number())
score_by_line <- (transformed_scores %>%
left_join(station_lines, by = 'Station_Name') %>%
slice_head(n = n_slice) %>%
select(Station_Name, rank, lines) %>%
unnest(lines) %>%
count(lines, sort = T) %>%
filter(lines != "Richmond and City Loop") %>%
rename(line = 'lines') %>%
left_join(line_groups, by = 'line') %>%
ggplot(., mapping = aes(x = reorder(line, -n) , y = n)) +
theme_report() +
theme(legend.position = 'top') +
geom_col(aes(fill = group)) +
scale_fill_manual(values = setNames(colours$colour, colours$group)) +
guides(x = guide_axis(angle = 45)) +
xlab("Train Line") +
ylab(paste0("Number of stops in top ", n_slice )) ) %>%
ggplotly()
score_by_line
score_by_line
score_by_line <- (transformed_scores %>%
left_join(station_lines, by = 'Station_Name') %>%
slice_head(n = n_slice) %>%
select(Station_Name, rank, lines) %>%
unnest(lines) %>%
count(lines, sort = T) %>%
filter(lines != "Richmond and City Loop") %>%
rename(line = 'lines') %>%
left_join(line_groups, by = 'line') %>%
ggplot(., mapping = aes(x = reorder(line, -n) , y = n)) +
theme_report() +
theme(legend.position = 'top') +
geom_col(aes(fill = group)) +
scale_fill_manual(values = setNames(colours$colour, colours$group)) +
guides(x = guide_axis(angle = 45)) +
xlab("Train Line") +
ylab(paste0("Number of stops in top ", n_slice )) ) %>%
ggplotly() %>%
layout(xaxis = list(tickangle = -45))
score_by_line
score_by_line <- (transformed_scores %>%
left_join(station_lines, by = 'Station_Name') %>%
slice_head(n = n_slice) %>%
select(Station_Name, rank, lines) %>%
unnest(lines) %>%
count(lines, sort = T) %>%
filter(lines != "Richmond and City Loop") %>%
rename(line = 'lines') %>%
left_join(line_groups, by = 'line') %>%
ggplot(., mapping = aes(x = reorder(line, -n) , y = n)) +
theme_report() +
theme(legend.position = 'top') +
geom_col(aes(fill = group)) +
scale_fill_manual(values = setNames(colours$colour, colours$group)) +
guides(x = guide_axis(angle = 45)) +
xlab("Train Line") +
ylab(paste0("Number of stops in top ", n_slice )) ) %>%
ggplotly() %>%
layout(xaxis = list(tickangle = -45)) %>%
layout(legend = list(
orientation = "h",    # horizontal orientation
y = 1.1,             # position above plot
x = 0.5,             # centered
xanchor = "center"   # anchor point for centering
))
score_by_line
already_rendered <- list.files('../rankings_website/stations/', pattern = ".html", recursive = F, full.names = F) %>%
str_replace_all(., '_', ' ') %>%
str_replace_all(., ".html", "") %>%
dplyr::intersect(., stations)
already_rendered
valid_stations <- readRDS('r_objects/transformed_scores.Rdata') %>% pull(station)
edited_station_list = setdiff(valid_stations, already_rendered)
# Render a report for each station
for (station in edited_station_list) {
print(station)
# Create a safe filename
safe_name <- gsub("[^a-zA-Z0-9]", "_", station)
# # Set the output directory for this station
# output_dir <- file.path("stations", safe_name)
# dir.create(output_dir, recursive = T, showWarnings = FALSE)
#
# Sys.sleep(2)
# Render the report
quarto_render(
input = "quarto/run_for_station.qmd",
output_file = paste0(safe_name, ".html"),
execute_params = list(station = station),
output_format = "html", quarto_args = c('--output-dir', '_site/stations/')
)
# Sys.sleep(2)
#
# fs::file_move(
#   path = file.path(output_dir, paste0(safe_name, ".html")),
#   new_path = file.path(output_dir, "quarto/", paste0(safe_name, ".html"))
# )
#
# Sys.sleep(2)
}
# Render a report for each station
for (station in edited_station_list) {
print(station)
# Create a safe filename
safe_name <- gsub("[^a-zA-Z0-9]", "_", station)
# # Set the output directory for this station
# output_dir <- file.path("stations", safe_name)
# dir.create(output_dir, recursive = T, showWarnings = FALSE)
#
# Sys.sleep(2)
# Render the report
quarto_render(
input = "quarto/run_for_station.qmd",
output_file = paste0(safe_name, ".html"),
execute_params = list(station = station),
output_format = "html", quarto_args = c('--output-dir', '../rankings_website/stations/')
)
# Sys.sleep(2)
#
# fs::file_move(
#   path = file.path(output_dir, paste0(safe_name, ".html")),
#   new_path = file.path(output_dir, "quarto/", paste0(safe_name, ".html"))
# )
#
# Sys.sleep(2)
}
locations
df_with_links = readRDS('../r_objects/transformed_scores.Rdata')
readRDS('../r_objects/transformed_scores.Rdata')
readRDS('../r_objects/transformed_scores.Rdata')
valid_stations <-  readRDS('../r_objects/transformed_scores.Rdata') %>%
pull(station)
# Render a report for each station
for (station in edited_station_list) {
print(station)
# Create a safe filename
safe_name <- gsub("[^a-zA-Z0-9]", "_", station)
# # Set the output directory for this station
# output_dir <- file.path("stations", safe_name)
# dir.create(output_dir, recursive = T, showWarnings = FALSE)
#
# Sys.sleep(2)
# Render the report
quarto_render(
input = "quarto/run_for_station.qmd",
output_file = paste0(safe_name, ".html"),
execute_params = list(station = station),
output_format = "html", quarto_args = c('--output-dir', '../rankings_website/stations/')
)
# Sys.sleep(2)
#
# fs::file_move(
#   path = file.path(output_dir, paste0(safe_name, ".html")),
#   new_path = file.path(output_dir, "quarto/", paste0(safe_name, ".html"))
# )
#
# Sys.sleep(2)
}
# Render a report for each station
for (station in edited_station_list) {
print(station)
# Create a safe filename
safe_name <- gsub("[^a-zA-Z0-9]", "_", station)
# # Set the output directory for this station
# output_dir <- file.path("stations", safe_name)
# dir.create(output_dir, recursive = T, showWarnings = FALSE)
#
# Sys.sleep(2)
# Render the report
quarto_render(
input = "quarto/run_for_station.qmd",
output_file = paste0(safe_name, ".html"),
execute_params = list(station = station),
output_format = "html", quarto_args = c('--output-dir', '../rankings_website/stations/')
)
# Sys.sleep(2)
#
# fs::file_move(
#   path = file.path(output_dir, paste0(safe_name, ".html")),
#   new_path = file.path(output_dir, "quarto/", paste0(safe_name, ".html"))
# )
#
# Sys.sleep(2)
}
#| echo: false
station = params$station
zoom_level = 15
library(knitr)
library(tidyverse)
library(sf)
library(leaflet)
devtools::install_github("walkerke/mapgl")
library(mapgl)
library(htmltools)
library(htmlwidgets)
library(reactablefmtr)
library(plotly)
library(RColorBrewer)
library(ggridges)
library(collapse)
source('../r/constants.R')
source('../r/theme.r')
source('../r/station_functions.R')
source('../r/transform.r')
near_properties = get_near_properties(station, fromQuarto = T)
yimby_colours <- list(
hero = "#10461B",
body = "#000000",
background  = "#FDFFEE",
green_base  = "#10461B",
blue_base   = "#283696",
red_base    = "#BA1B21",
yellow_base = "#F6AE00",
green_palette  = c("#10461B", "#2C6F3A", "#579A64", "#8FC49A", "#D6EFDB"),
blue_palette   = c("#1A235F", "#283696", "#9EA7E2", "#D0D6FF", "#E8ECFF"),
red_palette    = c("#D92127", "#BA1B21", "#8E3437", "#C6A2A3", "#E3BABB"),
yellow_palette = c("#F6AE00", "#DE9B00", "#C79E3E", "#F2DCA5", "#FFF7E3")
)
specified_colors <- c("Already developed"                       = "#989898",
"Housing not permitted"                   = "#b1b1b1",
"Civic use makes development less likely" = "#cacaca",
"Low density residential"                 = yimby_colours$blue_palette[5],
"2 storeys (NRZ)"                         = yimby_colours$blue_palette[4],
"3 storeys (GRZ)"                         = yimby_colours$blue_palette[3],
"4 storeys (RGZ)"                         = yimby_colours$blue_palette[2],
"4+ storeys (Mixed use zones)"            = yimby_colours$blue_palette[1],
"6 storeys (Missing middle)"              = yimby_colours$green_palette[3]
)
hourly_factors = readRDS('../r_objects/hourly_factors.Rdata') %>%
as.data.frame()
rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
rename(Station_Name = "station") %>%
filter(Station_Name == station) %>%
pivot_longer(-Station_Name) %>%
select(-Station_Name) %>%
mutate(value = round(value, 2))
transformed_rankings = readRDS('../r_objects/transformed_scores.Rdata') %>%
rename(Station_Name = "station") %>%
arrange(-score) %>%
as.data.frame() %>%
mutate(rank = row_number())
nrow <- nrow(transformed_rankings)
rank <- transformed_rankings %>%
filter(Station_Name == station) %>%
pull(rank)
transformed_rankings = transformed_rankings %>%
filter(Station_Name == station) %>%
select(-rank) %>%
pivot_longer(-Station_Name) %>%
select(-Station_Name) %>%
mutate(value = round(value, 2)) %>%
filter(name != 'score')
total_score <- sum(transformed_rankings$value)
#| echo: false
rankings %>%
left_join(transformed_rankings, by = 'name') %>%
remove_null_weighted_cols() %>%
mutate(name = remove_null_weighted_translations(translations, inv = F)[name]) %>%
reactable(
columns = list(
'name' = colDef(name = 'Metric'),
'value.x' = colDef(name = "Value"),
'value.y' = colDef(name = "Score")
)
)
rankings %>%
left_join(transformed_rankings, by = 'name') %>%
remove_null_weighted_cols()
rankings %>%
left_join(transformed_rankings, by = 'name')
rankings %>%
left_join(transformed_rankings, by = 'name') %>%
remove_null_weighted_cols()
dataframe <- rankings
remove_null_weighted_rows <- function(dataframe, row_col_name = "metric") {
null_weights <- weights[weights == 0] %>%
names()
dataframe %>%
filter(!(get(row_col_name) %in% null_weights)) %>%
return()
}
rankings %>%
left_join(transformed_rankings, by = 'name') %>%
remove_null_weighted_rows() %>%
mutate(name = remove_null_weighted_translations(translations, inv = F)[name]) %>%
reactable(
columns = list(
'name' = colDef(name = 'Metric'),
'value.x' = colDef(name = "Value"),
'value.y' = colDef(name = "Score")
)
)
rankings %>%
left_join(transformed_rankings, by = 'name') %>%
remove_null_weighted_rows(row_col_name = "name") %>%
mutate(name = remove_null_weighted_translations(translations, inv = F)[name]) %>%
reactable(
columns = list(
'name' = colDef(name = 'Metric'),
'value.x' = colDef(name = "Value"),
'value.y' = colDef(name = "Score")
)
)
# Render a report for each station
for (station in edited_station_list) {
print(station)
# Create a safe filename
safe_name <- gsub("[^a-zA-Z0-9]", "_", station)
# # Set the output directory for this station
# output_dir <- file.path("stations", safe_name)
# dir.create(output_dir, recursive = T, showWarnings = FALSE)
#
# Sys.sleep(2)
# Render the report
quarto_render(
input = "quarto/run_for_station.qmd",
output_file = paste0(safe_name, ".html"),
execute_params = list(station = station),
output_format = "html", quarto_args = c('--output-dir', '../rankings_website/stations/')
)
# Sys.sleep(2)
#
# fs::file_move(
#   path = file.path(output_dir, paste0(safe_name, ".html")),
#   new_path = file.path(output_dir, "quarto/", paste0(safe_name, ".html"))
# )
#
# Sys.sleep(2)
}
transform_scores_xminxmax(station_rankings_, weights_random)
source("D:/train_capacity/r/transform.R", echo=TRUE)
transform_scores_xminxmax(station_rankings_, weights_random)
weights_random = c(
"grz_nrz_pc" = 1,
"capacity_delta" = 0,
'average_peak_service_freq' = 1,
'average_peak_service_cap' = 1,
'walkability_score' = 1,
'distance' = 1,
'n_bus_tram' = 1
)
transform_scores_xminxmax(station_rankings_, weights_random)
transform_scores_xminxmax(station_rankings_, weights_random) %>%
slice_head(n = 10) %>%
pull(station)
transform_scores_xminxmax(station_rankings_, weights_random) %>%
slice_head(n = 10) %>%
pull(station)
transform_scores_xminxmax(station_rankings_, weights_random)
weights_random = c(
"grz_nrz_pc" = runif(1,0,1),
"capacity_delta" = 0,
'average_peak_service_freq' = runif(1,0,1),
'average_peak_service_cap' = runif(1,0,1),
'walkability_score' = runif(1,0,1),
'distance' = runif(1,0,1),
'n_bus_tram' = runif(1,0,1)
)
transform_scores_xminxmax(station_rankings_, weights_random)
transform_scores_xminxmax(station_rankings_, weights_random) %>%
slice_head(n = 10)
transform_scores_xminxmax(station_rankings_, weights_random) %>%
as.data.frame() %>%
slice_head(n = 10)
max_score <- sum(weightS_random)
max_score <- sum(weights_random)
transform_scores_xminxmax(station_rankings_, weights_random) %>%
as.data.frame() %>%
slice_head(n = 10) %>%
mutate(pc_score = score/max_score) %>%
select(station, pc_score)
transform_scores_xminxmax(station_rankings_, weights_random) %>%
as.data.frame() %>%
slice_head(n = 10) %>%
mutate(pc_score = score/max_score) %>%
select(station, pc_score) %>%
pivot_wider(values_from = 'pc_score', names_from = 'station')
transform_scores_xminxmax(station_rankings_, weights_random) %>%
as.data.frame() %>%
mutate(pc_score = score/max_score) %>%
select(station, pc_score) %>%
pivot_wider(values_from = 'pc_score', names_from = 'station')
n = 1000
for(i in 1:n) {
print(n)
}
print(i)
for(i in 1:n) {
print(i)
}
n = 1000
res_df <- data.frame()
for(i in 1:n) {
weights_random = c(
"grz_nrz_pc" = runif(1,0,1),
"capacity_delta" = 0,
'average_peak_service_freq' = runif(1,0,1),
'average_peak_service_cap' = runif(1,0,1),
'walkability_score' = runif(1,0,1),
'distance' = runif(1,0,1),
'n_bus_tram' = runif(1,0,1)
)
max_score <- sum(weights_random)
wide_resutls <- transform_scores_xminxmax(station_rankings_, weights_random) %>%
as.data.frame() %>%
mutate(pc_score = score/max_score) %>%
select(station, pc_score) %>%
pivot_wider(values_from = 'pc_score', names_from = 'station')
res_df = bind_rows(res_df, wide_results)
}
res_df <- data.frame()
for(i in 1:n) {
weights_random = c(
"grz_nrz_pc" = runif(1,0,1),
"capacity_delta" = 0,
'average_peak_service_freq' = runif(1,0,1),
'average_peak_service_cap' = runif(1,0,1),
'walkability_score' = runif(1,0,1),
'distance' = runif(1,0,1),
'n_bus_tram' = runif(1,0,1)
)
max_score <- sum(weights_random)
wide_results <- transform_scores_xminxmax(station_rankings_, weights_random) %>%
as.data.frame() %>%
mutate(pc_score = score/max_score) %>%
select(station, pc_score) %>%
pivot_wider(values_from = 'pc_score', names_from = 'station')
res_df = bind_rows(res_df, wide_results)
}
res_df
colMeans(res_df)
colMeans(res_df) %>% as.data.frame()
colMeans(res_df) %>% as.data.frame() %>% v
source("D:/train_capacity/r/graphs.R", echo=TRUE)
?leaflet
source("D:/train_capacity/r/prepare_index_page.R", echo=TRUE)
df <- readRDS('../r_objects/station_rankings.Rdata')
getwd()
df <- readRDS('r_objects/station_rankings.Rdata')
colnames(df)
source('r/transform.r')
transformed_scores
library(shiny)
library(ggplot2)
library(dplyr)
library(reactablefmtr)
weighted_df()
transformed_scores
transformed_scores %>% v
transform_scores_xminxmax <- function(station_rankings, weights_ = weights, print_ = F) {
xminmaxtransform = station_rankings %>%
mutate( across(-station, ~ as.numeric(.) )) %>%
filter_stations(.) %>%
mutate( across(-station, .fns = function(x) { ( x - min(x, na.rm= T)) / ( max(x, na.rm= T) - min(x, na.rm= T)  ) } )) %>%
mutate(across(any_of(columns_to_negate), .fns = function(x) {1-x} )) %>%
mutate(across(-station, .fns = function(x) { x*(weights_[cur_column()] %>% as.vector())  }  )) %>%
rowwise() %>%
mutate(score = sum(across(-station))) %>%
arrange(desc(score))
if(print_) {
print(xminmaxtransform %>%
select(station, score) %>%
tibble())
}
return(xminmaxtransform)
}
install.packages('shinylive')
install.packages('ggiraph')
library(devtools)
#devtools::install_github("walkerke/mapgl")
library(mapgl)
library(sf)
library(tidyverse)
library(data.table)
library(leaflet)
library(htmltools)
library(quarto)
library(dtplyr)
library(janitor)
library(arrow)
library(stringr)
library(DescTools)
library(mapview)
library(geosphere)
library(chron)
library(RColorBrewer)
library(osmdata)
library(collapse)
library(ggiraph)
library(patchwork)
install.packages('ggridges')
library(ggridges)
install.packages('installr')
library(installr)
installr()
