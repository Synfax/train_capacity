as.data.frame() %>%
mutate(across(where(is.numeric), round)) %>%
reactable()
readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
mutate(across(where(is.numeric), ~round(.x, 2))) %>%
reactable()
readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
mutate(across(where(is.numeric), ~round(.x, 2))) %>%
rename(!!!translations) %>%
reactable(theme = sandstone())
translations = c(
'grz_nrz_pc' = 'Zoning suitability',
'capacity_delta' = 'Potential new homes',
'average_peak_service_freq' = 'Train frequency',
'average_peak_service_cap' = 'Available train capacity',
'walkability_score' = 'Local services',
'distance' = 'Distance to CBD',
'n_bus_tram' = 'Other transport infrastructure'
)
readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
mutate(across(where(is.numeric), ~round(.x, 2))) %>%
rename(!!!translations) %>%
reactable(theme = sandstone())
translations
translations[rev(1:length(translations))]
readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
mutate(across(where(is.numeric), ~round(.x, 2))) %>%
rename(!!!translations[rev(1:length(translations))]) %>%
reactable(theme = sandstone())
translations = c(
'grz_nrz_pc' = 'Zoning suitability (% residential and not heritage)',
'capacity_delta' = 'Potential new homes in broad 1000m upzoning',
'average_peak_service_freq' = 'Train frequency in peak (services per hour)',
'average_peak_service_cap' = 'Average train patronage in peak',
'walkability_score' = 'Number of local services within 500m walk',
'distance' = 'Distance to CBD (km)',
'n_bus_tram' = 'Number of bus and tram stops'
)
readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
mutate(across(where(is.numeric), ~round(.x, 2))) %>%
rename(!!!translations) %>%
reactable(theme = sandstone())
readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
mutate(across(where(is.numeric), ~round(.x, 2))) %>%
rename(!!translations) %>%
reactable(theme = sandstone())
readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
mutate(across(where(is.numeric), ~round(.x, 2)))
translations = c(
'Zoning suitability (% residential and not heritage)' = 'grz_nrz_pc',
'Potential new homes in broad 1000m upzoning'='capacity_delta',
'Train frequency in peak (services per hour)' ='average_peak_service_freq',
'Average train patronage in peak'='average_peak_service_cap',
'Number of local services within 500m walk'='walkability_score',
'Distance to CBD (km)'='distance',
'Number of bus and tram stops'='n_bus_tram'
)
readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
mutate(across(where(is.numeric), ~round(.x, 2))) %>%
rename(!!!translations) %>%
reactable(theme = sandstone())
?reactable
readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
mutate(across(where(is.numeric), ~round(.x, 2))) %>%
rename(!!!translations) %>%
reactable(theme = sandstone(),searchable = T, defaultSorted = "Total Score", defaultSortOrder = "desc")
translations = c(
'Zoning suitability (% residential and not heritage)' = 'grz_nrz_pc',
'Potential new homes in broad 1000m upzoning'='capacity_delta',
'Train frequency in peak (services per hour)' ='average_peak_service_freq',
'Average train patronage in peak'='average_peak_service_cap',
'Number of local services within 500m walk'='walkability_score',
'Distance to CBD (km)'='distance',
'Number of bus and tram stops'='n_bus_tram',
'Station Name' = 'station',
'Total Score' = 'score'
)
readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
mutate(across(where(is.numeric), ~round(.x, 2))) %>%
rename(!!!translations) %>%
reactable(theme = sandstone(),searchable = T, defaultSorted = "Total Score", defaultSortOrder = "desc")
library(sf)
station_rankings = readRDS('../r_objects/transformed_scores.Rdata')
station_rankings = station_rankings %>%
pivot_longer(cols = -c('station'))
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free_y')
station_rankings = readRDS('../r_objects/transformed_scores.Rdata')
View(transformed_scores)
station_rankings = readRDS('../r_objects/transformed_scores.Rdata')
station_rankings = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame()
View(station_rankings)
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame()
transformed_scores = station_rankings %>%
pivot_longer(cols = -c('station'))
ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free_y')
ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name))
ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free')
View(transformed_scores)
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame()
transformed_scores = station_rankings %>%
select(-score) %>%
pivot_longer(cols = -c('station'))
ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free')
ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free') + theme_bw()
View(transformed_scores)
translations = c(
'grz_nrz_pc' = 'Zoning suitability',
'capacity_delta' = 'Potential new homes',
'average_peak_service_freq' = 'Train frequency',
'average_peak_service_cap' = 'Available train capacity',
'walkability_score' = 'Local services',
'distance' = 'Distance to CBD',
'n_bus_tram' = 'Other transport infrastructure'
)
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame()
transformed_scores = transformed_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name])
ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free') + theme_bw()
ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_wrap(rows = vars(name), scales = 'free') + theme_bw()
?facet_grid
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame()
transformed_scores = transformed_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name]) %>%
mutate(name = str_wrap(name, 30))
ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free') + theme_bw()
transformed_scores = transformed_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name]) %>%
mutate(name = str_wrap(name, width = 30))
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame()
transformed_scores = transformed_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name]) %>%
mutate(name = str_wrap(name, width = 30))
ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free') + theme_bw()
View(transformed_scores)
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame()
transformed_scores = transformed_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name]) %>%
rowwise() %>%
mutate(name = str_wrap(name, width = 30))
ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free') + theme_bw()
transformed_scores = transformed_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name]) %>%
rowwise() %>%
mutate(name = str_wrap(name, width = 60))
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame()
transformed_scores = transformed_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name]) %>%
rowwise() %>%
mutate(name = str_wrap(name, width = 60))
ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free') + theme_bw()
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame()
transformed_scores = transformed_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name]) %>%
rowwise() %>%
mutate(name = str_wrap(name, width = 10))
View(transformed_scores)
ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free') + theme_bw()
facet_plot <- ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free') + theme_bw()
interactive_density = ggplotly(facet_plot, height = 550)
library(ggplotly)
library(plotly)
interactive_density = ggplotly(facet_plot, height = 550)
interactive_density
interactive_density = layout(interactive_density, height = "550", autosize = T)
interactive_density
?ggplot
transformed_scores = transformed_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name]) %>%
rowwise() %>%
mutate(name = str_wrap(name, width = 5))
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame()
transformed_scores = transformed_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name]) %>%
rowwise() %>%
mutate(name = str_wrap(name, width = 5))
facet_plot <- ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free') + theme_bw()
facet_plot
ggplotly(facet_plot, height = "600")
ggplotly(facet_plot, height = "600px")
ggplotly(facet_plot, height = 600)
makeDensityPlot <- function(var) {
ggplot(transformed_scores %>% filter(name = var)) + geom_density()
}
makeDensityPlot('Zoning suitability')
makeDensityPlot <- function(var = 'Zoning suitability') {
ggplot(transformed_scores %>% filter(name == var)) + geom_density()
}
makeDensityPlot()
transformed_scores %>% filter(name == var)
var = 'Zoning suitability'
transformed_scores %>% filter(name == var)
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame()
transformed_scores = transformed_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name]) %>%
rowwise() %>%
mutate(name = str_wrap(name, width = 5))
View(transformed_scores)
ggplot(transformed_scores %>% filter(name == {var})) + geom_density()
ggplot(transformed_scores %>% filter(name == !!var)) + geom_density()
transformed_scores %>% filter(name == !!var)
transformed_scores %>% filter(name == var)
transformed_scores
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame()
transformed_scores = transformed_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name])
makeDensityPlot <- function(var = 'Zoning suitability') {
ggplot(transformed_scores %>% filter(name == var)) + geom_density()
}
ggplot(transformed_scores %>% filter(name == var)) + geom_density()
ggplot(transformed_scores %>% filter(name == var)) + geom_density(aes(x = value))
ggplot(transformed_scores %>% filter(name == var)) +
geom_density(aes(x = value)) +
theme_bw()
ggplotly(plot)
plot <- ggplot(transformed_scores %>% filter(name == var)) +
geom_density(aes(x = value)) +
theme_bw()
ggplotly(plot)
plot <- ggplot(transformed_scores %>% filter(name == var)) +
geom_density(aes(x = value)) +
theme_bw()
library(tidyverse)
library(sf)
library(leaflet)
library(stringr)
library(RColorBrewer)
library(plotly)
translations = c(
'grz_nrz_pc' = 'Zoning suitability',
'capacity_delta' = 'Potential new homes',
'average_peak_service_freq' = 'Train frequency',
'average_peak_service_cap' = 'Available train capacity',
'walkability_score' = 'Local services',
'distance' = 'Distance to CBD',
'n_bus_tram' = 'Other transport infrastructure'
)
transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame()
transformed_scores = transformed_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name])
makeDensityPlot <- function(var = 'Zoning suitability') {
plot <- ggplot(transformed_scores %>% filter(name == var)) +
geom_density(aes(x = value)) +
theme_bw()
print(plot)
}
makeDensityPlot()
install.package('ggridges')
install.packages('ggridges')
library(ggridges)
library(ggridges)
ggplot(transformed_scores, aes(x = value, y  = name)) + geom_density_ridges
ggplot(transformed_scores, aes(x = value, y  = name)) + geom_density_ridges()
ggplot(transformed_scores, aes(x = value, y  = name)) +
geom_density_ridges(stat = 'binline')
ggplot(transformed_scores, aes(x = value, y  = name)) +
geom_density_ridges(stat = 'binline') + theme_bw()
ggplot(transformed_scores, aes(x = value, y  = name)) +
geom_density_ridges(stat = 'binline') + theme_ridges()
ggplot(transformed_scores, aes(x = value, y  = name)) +
geom_density_ridges(stat = 'binline') + theme_bw()
ggplot(transformed_scores, aes(x = value, y  = name)) +
geom_density_ridges(stat = 'binline') + theme_ridges()
ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(stat = 'binline') + theme_ridges()
ggplotly(ridgeline)
ridgeline <- ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(stat = 'binline') +
theme_ridges()  +
theme(legend.position = "none")
ggplotly(ridgeline)
ridgeline <- ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges() +
theme_ridges()  +
theme(legend.position = "none")
ggplotly(ridgeline)
ridgeline
?geom_density_ridges
ridgeline <- ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_ridgeline()
ridgeline
ridgeline <- ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges() +
theme_ridges()  +
theme(legend.position = "none")
ridgeline
ridgeline <- ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(color = NA) +
theme_ridges()  +
theme(legend.position = "none")
ridgeline
ridgeline <- ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(color = NA, stat = 'binline') +
theme_ridges()  +
theme(legend.position = "none")
ridgeline
ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(color = 'gray', stat = 'binline') +
theme_ridges()  +
theme(legend.position = "none")
ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(color = 'gray', stat = 'binline') +
theme_ridges()  +
theme(legend.position = "none")
ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(alpha = 0.5, bins = 20, stat = 'binline') +
theme_ridges()  +
theme(legend.position = "none")
ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(alpha = 0.5, bins = 30, stat = 'binline') +
theme_ridges()  +
theme(legend.position = "none")
ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(alpha = 0.5, bins = 40, stat = 'binline') +
theme_ridges()  +
theme(legend.position = "none")
ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(alpha = 0.5, bins = 30, stat = 'binline') +
theme_ridges()  +
theme(legend.position = "none")
raw_scores = readRDS('../r_objects/station_rankings.Rdata')
View(raw_scores)
raw_scores = raw_scores %>%
select(-score) %>%
pivot_longer(cols = -c('station'))
raw_scores = raw_scores %>%
pivot_longer(cols = -c('station'))
View(raw_scores)
ggplot(raw_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(alpha = 0.5, bins = 30, stat = 'binline') +
theme_ridges()  +
theme(legend.position = "none")
ggplot(raw_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(alpha = 0.5, bins = 30) +
theme_ridges()  +
theme(legend.position = "none")
?geom_density_ridges
ggplot(raw_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(alpha = 0.5, bins = 30) +
facet_grid(name ~ ., scales = "free_x") +
theme_ridges()  +
theme(legend.position = "none")
ggplot(raw_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(alpha = 0.5, bins = 30) +
facet_grid(name, scales = "free_x") +
theme_ridges()  +
theme(legend.position = "none")
ggplot(raw_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(alpha = 0.5, bins = 30) +
facet_grid(vars(name), scales = "free_x") +
theme_ridges()  +
theme(legend.position = "none")
ggplot(raw_scores) +
geom_density_ridges(alpha = 0.5, bins = 30, mapping = aes(aes(x = value, fill = name))) +
facet_grid(vars(name), scales = "free_x") +
theme_ridges()  +
theme(legend.position = "none")
ggplot(raw_scores) +
geom_density_ridges(alpha = 0.5, bins = 30, mapping = aes(aes(x = value))) +
facet_grid(vars(name), scales = "free_x") +
theme_ridges()  +
theme(legend.position = "none")
ggplot(raw_scores) +
geom_density_ridges(alpha = 0.5, bins = 30, mapping = (aes(x = value))) +
facet_grid(vars(name), scales = "free_x") +
theme_ridges()  +
theme(legend.position = "none")
ggplot(raw_scores) +
geom_density_ridges(alpha = 0.5, bins = 30, mapping = aes(x = value) )  +
facet_grid(vars(name), scales = "free_x") +
theme_ridges()  +
theme(legend.position = "none")
ggplot(raw_scores) +
geom_density_ridges(alpha = 0.5, bins = 30, mapping = aes(x = value, y= name) )  +
facet_grid(vars(name), scales = "free_x") +
theme_ridges()  +
theme(legend.position = "none")
ggplot(raw_scores) +
geom_density_ridges(alpha = 0.5, bins = 30, mapping = aes(x = value, y= name) )  +
theme_ridges()  +
theme(legend.position = "none")
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free') + theme_bw()
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_grid(name ~ ., scales = 'free') + theme_bw()
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_grid(name ~ ., scales = 'free_x') + theme_bw()
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_grid(name ~ ., scales = 'free_y') + theme_bw()
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_grid(name ~ ., scales = 'free_x') + theme_bw()
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_grid(~name., scales = 'free_x') + theme_bw()
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_wrap(~name., scales = 'free_x') + theme_bw()
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_wrap(~name., scales = 'free')
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_wrap(~ name, scales = 'free')
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_wrap(~ name, scales = 'free') + theme_bw()
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_wrap(~ name, scales = 'free_x') + theme_bw()
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_wrap(~ name, scales = 'free_y') + theme_bw()
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_wrap(~ name, scales = 'free') + theme_bw()
ggplot(raw_scores) + geom_density(aes( x = value)) + facet_wrap(~ name, scales = 'free') + theme_ridges()
ggplot(raw_scores) + geom_density(aes( x = value)) +
facet_wrap(~ name, scales = 'free') +
theme_bw() +
theme(axis.text.x = NA)
ggplot(raw_scores) + geom_density(aes( x = value)) +
facet_wrap(~ name, scales = 'free') +
theme_bw() +
theme(axis.text.x = element_blank())
ggplot(raw_scores) + geom_density(aes( x = value)) +
facet_wrap(~ name, scales = 'free') +
theme_bw() +
theme(axis.text.y = element_blank())
ggplot(raw_scores) + geom_density(aes( x = value)) +
facet_wrap(~ name, scales = 'free') +
theme_bw()
raw_scores = readRDS('../r_objects/station_rankings.Rdata')
raw_scores = raw_scores %>%
pivot_longer(cols = -c('station')) %>%
mutate(name = translations[name])
ggplot(raw_scores) + geom_density(aes( x = value)) +
facet_wrap(~ name, scales = 'free') +
theme_bw() +
theme(axis.text.y = element_blank())
ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(alpha = 0.5, bins = 30, stat = 'binline') +
theme_ridges()  +
theme(legend.position = "none") + xlab("Transformed Score") +
theme(axis.text.y = element_blank())
ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
geom_density_ridges(alpha = 0.5, bins = 30, stat = 'binline') +
theme_ridges()  +
theme(legend.position = "none") + xlab("Transformed Score") +
ylab("")
library(tidyverse)
library(reactablefmtr)
source('../r/station_functions.R')
station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
mutate(across(-station, as.numeric)) %>%
mutate(across(where(is.numeric), .fns = function(x) {round(x,2)}))
station_rankings %>%
reactable( pagination = T,
theme = sandstone(),
columns = list(
station = colDef(name = "Station"),
grz_nrz_percentage = colDef(name = "GRZ/NRZ %"),
capacity_delta = colDef(name = "Delta"),
heritage_pc = colDef(name = "Heritage"),
average_peak_service_freq = colDef(name = 'Service Frequency'),
average_peak_service_cap = colDef(name = 'Average load'),
walkability_score = colDef(name = 'Walkability')
) )
View(station_rankings)
station_rankings %>%
reactable( pagination = T,
theme = sandstone(),
columns = list(
station = colDef(name = "Station"),
grz_nrz_percentage = colDef(name = "GRZ/NRZ %"),
capacity_delta = colDef(name = "Delta"),
average_peak_service_freq = colDef(name = 'Service Frequency'),
average_peak_service_cap = colDef(name = 'Average load'),
walkability_score = colDef(name = 'Walkability')
) )
colnames(station_rankings)
source('..r/transform.R')
source('../r/transform.R')
source('../r/constants.R')
source('../r/transform.R')
source('../r/transform.R')
