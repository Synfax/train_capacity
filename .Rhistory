select(Station_Name) %>%
distinct() %>%
slice_sample(prop = 1) %>%
unlist() %>%
as.vector()
# Render a report for each station
for (station in stations) {
# Create a safe filename
safe_name <- gsub("[^a-zA-Z0-9]", "_", station)
# Set the output directory for this station
output_dir <- file.path("stations", safe_name)
dir.create(output_dir, recursive = T, showWarnings = FALSE)
# Render the report
quarto_render(
input = "quarto/run_for_station.qmd",
output_file = paste0(safe_name, ".html"),
execute_params = list(station = station),
output_format = "html",
quarto_args = c("--output-dir", output_dir)
)
fs::file_move(
path = file.path(output_dir, paste0(safe_name, ".html")),
new_path = file.path(output_dir, "quarto/", paste0(safe_name, ".html"))
)
}
library(quarto)
library(tidyverse)
# List of stations
stations = patronage_data %>%
filter(Mode == 'Metro') %>%
select(Station_Name) %>%
distinct() %>%
slice_sample(prop = 1) %>%
unlist() %>%
as.vector()
# Render a report for each station
for (station in stations) {
# Create a safe filename
safe_name <- gsub("[^a-zA-Z0-9]", "_", station)
# Set the output directory for this station
output_dir <- file.path("stations", safe_name)
dir.create(output_dir, recursive = T, showWarnings = FALSE)
# Render the report
quarto_render(
input = "quarto/run_for_station.qmd",
output_file = paste0(safe_name, ".html"),
execute_params = list(station = station),
output_format = "html",
quarto_args = c("--output-dir", output_dir)
)
fs::file_move(
path = file.path(output_dir, paste0(safe_name, ".html")),
new_path = file.path(output_dir, "quarto/", paste0(safe_name, ".html"))
)
}
library(quarto)
# List of stations
stations = patronage_data %>%
filter(Mode == 'Metro') %>%
select(Station_Name) %>%
distinct() %>%
slice_sample(prop = 1) %>%
unlist() %>%
as.vector()
# Render a report for each station
for (station in stations) {
# Create a safe filename
safe_name <- gsub("[^a-zA-Z0-9]", "_", station)
# Set the output directory for this station
output_dir <- file.path("stations", safe_name)
dir.create(output_dir, recursive = T, showWarnings = FALSE)
# Render the report
quarto_render(
input = "quarto/run_for_station.qmd",
output_file = paste0(safe_name, ".html"),
execute_params = list(station = station),
output_format = "html",
quarto_args = c("--output-dir", output_dir)
)
}
rlang::last_trace()
# List of stations
stations = patronage_data %>%
filter(Mode == 'Metro') %>%
select(Station_Name) %>%
distinct() %>%
pull()
# List of stations
stations = patronage_data %>%
filter(Mode == 'Metro') %>%
select(Station_Name) %>%
pull() %>%
distinct()
# List of stations
stations = patronage_data %>%
filter(Mode == 'Metro') %>%
select(Station_Name) %>%
pull() %>%
unique()
library(quarto)
library(fs)
library(tidyverse)
library(devtools)
#devtools::install_github("walkerke/mapgl")
library(mapgl)
library(sf)
library(tidyverse)
library(data.table)
library(leaflet)
library(htmltools)
library(quarto)
library(dtplyr)
library(janitor)
library(arrow)
library(stringr)
library(DescTools)
library(mapview)
library(geosphere)
source('r/helpers.r')
source('r/main_functions.r')
patronage_data = load_and_clean_patronage_data()
# List of stations
stations = patronage_data %>%
filter(Mode == 'Metro') %>%
select(Station_Name) %>%
pull() %>%
unique()
# Render a report for each station
for (station in stations) {
print(station)
# Create a safe filename
safe_name <- gsub("[^a-zA-Z0-9]", "_", station)
# Set the output directory for this station
output_dir <- file.path("stations", safe_name)
dir.create(output_dir, recursive = T, showWarnings = FALSE)
# Render the report
quarto_render(
input = "quarto/run_for_station.qmd",
output_file = paste0(safe_name, ".html"),
execute_params = list(station = station),
output_format = "html",
quarto_args = c("--output-dir", output_dir)
)
fs::file_move(
path = file.path(output_dir, paste0(safe_name, ".html")),
new_path = file.path(output_dir, "quarto/", paste0(safe_name, ".html"))
)
}
locations <- readRDDS('../r_objects/locations.Rdata')
locations <- readRDS('../r_objects/locations.Rdata')
lines_dissolved <- read_sf('../shapefiles/qgis/final_map.shp') %>%
left_join(colours, by = 'group') %>%
st_transform('wgs84')
colours = tribble(
~group, ~ colour,
'Sandringham' , "#F178AF",
'CrossCity' , "#028430",
'Cran/Pak' , "#279FD5",
"Burnley" , "#152C6B",
"Northern" , "#FFBE00",
"Eastern" , "#BE1014",
'event' , "#95979A"
)
lines_dissolved <- read_sf('../shapefiles/qgis/final_map.shp') %>%
left_join(colours, by = 'group') %>%
st_transform('wgs84')
View(locations)
colours = tribble(
~group, ~ colour,
'Sandringham' , "#F178AF",
'CrossCity' , "#028430",
'Cran/Pak' , "#279FD5",
"Burnley" , "#152C6B",
"Northern" , "#FFBE00",
"Eastern" , "#BE1014",
'event' , "#95979A"
)
lines_dissolved <- read_sf('../shapefiles/qgis/final_map.shp') %>%
left_join(colours, by = 'group') %>%
st_transform('wgs84')
locations = locations %>%
mutate(message =
paste0(
'<div style = \" background-color: black; \">',
"<p style = \" color: white; text-align:center ; padding: 5px; \" >", Station_Name, '</p>',
'</div>'
)
) %>%
mutate(win_url = paste0('stations/', 'South_Yarra', '/quarto/', 'South_Yarra', '.html'))
jsCode <- paste0('
function(el, x, data) {
var marker = document.getElementsByClassName("leaflet-interactive");
for(var i=0; i < marker.length; i++){
(function(){
var v = data.win_url[i];
marker[i].addEventListener("click", function() { window.open(v);}, false);
}());
}
}
')
map <- leaflet(width = 2560 , height = 1440) %>%
addPolylines(data = lines_dissolved, color = ~colour, opacity = 1) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = locations$lng, lat=locations$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = locations$lng,
lat = locations$lat,
label = lapply(locations$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = '16pt',
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
)))
library(sf)
?labelOptions
?leaflet
station_rankings = readRDS('../r_objects/station_rankings.Rdata')
station_rankings = station_rankings %>%
pivot_longer(everything(), cols = 'Station_Name')
station_rankings = station_rankings %>%
pivot_longer(everything(-Station_Name), cols = 'Station_Name')
station_rankings = readRDS('../r_objects/station_rankings.Rdata')
?pivot_longer
station_rankings = station_rankings %>%
pivot_longer(-Station_Name, cols = 'Station_Name')
station_rankings = readRDS('../r_objects/station_rankings.Rdata')
station_rankings = station_rankings %>%
pivot_longer(-Station_Name, cols = 'Station_Name')
station_rankings = station_rankings %>%
pivot_longer(-station, cols = 'station')
station_rankings = station_rankings %>%
pivot_longer(everything(), cols = 'station')
station_rankings = readRDS('../r_objects/station_rankings.Rdata')
View(station_rankings)
station_rankings = station_rankings %>%
pivot_longer(everything(-station), cols = 'station')
?everything()
station_rankings = station_rankings %>%
pivot_longer(everything())
View(station_rankings)
station_rankings = station_rankings %>%
pivot_longer(select(-station), cols = 'station')
station_rankings = station_rankings %>%
pivot_longer(select(.,-station), cols = 'station')
station_rankings = station_rankings %>%
pivot_longer(cols = -c('station'))
View(station_rankings)
ggplot(station_rankings) + geom_density() + facet_grid(rows = vars(name))
?geom_density
ggplot(station_rankings) + geom_density(aes( y = value)) + facet_grid(rows = vars(name))
ggplot(station_rankings %>% filter(name == 'capacity_delta'), aes(y = value)) + geom_density()
ggplot(station_rankings %>% filter(name == 'capacity_delta'), aes(x = value)) + geom_density()
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name))
?facet_grid
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free_x')
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free_y')
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free')
ggplot(station_rankings %>% filter(name == 'capacity_delta'), aes(x = value)) + geom_density()
ggplot(station_rankings %>% filter(name == 'distance'), aes(x = value)) + geom_density()
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free')
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free_x')
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free_y')
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free_x')
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), axes = 'all_x')
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), axes = 'all_x', scales = 'free_x')
station_rankings = readRDS('../r_objects/transformed_scores')
station_rankings = readRDS('../r_objects/transformed_scores.Rdata')
View(station_rankings)
station_rankings = readRDS('../r_objects/transformed_scores.Rdata') %>% select(-score)
station_rankings = station_rankings %>%
pivot_longer(cols = -c('station'))
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name))
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free_x')
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free_y')
View(station_rankings)
station_rankings = readRDS('../r_objects/transformed_scores.Rdata') %>% select(-score)
View(station_rankings)
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free_y')
station_rankings = readRDS('../r_objects/transformed_scores.Rdata') %>% select(-score)
station_rankings = station_rankings %>%
pivot_longer(cols = -c('station'))
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free_y')
ggplot(station_rankings %>% filter(name == 'distance'), aes(x = value)) + geom_density()
ggplot(station_rankings) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free_y')
?geom_density
station_rankings = readRDS('../r_objects/station_rankings.Rdata')
station_rankings = readRDS('../r_objects/station_rankings.Rdata')
station_rankings = scale(station_rankings)
station_rankings[2:ncol(station_rankings), ] = scale(station_rankings[2:ncol(station_rankings), ])
station_rankings[2:ncol(station_rankings), ]
station_rankings[1, ] = scale(station_rankings[2:ncol(station_rankings), ])
station_rankings[1, ]
station_rankings[, 2:ncol(station_rankings) ]
station_rankings[, 2:ncol(station_rankings) ] = scale(station_rankings[, 2:ncol(station_rankings) ])
kmeans(station_rankings, 3, iter.max = 10, 1)
View(station_rankings)
station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
as.data.frame()
station_rankings[, 2:ncol(station_rankings) ] = scale(station_rankings[, 2:ncol(station_rankings) ])
kmeans(station_rankings, 3, iter.max = 10, 1)
station_rankings = scale(station_rankings)
station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
as.data.frame()
station_rankings = scale(station_rankings)
kmeans(station_rankings[, 2:ncol(station_rankings) ], 3, iter.max = 10, 1)
kmeans(station_rankings[, 2:ncol(station_rankings) ], 3, iter.max = 10, nstart =  25)
km.res <- kmeans(station_rankings[, 2:ncol(station_rankings) ], 3, iter.max = 10, nstart =  25)
km.res$cluster
station_rankings = station_rankings %>% mutate(cluster = km.res$cluster)
return(km$withinss)
getSS <- function(n) {
km <- kmeans(station_rankings[, 2:ncol(station_rankings) ], n, iter.max = 10, nstart =  25)
return(km$withinss)
}
getSS(2)
getSS(3)
getSS <- function(n) {
km <- kmeans(station_rankings[, 2:ncol(station_rankings) ], n, iter.max = 10, nstart =  25)
return(sum(km$withinss))
}
getSS(2)
getSS(3)
map(1:10, getSS)
map(1:10, getSS) %>% unlist() %>% as.vector()
res.df = data.frame(n = 1:10, map(1:10, getSS) %>% unlist() %>% as.vector() )
View(res.df)
res.df = data.frame(n = 1:10, ss = map(1:10, getSS) %>% unlist() %>% as.vector() )
plot(x = res.df$n, y= res.df$ss)
station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
as.data.frame()
station_rankings = scale(station_rankings)
station_rankings[, 2:ncol(station_rankings) ] = scale(station_rankings[, 2:ncol(station_rankings) ])
getSS <- function(n) {
km <- kmeans(station_rankings[, 2:ncol(station_rankings) ], n, iter.max = 10, nstart =  25)
return(sum(km$withinss))
}
res.df = data.frame(n = 1:10, ss = map(1:10, getSS) %>% unlist() %>% as.vector() )
plot(x = res.df$n, y= res.df$ss)
km.res <- kmeans(station_rankings[, 2:ncol(station_rankings) ], 4, iter.max = 10, nstart =  25)
station_rankings = station_rankings %>% mutate(cluster = km.res$cluster)
View(station_rankings)
km.res
View(station_rankings)
station_rankings %>% filter(cluster == 4)
station_rankings %>% filter(cluster == 4) %>% select(station)
station_rankings %>% filter(cluster == 3) %>% select(station)
station_rankings %>% filter(cluster == 2) %>% select(station)
station_rankings %>% filter(cluster == 1) %>% select(station)
locations = readRDS('../r_objects/locations.Rdata')
station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
as.data.frame()
station_rankings[, 2:ncol(station_rankings) ] = scale(station_rankings[, 2:ncol(station_rankings) ])
getSS <- function(n) {
km <- kmeans(station_rankings[, 2:ncol(station_rankings) ], n, iter.max = 10, nstart =  25)
return(sum(km$withinss))
}
res.df = data.frame(n = 1:10, ss = map(1:10, getSS) %>% unlist() %>% as.vector() )
plot(x = res.df$n, y= res.df$ss)
## elbow is around 4
km.res <- kmeans(station_rankings[, 2:ncol(station_rankings) ], 4, iter.max = 10, nstart =  25)
station_rankings = station_rankings %>%
mutate(cluster = km.res$cluster) %>%
rename(Station_Name = 'station')
station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
as.data.frame()
station_rankings[, 2:ncol(station_rankings) ] = scale(station_rankings[, 2:ncol(station_rankings) ])
getSS <- function(n) {
km <- kmeans(station_rankings[, 2:ncol(station_rankings) ], n, iter.max = 10, nstart =  25)
return(sum(km$withinss))
}
res.df = data.frame(n = 1:10, ss = map(1:10, getSS) %>% unlist() %>% as.vector() )
plot(x = res.df$n, y= res.df$ss)
## elbow is around 4
km.res <- kmeans(station_rankings[, 2:ncol(station_rankings) ], 4, iter.max = 10, nstart =  25)
station_rankings = station_rankings %>%
mutate(cluster = km.res$cluster) %>%
rename(Station_Name = 'station') %>%
select(station, cluster)
station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
as.data.frame()
station_rankings[, 2:ncol(station_rankings) ] = scale(station_rankings[, 2:ncol(station_rankings) ])
getSS <- function(n) {
km <- kmeans(station_rankings[, 2:ncol(station_rankings) ], n, iter.max = 10, nstart =  25)
return(sum(km$withinss))
}
res.df = data.frame(n = 1:10, ss = map(1:10, getSS) %>% unlist() %>% as.vector() )
plot(x = res.df$n, y= res.df$ss)
## elbow is around 4
km.res <- kmeans(station_rankings[, 2:ncol(station_rankings) ], 4, iter.max = 10, nstart =  25)
station_rankings = station_rankings %>%
mutate(cluster = km.res$cluster) %>%
rename(Station_Name = 'station') %>%
select(Station_Name, cluster)
locations = locations %>% left_join(station_rankings, by = 'Station_Name')
locations = readRDS('../r_objects/locations.Rdata') %>% left_join(station_rankings, by = 'Station_Name') %>%
st_as_sf()
?st_as_sf
locations = readRDS('../r_objects/locations.Rdata') %>% left_join(station_rankings, by = 'Station_Name') %>%
st_as_sf(coords = c('lng', 'lat'))
leaflet(locations) %>%
addProviderTiles('CartoDB.Positron') %>%
addCircleMarkers()
fillPal = colorFactor('viridis', domian = locations$cluster)
fillPal = colorFactor('viridis', domain = locations$cluster)
leaflet(locations) %>%
addProviderTiles('CartoDB.Positron') %>%
addCircleMarkers(fillColor = ~fillPal(cluster))
leaflet(locations) %>%
addProviderTiles('CartoDB.Positron') %>%
addCircleMarkers(fillColor = ~fillPal(cluster), stroke = NA)
leaflet(locations) %>%
addProviderTiles('CartoDB.Positron') %>%
addCircleMarkers(fillColor = ~fillPal(cluster), stroke = NA, fillOpacity = 0.9 )
leaflet(locations) %>%
addProviderTiles('CartoDB.Positron') %>%
addCircleMarkers(fillColor = ~fillPal(cluster), stroke = NA, fillOpacity = 0.5 )
km.res <- kmeans(station_rankings[, 2:ncol(station_rankings) ], 6, iter.max = 10, nstart =  25)
station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
as.data.frame()
station_rankings[, 2:ncol(station_rankings) ] = scale(station_rankings[, 2:ncol(station_rankings) ])
getSS <- function(n) {
km <- kmeans(station_rankings[, 2:ncol(station_rankings) ], n, iter.max = 10, nstart =  25)
return(sum(km$withinss))
}
res.df = data.frame(n = 1:10, ss = map(1:10, getSS) %>% unlist() %>% as.vector() )
plot(x = res.df$n, y= res.df$ss)
## elbow is around 4
km.res <- kmeans(station_rankings[, 2:ncol(station_rankings) ], 6, iter.max = 10, nstart =  25)
station_rankings = station_rankings %>%
mutate(cluster = km.res$cluster) %>%
rename(Station_Name = 'station') %>%
select(Station_Name, cluster)
locations = readRDS('../r_objects/locations.Rdata') %>% left_join(station_rankings, by = 'Station_Name') %>%
st_as_sf(coords = c('lng', 'lat'))
fillPal = colorFactor('viridis', domain = locations$cluster)
leaflet(locations) %>%
addProviderTiles('CartoDB.Positron') %>%
addCircleMarkers(fillColor = ~fillPal(cluster), stroke = NA, fillOpacity = 0.5 )
station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
as.data.frame()
station_rankings[, 2:ncol(station_rankings) ] = scale(station_rankings[, 2:ncol(station_rankings) ])
getSS <- function(n) {
km <- kmeans(station_rankings[, 2:ncol(station_rankings) ], n, iter.max = 10, nstart =  25)
return(sum(km$withinss))
}
res.df = data.frame(n = 1:10, ss = map(1:10, getSS) %>% unlist() %>% as.vector() )
plot(x = res.df$n, y= res.df$ss)
## elbow is around 4
km.res <- kmeans(station_rankings[, 2:ncol(station_rankings) ], 4, iter.max = 10, nstart =  25)
station_rankings = station_rankings %>%
mutate(cluster = km.res$cluster) %>%
rename(Station_Name = 'station') %>%
select(Station_Name, cluster)
locations = readRDS('../r_objects/locations.Rdata') %>% left_join(station_rankings, by = 'Station_Name') %>%
st_as_sf(coords = c('lng', 'lat'))
fillPal = colorFactor('viridis', domain = locations$cluster)
leaflet(locations) %>%
addProviderTiles('CartoDB.Positron') %>%
addCircleMarkers(fillColor = ~fillPal(cluster), stroke = NA, fillOpacity = 0.5 )
leaflet(locations) %>%
addProviderTiles('CartoDB.Positron') %>%
addCircleMarkers(fillColor = ~fillPal(cluster), stroke = NA, fillOpacity = 0.5 ) %>%
addLegend(position = 'bottomleft', pal = fillPal, values = ~cluster )
library(quarto)
library(fs)
library(tidyverse)
# List of stations
stations = patronage_data %>%
filter(Mode == 'Metro') %>%
select(Station_Name) %>%
pull() %>%
unique()
# Render a report for each station
for (station in stations) {
print(station)
# Create a safe filename
safe_name <- gsub("[^a-zA-Z0-9]", "_", station)
# Set the output directory for this station
output_dir <- file.path("stations", safe_name)
dir.create(output_dir, recursive = T, showWarnings = FALSE)
# Render the report
quarto_render(
input = "quarto/run_for_station.qmd",
output_file = paste0(safe_name, ".html"),
execute_params = list(station = station),
output_format = "html",
quarto_args = c("--output-dir", output_dir)
)
fs::file_move(
path = file.path(output_dir, paste0(safe_name, ".html")),
new_path = file.path(output_dir, "quarto/", paste0(safe_name, ".html"))
)
}
m <- leaflet(width = '100%')%>%
addPolylines(data = lines_dissolved, color = ~colour, opacity = 1) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = locations$lng, lat=locations$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
setView(zoom = 10) %>%
addLabelOnlyMarkers(lng = locations$lng,
lat = locations$lat,
label = lapply(locations$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, className = 'my-labels', direction = 'auto', textOnly = T, textsize = '10pt',
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
))) %>%
htmlwidgets::onRender(js_code, data = locations)
