tab
critical_variables = data.frame(val = c('restaurant', 'supermarket', 'cafe', 'bar', 'school', 'childcare', 'park'),
key =  c('amenity', 'shop', 'amenity', 'amenity', 'amenity', 'amenity', 'leisure'))
tab <- near_osm %>%
st_drop_geometry() %>%
group_by(type) %>%
count() %>%
mutate(log_n = log(n))
missing_amenities <- setdiff(critical_variables$val, tab$type)
missing_df <- data.frame(type = missing_amenities, n = rep(0, length(missing_amenities)))
View(missing_df)
tab = rbind.data.frame(tab, missing_df)
tab <- near_osm %>%
st_drop_geometry() %>%
group_by(type) %>%
count()
missing_amenities <- setdiff(critical_variables$val, tab$type)
missing_df <- data.frame(type = missing_amenities, n = rep(0, length(missing_amenities)))
tab = rbind.data.frame(tab, missing_df)
test <- as.character(to_list$n)
names(test) <- to_list$type
test
test <- as.character(tab$n)
names(test) <- tab$type
test
get_walkability_score <- function(station) {
near_osm <- get_near_osm(station)
#map_amenities(near_osm)
tab <- near_osm %>%
st_drop_geometry() %>%
group_by(type) %>%
count()
missing_amenities <- setdiff(critical_variables$val, tab$type)
missing_df <- data.frame(type = missing_amenities, n = rep(0, length(missing_amenities)))
tab = rbind.data.frame(tab, missing_df)
test <- as.character(tab$n)
names(test) <- tab$type
#return(tab %>% pull(log_n) %>% sum())
return(test)
#todo: fix
# critical_variables = c('restaurant', 'grocery', 'cafe' , 'bar', 'school', 'child_care', 'park')
#
# walkability_near_station = get_near_osm(station)
#
# #map_osm_nodes(walkability)
#
# walkability_near_station = walkability_near_station %>%
#   select(-cell_number) %>%
#   select(ends_with('500m')) %>%
#   select(starts_with(critical_variables))
#
# average_walkability_score = walkability_near_station %>%
#   summarise(across(dplyr::everything(), median)) %>%
#   mutate(avg = median( c_across(dplyr::everything()))) %>%
#   select(avg) %>%
#   unlist() %>%
#   as.vector()
#
# return(average_walkability_score)
}
amenity_res <- get_walkability_score(station)
other_metric_list <- c(
"station" = station,
"grz_nrz_pc" = find_zoning_suitability(station),
"capacity_delta" = find_zoned_capacity(station),
#"heritage_pc" = find_heritage_pc(station),
"average_peak_service_freq" = get_peak_service_frequency(station),
"average_peak_service_cap" = get_line_peak_capacity_at_closest_station(station),
"distance" = get_distance_to_flinders(station),
"n_bus_tram" = get_bus_and_tram_stops(station)
)
combined_list <- c(other_metric_list, amenity_list)
combined_list
combined_list <- c(other_metric_list, amenity_res)
combined_list
station_rankings <- stations %>%
map(~ as_tibble(as.list(return_information(.x, debug = T))), .progress = T) %>%
list_rbind() %>%
mutate(across(-station, as.numeric)) %>%
filter(!is.nan(walkability_score))
station_rankings <- stations %>%
map(~ as_tibble(as.list(return_information(.x, debug = T))), .progress = T) %>%
list_rbind() %>%
mutate(across(-station, as.numeric))
View(station_rankings)
c('station', critical_variables$val)
walkability_df = station_rankings %>%
select(c('station', critical_variables$val))
View(walkability_df)
walk_df = walkability_df
xminmaxtransform = walk_df %>%
mutate( across(-station, ~ as.numeric(.) )) %>%
mutate( across(-station, .fns = function(x) { ( x - min(x, na.rm= T)) / ( max(x, na.rm= T) - min(x, na.rm= T)  ) } )) %>%
rowwise() %>%
mutate(score = sum(across(-station))) %>%
arrange(desc(score))
View(xminmaxtransform)
xminmaxtransform = walk_df %>%
mutate( across(-station, ~ as.numeric(.) )) %>%
filter(!(station %in% city_loop_stations)) %>%
filter(distance < 25000) %>%
mutate( across(-station, .fns = function(x) { ( x - min(x, na.rm= T)) / ( max(x, na.rm= T) - min(x, na.rm= T)  ) } )) %>%
rowwise() %>%
mutate(score = sum(across(-station))) %>%
arrange(desc(score))
walkability_df = station_rankings %>%
select(c('station', 'distance', critical_variables$val))
walk_df = walkability_df
xminmaxtransform = walk_df %>%
mutate( across(-station, ~ as.numeric(.) )) %>%
filter(!(station %in% city_loop_stations)) %>%
filter(distance < 25000) %>%
select(-distance) %>%
mutate( across(-station, .fns = function(x) { ( x - min(x, na.rm= T)) / ( max(x, na.rm= T) - min(x, na.rm= T)  ) } )) %>%
rowwise() %>%
mutate(score = sum(across(-station))) %>%
arrange(desc(score))
View(xminmaxtransform)
View(station_rankings)
xminmaxtransform = walk_df %>%
mutate( across(-station, ~ as.numeric(.) )) %>%
filter(!(station %in% city_loop_stations)) %>%
filter(distance < 25000) %>%
select(-distance) %>%
mutate( across(-station, .fns = function(x) { ( x - min(x, na.rm= T)) / ( max(x, na.rm= T) - min(x, na.rm= T)  ) } )) %>%
rowwise() %>%
mutate(score = sum(across(-station))) %>%
arrange(desc(score)) %>%
rename(walkability_score = score) %>%
select(station, score)
xminmaxtransform = walk_df %>%
mutate( across(-station, ~ as.numeric(.) )) %>%
filter(!(station %in% city_loop_stations)) %>%
filter(distance < 25000) %>%
select(-distance) %>%
mutate( across(-station, .fns = function(x) { ( x - min(x, na.rm= T)) / ( max(x, na.rm= T) - min(x, na.rm= T)  ) } )) %>%
rowwise() %>%
mutate(score = sum(across(-station))) %>%
arrange(desc(score)) %>%
rename(walkability_score = score) %>%
select(station, walkability_score)
View(xminmaxtransform)
source("D:/train_capacity/r/transform.R", echo=TRUE)
walkability_df = transform_walkability_scores(walkability_df)
station_rankings %>%
select(-c('station', 'distance', critical_variables$val))
station_rankings %>%
select(-c('station', 'distance', critical_variables$val))
station_rankings %>%
select(-c('distance', critical_variables$val)) %>%
#write_csv(station_rankings, 'data/csv_output.csv')
#split intwo two dfs
saveRDS(station_rankings, 'r_objects/station_rankings.Rdata')
station_rankings %>%
select(-c('distance', critical_variables$val)) %>%
#write_csv(station_rankings, 'data/csv_output.csv')
#split intwo two dfs
saveRDS(station_rankings, 'r_objects/station_rankings.Rdata')
station_rankings %>%
select(-c('distance', critical_variables$val))
station_rankings %>%
select(-c('distance', critical_variables$val)) %>%
left_join(walkability_df, by = 'station')
View(walkability_df)
View(walkability_df)
station_rankings %>%
select(-c('distance', critical_variables$val)) %>%
v
walkability_df = transform_walkability_scores(walkability_df)
walkability_df = station_rankings %>%
select(c('station', 'distance', critical_variables$val))
walkability_df = transform_walkability_scores(walkability_df)
station_rankings %>%
select(-c('distance', critical_variables$val)) %>%
left_join(walkability_df, by = 'station') %>%
v
station_rankings %>%
select(-c('distance', critical_variables$val)) %>%
left_join(walkability_df, by = 'station') %>%
filter(!is.na(walkability_score))
saveRDS(station_rankings_, 'r_objects/station_rankings.Rdata')
station_rankings_ = station_rankings %>%
select(-c('distance', critical_variables$val)) %>%
left_join(walkability_df, by = 'station') %>%
filter(!is.na(walkability_score))
saveRDS(station_rankings_, 'r_objects/station_rankings.Rdata')
transformed_scores = transform_scores_xminxmax(station_rankings_)
station_rankings_ = station_rankings %>%
select(-c(critical_variables$val)) %>%
left_join(walkability_df, by = 'station') %>%
filter(!is.na(walkability_score))
saveRDS(station_rankings_, 'r_objects/station_rankings.Rdata')
transformed_scores = transform_scores_xminxmax(station_rankings_)
View(transformed_scores)
locations = readRDS(paste0('r_objects/locations.Rdata'))
colours = tribble(
~group, ~ colour,
'Sandringham' , "#F178AF",
'CrossCity' , "#028430",
'Cran/Pak' , "#279FD5",
"Burnley" , "#152C6B",
"Northern" , "#FFBE00",
"Eastern" , "#BE1014",
'event' , "#95979A"
)
data_to_map <- readRDS('r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
slice_head(n = 10) %>%
arrange(desc(score)) %>%
mutate(rank = row_number(), label = paste0(station, ": ", rank )) %>%
select(station, score, rank, label) %>%
rename(Station_Name = 'station') %>%
dplyr::left_join(locations, by = 'Station_Name') %>%
mutate(message =
paste0(
'<div style = \" background-color: black; \">',
"<p style = \" color: white; text-align:center ; padding: 5px; \" >", rank, '. ' , Station_Name, '</p>',
'</div>'
)
)
#saveRDS(data_to_map, 'r_objects/index_map/data_to_map.Rdata')
lines_dissolved <- read_sf('shapefiles/qgis/final_map.shp') %>%
left_join(colours, by = 'group') %>%
st_transform('wgs84')
#saveRDS(lines_dissolved, 'r_objects/index_map/lines_dissolved.Rdata')
# coords_vec <-  data_to_map %>%
#   st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
#   st_bbox() %>%
#   st_as_sfc() %>%
#   st_buffer(dist = 800) %>%
#   st_bbox() %>%
#   as.vector()
test <- data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
st_bbox() %>%
st_as_sfc() %>%
st_buffer(dist = 800) %>%
st_as_sf() %>%
st_set_geometry('x')
bounds <- c(min(data_to_map$lng), min(data_to_map$lat),
max(data_to_map$lng), max(data_to_map$lat))
#saveRDS(coords_vec, 'r_objects/index_map/coords_vec.Rdata')
#  addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_lite/{z}/{x}/{y}{r}.png') %>%
# had to remove the {r} for some reason?
map <- leaflet(width = 2560 , height = 1440) %>%
addPolylines(data = lines_dissolved, color = ~colour, opacity = 1) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = '16pt',
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
))) %>%
fitBounds(lng1 = bounds[1], lat1 = bounds[2], lng2 = bounds[3], lat2 = bounds[4])
mapshot(map, file = 'quarto/index_images/main.png')
locations = readRDS(paste0('r_objects/locations.Rdata'))
colours = tribble(
~group, ~ colour,
'Sandringham' , "#F178AF",
'CrossCity' , "#028430",
'Cran/Pak' , "#279FD5",
"Burnley" , "#152C6B",
"Northern" , "#FFBE00",
"Eastern" , "#BE1014",
'event' , "#95979A"
)
library(devtools)
#devtools::install_github("walkerke/mapgl")
library(mapgl)
library(sf)
library(tidyverse)
library(data.table)
library(leaflet)
library(htmltools)
library(quarto)
library(dtplyr)
library(janitor)
library(arrow)
library(stringr)
library(DescTools)
library(mapview)
library(geosphere)
library(chron)
library(RColorBrewer)
library(osmdata)
locations = readRDS(paste0('r_objects/locations.Rdata'))
colours = tribble(
~group, ~ colour,
'Sandringham' , "#F178AF",
'CrossCity' , "#028430",
'Cran/Pak' , "#279FD5",
"Burnley" , "#152C6B",
"Northern" , "#FFBE00",
"Eastern" , "#BE1014",
'event' , "#95979A"
)
data_to_map <- readRDS('r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
slice_head(n = 10) %>%
arrange(desc(score)) %>%
mutate(rank = row_number(), label = paste0(station, ": ", rank )) %>%
select(station, score, rank, label) %>%
rename(Station_Name = 'station') %>%
dplyr::left_join(locations, by = 'Station_Name') %>%
mutate(message =
paste0(
'<div style = \" background-color: black; \">',
"<p style = \" color: white; text-align:center ; padding: 5px; \" >", rank, '. ' , Station_Name, '</p>',
'</div>'
)
)
#saveRDS(data_to_map, 'r_objects/index_map/data_to_map.Rdata')
lines_dissolved <- read_sf('shapefiles/qgis/final_map.shp') %>%
left_join(colours, by = 'group') %>%
st_transform('wgs84')
#saveRDS(lines_dissolved, 'r_objects/index_map/lines_dissolved.Rdata')
# coords_vec <-  data_to_map %>%
#   st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
#   st_bbox() %>%
#   st_as_sfc() %>%
#   st_buffer(dist = 800) %>%
#   st_bbox() %>%
#   as.vector()
test <- data_to_map %>%
st_as_sf(coords = c('lng','lat'), crs = 'wgs84') %>%
st_bbox() %>%
st_as_sfc() %>%
st_buffer(dist = 800) %>%
st_as_sf() %>%
st_set_geometry('x')
bounds <- c(min(data_to_map$lng), min(data_to_map$lat),
max(data_to_map$lng), max(data_to_map$lat))
#saveRDS(coords_vec, 'r_objects/index_map/coords_vec.Rdata')
#  addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_lite/{z}/{x}/{y}{r}.png') %>%
# had to remove the {r} for some reason?
map <- leaflet(width = 2560 , height = 1440) %>%
addPolylines(data = lines_dissolved, color = ~colour, opacity = 1) %>%
addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(opacity = 0.5)) %>%
addCircleMarkers(lng = data_to_map$lng, lat=data_to_map$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
addLabelOnlyMarkers(lng = data_to_map$lng,
lat = data_to_map$lat,
label = lapply(data_to_map$message, htmltools::HTML),
labelOptions = labelOptions(noHide = T, direction = 'auto', textOnly = T, textsize = '16pt',
style = list(
'font-weight' = '800',
'text-decoration' = 'underline',
'text-decoration-color' = 'white',
'margin' = '5px',
'letter-spacing' = '0.5px'
))) %>%
fitBounds(lng1 = bounds[1], lat1 = bounds[2], lng2 = bounds[3], lat2 = bounds[4])
mapshot(map, file = 'quarto/index_images/main.png')
writeStationMaps <- function(rank, zm = 17) {
station_map = map %>%
setView(data_to_map$lng[rank], data_to_map$lat[rank], zoom = zm)
mapshot(station_map, file = paste0('quarto/index_images/',as.numeric(rank),'.png'))
}
walk(1:10, .f = writeStationMaps)
saveRDS(walkability_df, 'r_objects/station_walkability.Rdata')
walkability_df
walkability_df = station_rankings %>%
select(c('station', 'distance', critical_variables$val))
View(walkability_df)
saveRDS(walkability_df %>% select(-distance), 'r_objects/station_walkability.Rdata')
library(tidyverse)
library(sf)
library(leaflet)
library(shiny)
library(htmlwidgets)
library(reactablefmtr)
locations <- readRDS('../r_objects/locations.Rdata')
transformed_scores <- readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
slice_head(n = 10) %>%
mutate(across(where(is.numeric), .fns = function(x) round(x, 2) )) %>%
mutate(rank = row_number())
san_station <- function(x) {
return( str_replace(x, ' ', '_') )
}
# translations = c(
#   'grz_nrz_pc' = 'Zoning suitability',
#   'capacity_delta' = 'Potential new homes',
#   'average_peak_service_freq' = 'Train frequency',
#   'average_peak_service_cap' = 'Available train capacity',
#   'walkability_score' = 'Local services',
#   'distance' = 'Distance to CBD',
#   'n_bus_tram' = 'Other transport infrastructure'
# )
# compact_data_bars <- function(data, fill_color = "#00bfc4", inside_color = "white", outside_color = "black", force_outside = FALSE, ...) {
#   orig_formatter <- reactablefmtr::data_bars(data, fill_color = fill_color, force_outside = force_outside, ...)
#
#   function(value, index, name) {
#     bar <- orig_formatter(value, index, name)
#     script <- sprintf("
#       const b = this.querySelector('.bar-cell');
#       if (b) {
#         const t = b.querySelector('span');
#         if (t) t.style.color = (b.querySelector('.bar').offsetWidth < b.offsetWidth && %s) ? '%s' : '%s';
#       }
#     ", !force_outside, inside_color, outside_color)
#
#     tagList(bar, tags$script(HTML(script)))
#   }
# }
printScores <- function(r) {
transformed_scores %>%
filter(rank == r) %>%
pivot_longer(-station) %>%
select(-station) %>%
filter(!(name %in% c('score','rank'))) %>%
mutate(name = translations[name]) %>%
reactable(theme = cyborg(),
class = "pageinforeactable",
columns = list(
'name' = colDef(name = 'Metric'),
'value' = colDef(name = "Score",
cell = data_bars(.,
text_position = 'above',
fill_color = 'white',
text_color = 'white',
background = 'opaque',
fill_opacity = 1,
bar_height = 24,
bold_text = T))
)
) %>%
return()
}
printScores(1)
library(tidyverse)
library(sf)
library(leaflet)
library(shiny)
library(htmlwidgets)
library(reactablefmtr)
locations <- readRDS('../r_objects/locations.Rdata')
transformed_scores <- readRDS('../r_objects/transformed_scores.Rdata') %>%
as.data.frame() %>%
slice_head(n = 10) %>%
mutate(across(where(is.numeric), .fns = function(x) round(x, 2) )) %>%
mutate(rank = row_number())
san_station <- function(x) {
return( str_replace(x, ' ', '_') )
}
# translations = c(
#   'grz_nrz_pc' = 'Zoning suitability',
#   'capacity_delta' = 'Potential new homes',
#   'average_peak_service_freq' = 'Train frequency',
#   'average_peak_service_cap' = 'Available train capacity',
#   'walkability_score' = 'Local services',
#   'distance' = 'Distance to CBD',
#   'n_bus_tram' = 'Other transport infrastructure'
# )
# compact_data_bars <- function(data, fill_color = "#00bfc4", inside_color = "white", outside_color = "black", force_outside = FALSE, ...) {
#   orig_formatter <- reactablefmtr::data_bars(data, fill_color = fill_color, force_outside = force_outside, ...)
#
#   function(value, index, name) {
#     bar <- orig_formatter(value, index, name)
#     script <- sprintf("
#       const b = this.querySelector('.bar-cell');
#       if (b) {
#         const t = b.querySelector('span');
#         if (t) t.style.color = (b.querySelector('.bar').offsetWidth < b.offsetWidth && %s) ? '%s' : '%s';
#       }
#     ", !force_outside, inside_color, outside_color)
#
#     tagList(bar, tags$script(HTML(script)))
#   }
# }
printScores <- function(r) {
transformed_scores %>%
filter(rank == r) %>%
pivot_longer(-station) %>%
select(-station) %>%
filter(!(name %in% c('score','rank'))) %>%
mutate(name = translations[name]) %>%
reactable(theme = cyborg(),
class = "pageinforeactable",
columns = list(
'name' = colDef(name = 'Metric'),
'value' = colDef(name = "Score",
cell = data_bars(.,
text_position = 'above',
fill_color = 'white',
text_color = 'white',
background = 'opaque',
fill_opacity = 1,
bar_height = 24,
bold_text = T))
)
) %>%
return()
}
transformed_scores %>%
select(station, score) %>%
reactable(theme = cyborg(),
class = "pageinforeactable",
columns = list(
'station' = colDef(name = 'station'),
'score' = colDef(name = "Score",
cell = data_bars(.,
fill_color = 'white',
background = 'opaque'))
)
)
printScores(1)
