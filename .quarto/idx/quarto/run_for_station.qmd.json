{"title":"Station Capacity","markdown":{"yaml":{"title":"Station Capacity","author":"Paul S","date":"6/6/24","params":{"station":"Brunswick"},"format":{"html":{"theme":"zephyr","fig-width":8,"fig-height":8,"code-fold":false,"toc":true,"toc-depth":4,"toc-location":"left","page-layout":"full"}}},"headingText":"Info","containsRefs":false,"markdown":"\n\nThis file needs to have one section for each of the metrics. e.g. heritage by zone, zoned capacity, etc. In addition to other cool patronage stuff.\n\n```{r}\n\n\nlibrary(knitr)\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(leaflet)\ndevtools::install_github(\"walkerke/mapgl\")\nlibrary(mapgl)\nlibrary(htmltools)\nlibrary(htmlwidgets)\nlibrary(reactablefmtr)\n\n\nsource('../r/station_functions.R')\n\n\nyimby_colours <- list(\n  hero = \"#10461B\",\n  body = \"#000000\",\n  background  = \"#FDFFEE\",\n  green_base  = \"#10461B\",\n  blue_base   = \"#283696\",\n  red_base    = \"#BA1B21\",\n  yellow_base = \"#F6AE00\",\n  green_palette  = c(\"#10461B\", \"#2C6F3A\", \"#579A64\", \"#8FC49A\", \"#D6EFDB\"),\n  blue_palette   = c(\"#1A235F\", \"#283696\", \"#9EA7E2\", \"#D0D6FF\", \"#E8ECFF\"),\n  red_palette    = c(\"#D92127\", \"#BA1B21\", \"#8E3437\", \"#C6A2A3\", \"#E3BABB\"),\n  yellow_palette = c(\"#F6AE00\", \"#DE9B00\", \"#C79E3E\", \"#F2DCA5\", \"#FFF7E3\")\n)\n\nspecified_colors <- c(\"Already developed\"                       = \"#989898\",\n                      \"Housing not permitted\"                   = \"#b1b1b1\",\n                      \"Civic use makes development less likely\" = \"#cacaca\", \n                      \"Low density residential\"                 = yimby_colours$blue_palette[5],\n                      \"2 storeys (NRZ)\"                         = yimby_colours$blue_palette[4],\n                      \"3 storeys (GRZ)\"                         = yimby_colours$blue_palette[3],\n                      \"4 storeys (RGZ)\"                         = yimby_colours$blue_palette[2],\n                      \"4+ storeys (Mixed use zones)\"            = yimby_colours$blue_palette[1],\n                      \"6 storeys (Missing middle)\"              = yimby_colours$green_palette[3]\n)\n\n```\n\noutput `r params$station `\n\ntodo: what line does the station serve (could be multiple?)\n\nwhere does this station rank within its line? where does it rank in the overall network?\n\nwhen is this station busiest? \n\n\n\n::: {.panel-tabset}\n\n## Average Patronage\n\n```{r warning=FALSE,message=FALSE}\n#| echo: false \n\n\nstation = params$station\n\nstation = 'Brunswick'\n\nhourly_factors = readRDS('../r_objects/hourly_factors.Rdata') %>%\n  as.data.frame()\n\nto_plot <- hourly_factors %>% filter(Station_Name == station)\n  \np <- ggplot(to_plot, mapping = aes(x = hour_of_day, y = avg_patronage)) + geom_point()\n  \np + facet_grid(rows = vars(Direction)) + theme_bw(base_size = 15)\n\n```\n\n## Frequency and Load Factors\n\n\n```{r  warning=FALSE,message=FALSE}\n#| echo: false \n\nservice_frequencies = readRDS('../r_objects/service_frequencies.Rdata')\n\n  for_select_station = service_frequencies %>% filter(Station_Name == station)\n  \n  coeff = ( max(for_select_station %>%\n                   filter(Day_Type == 'Normal Weekday') %>%\n                   select(sph) ) /\n              max( hourly_factors %>% filter(Station_Name == station) %>% select(capacity_factor)  ))\n\n  ggplot( ) +\n    geom_line(for_select_station %>% filter(Day_Type == 'Normal Weekday') , mapping = aes(x = hour_of_day, y = sph, group = 1)) +\n    geom_point(for_select_station %>% filter(Day_Type == 'Normal Weekday') , mapping = aes(x = hour_of_day, y = sph, group = 1)) +\n    geom_line(hourly_factors %>% filter(Station_Name == station), mapping = aes(x = hour_of_day, y = capacity_factor * coeff, group = 1), col = 'red') +\n    geom_point(hourly_factors %>% filter(Station_Name == station), mapping = aes(x = hour_of_day, y = capacity_factor * coeff, group = 1), col = 'red') +\n    scale_y_continuous(\n\n      # Features of the first axis\n      name = \"Services Per Hour\",\n\n      # Add a second axis and specify its features\n      sec.axis = sec_axis(~.*(1/coeff), name=\"Capacity Factor\")\n    ) + facet_grid(rows = vars(Direction))\n  \n  # max_capacity = for_select_station %>%\n  #   filter(Day_Type == 'Normal Weekday') %>%\n  #   select(sph) %>%\n  #   max()\n  # \n  # ggplot( ) +\n  #   geom_line(for_select_station %>% filter(Day_Type == 'Normal Weekday') , mapping = aes(x = hour_of_day, y = sph/max_capacity, group = 1)) +\n  #   geom_point(for_select_station %>% filter(Day_Type == 'Normal Weekday') , mapping = aes(x = hour_of_day, y = sph/max_capacity, group = 1)) +\n  #   geom_line(hourly_factors %>% filter(Station_Name == station), mapping = aes(x = hour_of_day, y = capacity_factor, group = 1), col = 'red') +\n  #   geom_point(hourly_factors %>% filter(Station_Name == station), mapping = aes(x = hour_of_day, y = capacity_factor, group = 1), col = 'red') +\n  #   facet_grid(rows = vars(Direction)) + theme_bw()\n  # \n  # ratio = for_select_station %>%\n  #   filter(Day_Type == 'Normal Weekday') %>% left_join(\n  #           (hourly_factors %>%\n  #              filter(Station_Name == station)), by = c('hour_of_day', 'Direction') )\n  # \n  # ratio = ratio %>% mutate(rt = capacity_factor /  (sph/max_capacity) )\n  # \n  # ggplot() + geom_line(ratio, mapping = aes(x = hour_of_day, y = rt, group = 1 )) + facet_grid(rows = vars(Direction))\n\n\n```\n\n:::\n\n\n\n## map\n\n```{r warning=FALSE,message=FALSE}\n#| echo: false \n\nnear_station = get_near_properties(station, fromQuarto = T)\n\n# %>% mutate( old_color = specified_colors[category], new_color = specified_colors[category_new] )\n\n# m1 <- mapgl::maplibre(style = mapgl::carto_style('positron')) %>%\n#   mapgl::add_fill_extrusion_layer(id = 'brunswick', source = near_station,\n#                            fill_extrusion_opacity = 0.85,\n#                            fill_extrusion_color = c('get', 'old_color'),\n#                            fill_extrusion_height = c(\"get\", \"old_height\") ) %>%\n#     mapgl::fly_to(\n#       center = c(145.063115,-37.814175),\n#       zoom = 9,\n#       pitch = 40\n#     )\n# \n# m1\n\n#palTest = colorFactor(palette = 'Dark2', domain = near_station$category)\nleaflet(near_station) %>%\n  addProviderTiles('CartoDB.Positron') %>%\n  addPolygons(fillColor = , color = NA, weight = 0, fillOpacity = 0.7) \n\n```\n\n### Land Use Distribution\n\n```{r warning=FALSE,message=FALSE}\n#| echo: false \n\nsplit_by_zone = split_by_zone_type(near_station)\n\nbar_chart <- function(label, width = \"100%\", height = \"1rem\", fill = \"#00bfc4\", background = NULL) {\n  bar <- div(style = list(background = fill, width = width, height = height))\n  chart <- div(style = list(flexGrow = 1, marginLeft = \"0.5rem\", background = background), bar)\n  div(style = list(display = \"flex\", alignItems = \"center\"), label, chart)\n}\n\nnear_station %>%\n  reactable(\n    defaultSorted = list('ttl_area' = \"desc\"),\n    theme = sandstone(),\n    columns = list(\n      type_short = colDef(name = \"Type Short\"),\n      ttl_area = colDef(name = \"Total Area\", cell = function(value) {\n          width <- paste0(value / max(.$ttl_area) * 100, \"%\")\n          bar_chart(value, width = width)\n        })\n      \n    ))\n\n\n\n```\n\n\n","srcMarkdownNoYaml":"\n\nThis file needs to have one section for each of the metrics. e.g. heritage by zone, zoned capacity, etc. In addition to other cool patronage stuff.\n\n```{r}\n\n\nlibrary(knitr)\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(leaflet)\ndevtools::install_github(\"walkerke/mapgl\")\nlibrary(mapgl)\nlibrary(htmltools)\nlibrary(htmlwidgets)\nlibrary(reactablefmtr)\n\n\nsource('../r/station_functions.R')\n\n\nyimby_colours <- list(\n  hero = \"#10461B\",\n  body = \"#000000\",\n  background  = \"#FDFFEE\",\n  green_base  = \"#10461B\",\n  blue_base   = \"#283696\",\n  red_base    = \"#BA1B21\",\n  yellow_base = \"#F6AE00\",\n  green_palette  = c(\"#10461B\", \"#2C6F3A\", \"#579A64\", \"#8FC49A\", \"#D6EFDB\"),\n  blue_palette   = c(\"#1A235F\", \"#283696\", \"#9EA7E2\", \"#D0D6FF\", \"#E8ECFF\"),\n  red_palette    = c(\"#D92127\", \"#BA1B21\", \"#8E3437\", \"#C6A2A3\", \"#E3BABB\"),\n  yellow_palette = c(\"#F6AE00\", \"#DE9B00\", \"#C79E3E\", \"#F2DCA5\", \"#FFF7E3\")\n)\n\nspecified_colors <- c(\"Already developed\"                       = \"#989898\",\n                      \"Housing not permitted\"                   = \"#b1b1b1\",\n                      \"Civic use makes development less likely\" = \"#cacaca\", \n                      \"Low density residential\"                 = yimby_colours$blue_palette[5],\n                      \"2 storeys (NRZ)\"                         = yimby_colours$blue_palette[4],\n                      \"3 storeys (GRZ)\"                         = yimby_colours$blue_palette[3],\n                      \"4 storeys (RGZ)\"                         = yimby_colours$blue_palette[2],\n                      \"4+ storeys (Mixed use zones)\"            = yimby_colours$blue_palette[1],\n                      \"6 storeys (Missing middle)\"              = yimby_colours$green_palette[3]\n)\n\n```\n\noutput `r params$station `\n\ntodo: what line does the station serve (could be multiple?)\n\nwhere does this station rank within its line? where does it rank in the overall network?\n\nwhen is this station busiest? \n\n## Info\n\n\n::: {.panel-tabset}\n\n## Average Patronage\n\n```{r warning=FALSE,message=FALSE}\n#| echo: false \n\n\nstation = params$station\n\nstation = 'Brunswick'\n\nhourly_factors = readRDS('../r_objects/hourly_factors.Rdata') %>%\n  as.data.frame()\n\nto_plot <- hourly_factors %>% filter(Station_Name == station)\n  \np <- ggplot(to_plot, mapping = aes(x = hour_of_day, y = avg_patronage)) + geom_point()\n  \np + facet_grid(rows = vars(Direction)) + theme_bw(base_size = 15)\n\n```\n\n## Frequency and Load Factors\n\n\n```{r  warning=FALSE,message=FALSE}\n#| echo: false \n\nservice_frequencies = readRDS('../r_objects/service_frequencies.Rdata')\n\n  for_select_station = service_frequencies %>% filter(Station_Name == station)\n  \n  coeff = ( max(for_select_station %>%\n                   filter(Day_Type == 'Normal Weekday') %>%\n                   select(sph) ) /\n              max( hourly_factors %>% filter(Station_Name == station) %>% select(capacity_factor)  ))\n\n  ggplot( ) +\n    geom_line(for_select_station %>% filter(Day_Type == 'Normal Weekday') , mapping = aes(x = hour_of_day, y = sph, group = 1)) +\n    geom_point(for_select_station %>% filter(Day_Type == 'Normal Weekday') , mapping = aes(x = hour_of_day, y = sph, group = 1)) +\n    geom_line(hourly_factors %>% filter(Station_Name == station), mapping = aes(x = hour_of_day, y = capacity_factor * coeff, group = 1), col = 'red') +\n    geom_point(hourly_factors %>% filter(Station_Name == station), mapping = aes(x = hour_of_day, y = capacity_factor * coeff, group = 1), col = 'red') +\n    scale_y_continuous(\n\n      # Features of the first axis\n      name = \"Services Per Hour\",\n\n      # Add a second axis and specify its features\n      sec.axis = sec_axis(~.*(1/coeff), name=\"Capacity Factor\")\n    ) + facet_grid(rows = vars(Direction))\n  \n  # max_capacity = for_select_station %>%\n  #   filter(Day_Type == 'Normal Weekday') %>%\n  #   select(sph) %>%\n  #   max()\n  # \n  # ggplot( ) +\n  #   geom_line(for_select_station %>% filter(Day_Type == 'Normal Weekday') , mapping = aes(x = hour_of_day, y = sph/max_capacity, group = 1)) +\n  #   geom_point(for_select_station %>% filter(Day_Type == 'Normal Weekday') , mapping = aes(x = hour_of_day, y = sph/max_capacity, group = 1)) +\n  #   geom_line(hourly_factors %>% filter(Station_Name == station), mapping = aes(x = hour_of_day, y = capacity_factor, group = 1), col = 'red') +\n  #   geom_point(hourly_factors %>% filter(Station_Name == station), mapping = aes(x = hour_of_day, y = capacity_factor, group = 1), col = 'red') +\n  #   facet_grid(rows = vars(Direction)) + theme_bw()\n  # \n  # ratio = for_select_station %>%\n  #   filter(Day_Type == 'Normal Weekday') %>% left_join(\n  #           (hourly_factors %>%\n  #              filter(Station_Name == station)), by = c('hour_of_day', 'Direction') )\n  # \n  # ratio = ratio %>% mutate(rt = capacity_factor /  (sph/max_capacity) )\n  # \n  # ggplot() + geom_line(ratio, mapping = aes(x = hour_of_day, y = rt, group = 1 )) + facet_grid(rows = vars(Direction))\n\n\n```\n\n:::\n\n\n\n## map\n\n```{r warning=FALSE,message=FALSE}\n#| echo: false \n\nnear_station = get_near_properties(station, fromQuarto = T)\n\n# %>% mutate( old_color = specified_colors[category], new_color = specified_colors[category_new] )\n\n# m1 <- mapgl::maplibre(style = mapgl::carto_style('positron')) %>%\n#   mapgl::add_fill_extrusion_layer(id = 'brunswick', source = near_station,\n#                            fill_extrusion_opacity = 0.85,\n#                            fill_extrusion_color = c('get', 'old_color'),\n#                            fill_extrusion_height = c(\"get\", \"old_height\") ) %>%\n#     mapgl::fly_to(\n#       center = c(145.063115,-37.814175),\n#       zoom = 9,\n#       pitch = 40\n#     )\n# \n# m1\n\n#palTest = colorFactor(palette = 'Dark2', domain = near_station$category)\nleaflet(near_station) %>%\n  addProviderTiles('CartoDB.Positron') %>%\n  addPolygons(fillColor = , color = NA, weight = 0, fillOpacity = 0.7) \n\n```\n\n### Land Use Distribution\n\n```{r warning=FALSE,message=FALSE}\n#| echo: false \n\nsplit_by_zone = split_by_zone_type(near_station)\n\nbar_chart <- function(label, width = \"100%\", height = \"1rem\", fill = \"#00bfc4\", background = NULL) {\n  bar <- div(style = list(background = fill, width = width, height = height))\n  chart <- div(style = list(flexGrow = 1, marginLeft = \"0.5rem\", background = background), bar)\n  div(style = list(display = \"flex\", alignItems = \"center\"), label, chart)\n}\n\nnear_station %>%\n  reactable(\n    defaultSorted = list('ttl_area' = \"desc\"),\n    theme = sandstone(),\n    columns = list(\n      type_short = colDef(name = \"Type Short\"),\n      ttl_area = colDef(name = \"Total Area\", cell = function(value) {\n          width <- paste0(value / max(.$ttl_area) * 100, \"%\")\n          bar_chart(value, width = width)\n        })\n      \n    ))\n\n\n\n```\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":8,"fig-height":8,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":4,"output-file":"run_for_station.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.55","title":"Station Capacity","author":"Paul S","date":"6/6/24","params":{"station":"Brunswick"},"theme":"zephyr","toc-location":"left","page-layout":"full"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}