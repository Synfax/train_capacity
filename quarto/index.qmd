---
format:
  closeread-html:
    remove-header-space: false
    css: index.css
    image: "index_images/main.png"
    cr-section:
      layout: "overlay-left"
      
---

```{=html}
<script>
function modifyMainDiv() {
  console.log('blue');
  const mainDiv = document.getElementById('quarto-document-content');
  if (mainDiv) {
    console.log('found');
    mainDiv.classList.remove('column-body');
    mainDiv.classList.add('column-page-right');
    // You can add more class modifications here
  }
}

// This function will be called by the script in the Quarto document
modifyMainDiv();
</script>
```

```{r, message=FALSE, warning=FALSE}

library(tidyverse)
library(sf)
library(leaflet)
library(shiny)
library(htmlwidgets)
library(reactablefmtr)

locations <- readRDS('../r_objects/locations.Rdata')

transformed_scores <- readRDS('../r_objects/transformed_scores.Rdata') %>%
  as.data.frame() %>%
  slice_head(n = 10) %>%
  mutate(across(where(is.numeric), .fns = function(x) round(x, 2) )) %>%
  mutate(rank = row_number())

san_station <- function(x) {
  return( str_replace(x, ' ', '_') )
}

translations = c(
  'grz_nrz_pc' = 'Zoning suitability',
  'capacity_delta' = 'Potential new homes',
  'average_peak_service_freq' = 'Train frequency',
  'average_peak_service_cap' = 'Available train capacity',
  'walkability_score' = 'Local services',
  'distance' = 'Distance to CBD',
  'n_bus_tram' = 'Other transport infrastructure'
)

printScores <- function(r) {
  transformed_scores %>% 
  filter(rank == r) %>%
  pivot_longer(-station) %>%
  select(-station) %>%
  filter(!(name %in% c('score','rank'))) %>%
  mutate(name = translations[name]) %>%
  reactable(theme = cyborg(),
            class = "pageinforeactable",
            columns = list(
              'name' = colDef(name = 'Metric'),
              'value' = colDef(name = "Score",
                             cell = data_bars(.,
                                              fill_color = 'white',
                                              background = 'opaque',
                                              fill_opacity = 1,
                                              bar_height = 24,
                                              bold_text = T))
            )
            
            ) %>%
  return()
}

```
:::{.cr-section}

:::{focus-on="cr-main"}

# Train Station Upzoning Rankings

:::


:::{focus-on="cr-main"}

This project seeks to find the train stations in Melbourne that are most suitable for upzoning.

\

For each train stations, seven key metrics are calculated:

-   Zoning suitability
-   Potential number of new homes
-   Train service frequency in peak
-   Train service passenger numbers in peak
-   Number of local services within a 500m walk
-   Distance to CBD
-   Existing transport infrastructure.

With these 'raw' metrics, a transformed score is calculated by factoring in how each station scores relative to others on the network. This allows for stations to be compared easily with a single number, or rank.
:::
:::{focus-on="cr-main"}

This page is only a summary of the ten most well suited stations.

\

Supporting web pages have been created for each individual train station which details how the scores are calculated. A clickable map of all stations and searchable table are at the foot of the document (here).

\

Each of the top ten stations name is also a clickable link to view more details on.

:::
:::{focus-on="cr-main"}

## Total Scores

\

```{r}

transformed_scores %>%
  select(station, score) %>%
  reactable(theme = cyborg(),
            class = "pageinforeactable",
            columns = list(
              'station' = colDef(name = 'station'),
              'score' = colDef(name = "Score",
                             cell = data_bars(.,
                                              fill_color = 'white',
                                              background = 'opaque'))
            )
            
            )


```

:::


:::{focus-on="cr-map1"}

## [`r transformed_scores$station[1]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[1]),'/quarto/',san_station(transformed_scores$station[1]),'.html') `)


###### Rank: 1

###### Total Score: `r transformed_scores$score[1]`

\

Distribution of scores:

```{r}

printScores(1)

```

:::

:::{focus-on="cr-map2"}

## [`r transformed_scores$station[2]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[2]),'/quarto/',san_station(transformed_scores$station[2]),'.html') `)


###### Rank: 2

###### Total Score: `r transformed_scores$score[2]`

\

Distribution of scores:

```{r}

printScores(2)

```

:::

:::{focus-on="cr-map3"}

## [`r transformed_scores$station[3]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[3]),'/quarto/',san_station(transformed_scores$station[3]),'.html') `)


###### Rank: 3

###### Total Score: `r transformed_scores$score[3]`

\

Distribution of scores:

```{r}

printScores(3)

```

:::

:::{focus-on="cr-map4"}

## [`r transformed_scores$station[4]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[4]),'/quarto/',san_station(transformed_scores$station[4]),'.html') `)


###### Rank: 4

###### Total Score: `r transformed_scores$score[4]`

\

Distribution of scores:

```{r}

printScores(4)

```

:::

:::{focus-on="cr-map5"}

## [`r transformed_scores$station[5]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[5]),'/quarto/',san_station(transformed_scores$station[5]),'.html') `)


###### Rank: 5

###### Total Score: `r transformed_scores$score[5]`

\

Distribution of scores:

```{r}

printScores(5)

```

:::

:::{focus-on="cr-map6"}

## [`r transformed_scores$station[6]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[6]),'/quarto/',san_station(transformed_scores$station[6]),'.html') `)


###### Rank: 6

###### Total Score: `r transformed_scores$score[6]`

\

Distribution of scores:

```{r}

printScores(6)

```

:::

:::{focus-on="cr-map7"}

## [`r transformed_scores$station[7]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[7]),'/quarto/',san_station(transformed_scores$station[7]),'.html') `)


###### Rank: 7

###### Total Score: `r transformed_scores$score[7]`

\

Distribution of scores:

```{r}

printScores(7)

```

:::

:::{focus-on="cr-map8"}

## [`r transformed_scores$station[8]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[8]),'/quarto/',san_station(transformed_scores$station[8]),'.html') `)


###### Rank: 8

###### Total Score: `r transformed_scores$score[8]`

\

Distribution of scores:

```{r}

printScores(8)

```

:::

:::{focus-on="cr-map9"}

## [`r transformed_scores$station[9]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[9]),'/quarto/',san_station(transformed_scores$station[9]),'.html') `)


###### Rank: 9

###### Total Score: `r transformed_scores$score[9]`

\

Distribution of scores:

```{r}

printScores(9)

```

:::


:::{focus-on="cr-map10"}

## [`r transformed_scores$station[10]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[10]),'/quarto/',san_station(transformed_scores$station[10]),'.html') `)


###### Rank: 10

###### Total Score: `r transformed_scores$score[10]`

\

Distribution of scores:

```{r}

printScores(10)

```

:::



:::{#cr-main}

:::
:::{#cr-map1}

:::

:::{#cr-map2}

:::

:::{#cr-map3}

:::

:::{#cr-map4}

:::

:::{#cr-map5}

:::

:::{#cr-map6}

:::

:::{#cr-map7}

:::

:::{#cr-map8}

:::

:::{#cr-map9}

:::

:::{#cr-map10}

:::
:::

:::

## Clickable Map

Zoom in and click on a station of choice to explore more detailed statistics.

```{r}

colours = tribble(
  ~group, ~ colour,
  'Sandringham' , "#F178AF",
  'CrossCity' , "#028430",
  'Cran/Pak' , "#279FD5",
  "Burnley" , "#152C6B",
  "Northern" , "#FFBE00",
  "Eastern" , "#BE1014",
  'event' , "#95979A"
)

lines_dissolved <- read_sf('../shapefiles/qgis/final_map.shp') %>%
  left_join(colours, by = 'group') 

locations = locations %>%
  mutate(message = 
           paste0(
             '<div style = \" background-color: black; \">',
             "<p style = \" color: white; text-align:center ; padding: 5px; \" >", Station_Name, '</p>',
             '</div>'
             
           )
  ) %>%
  mutate(win_url = paste0('stations/', 'South_Yarra', '/quarto/', 'South_Yarra', '.html'))



js_code <- "
function(el, x, data) {

  var marker = document.getElementsByClassName('leaflet-interactive');
  for(var i=0; i < marker.length; i++){
    (function(){
      var v = data.win_url[i];
      marker[i].addEventListener('click', function() { window.open(v);}, false);
  }()); 
  }

  var map = this;
  

  function updateLabelVisibility() {
   
    var currentZoom = map.getZoom();
   
    var showLabelsZoomLevel = 13;

    var labels = document.getElementsByClassName('leaflet-tooltip');
   
    for (var i = 0; i < labels.length; i++) {
      if (currentZoom >= showLabelsZoomLevel) {
        labels[i].style.display = 'block';
      } else {
        labels[i].style.display = 'none';
      }
    }
  }

  // Ensure the map is fully loaded before adding the event listener
  map.whenReady(function() {
  
  
 
    map.on('zoomend', function() {
  
      updateLabelVisibility();
    });
    
    // Initial call to set correct visibility
    updateLabelVisibility();
  });
}
"

m <- leaflet(width = '100%')%>%
  addPolylines(data = lines_dissolved, color = ~colour, opacity = 1) %>%
  addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(opacity = 0.5)) %>%
  addCircleMarkers(lng = locations$lng, lat=locations$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
  addLabelOnlyMarkers(lng = locations$lng,
                      lat = locations$lat,
                      label = lapply(locations$message, htmltools::HTML),
                      labelOptions = labelOptions(noHide = T, className = 'my-labels', direction = 'auto', textOnly = T, textsize = '10pt',
                                                  style = list(
                                                    'font-weight' = '800',
                                                    'text-decoration' = 'underline',
                                                    'text-decoration-color' = 'white',
                                                    'margin' = '5px',
                                                    'letter-spacing' = '0.5px'
                                                  ))) %>%
  htmlwidgets::onRender(js_code, data = locations) 

m

```

\

For a full searchable list of stations, see below

```{r}

translations = c(
   'Zoning suitability (% residential and not heritage)' = 'grz_nrz_pc',
   'Potential new homes in broad 1000m upzoning'='capacity_delta',
   'Train frequency in peak (services per hour)' ='average_peak_service_freq',
   'Average train patronage in peak'='average_peak_service_cap',
   'Number of local services within 500m walk'='walkability_score',
   'Distance to CBD (km)'='distance',
   'Number of bus and tram stops'='n_bus_tram',
   'Station Name' = 'station',
   'Total Score' = 'score'
)

readRDS('../r_objects/transformed_scores.Rdata') %>%
  as.data.frame() %>%
  mutate(across(where(is.numeric), ~round(.x, 2))) %>%
  rename(!!!translations) %>%
  reactable(theme = sandstone(),searchable = T, defaultSorted = "Total Score", defaultSortOrder = "desc", defaultPageSize = 10)

```

:::