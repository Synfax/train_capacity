---
format:
  closeread-html:
    remove-header-space: false
    css: index.css
    image: "index_images/main.png"
    cr-section:
      layout: "overlay-left"
      
---

```{=html}
<script>
function modifyMainDiv() {
  console.log('blue');
  const mainDiv = document.getElementById('quarto-document-content');
  if (mainDiv) {
    console.log('found');
    mainDiv.classList.remove('column-body');
    mainDiv.classList.add('column-page-right');
    // You can add more class modifications here
  }
}

// This function will be called by the script in the Quarto document
modifyMainDiv();
</script>
```

```{r, message=FALSE, warning=FALSE}

library(tidyverse)
library(sf)
library(leaflet)
library(shiny)
library(htmlwidgets)
library(reactablefmtr)

locations <- readRDS('../r_objects/locations.Rdata')
source('../r/constants.r')

transformed_scores <- readRDS('../r_objects/transformed_scores.Rdata') %>%
  as.data.frame() %>%
  slice_head(n = 10) %>%
  mutate(across(where(is.numeric), .fns = function(x) round(x, 2) )) %>%
  mutate(rank = row_number())

san_station <- function(x) {
  return( str_replace(x, ' ', '_') )
}

# translations = c(
#   'grz_nrz_pc' = 'Zoning suitability',
#   'capacity_delta' = 'Potential new homes',
#   'average_peak_service_freq' = 'Train frequency',
#   'average_peak_service_cap' = 'Available train capacity',
#   'walkability_score' = 'Local services',
#   'distance' = 'Distance to CBD',
#   'n_bus_tram' = 'Other transport infrastructure'
# )

# compact_data_bars <- function(data, fill_color = "#00bfc4", inside_color = "white", outside_color = "black", force_outside = FALSE, ...) {
#   orig_formatter <- reactablefmtr::data_bars(data, fill_color = fill_color, force_outside = force_outside, ...)
#   
#   function(value, index, name) {
#     bar <- orig_formatter(value, index, name)
#     script <- sprintf("
#       const b = this.querySelector('.bar-cell');
#       if (b) {
#         const t = b.querySelector('span');
#         if (t) t.style.color = (b.querySelector('.bar').offsetWidth < b.offsetWidth && %s) ? '%s' : '%s';
#       }
#     ", !force_outside, inside_color, outside_color)
#     
#     tagList(bar, tags$script(HTML(script)))
#   }
# }

translations <- translations <- gsub("\\s*\\([^)]+\\)", "", translations)


printScores <- function(r) {
  transformed_scores %>% 
  filter(rank == r) %>%
  pivot_longer(-station) %>%
  select(-station) %>%
  filter(!(name %in% c('score','rank'))) %>%
  mutate(name = translations[name]) %>%
  reactable(theme = cyborg(),
            class = "pageinforeactable",
            columns = list(
              'name' = colDef(name = 'Metric'),
              'value' = colDef(name = "Score",
                             cell = data_bars(.,
                                              text_position = 'above',
                                              fill_color = 'white',
                                              text_color = 'white',
                                              background = 'opaque',
                                              fill_opacity = 1,
                                              bar_height = 24,
                                              bold_text = T))
            )
            
            ) %>%
  return()
}

```
:::{.cr-section}

:::{focus-on="cr-main"}

# Train Station Upzoning Rankings

:::


:::{focus-on="cr-main"}

This project seeks to find the train stations in Melbourne that are most suitable for upzoning.

\

For each train station, key metrics are calculated on:

-   Zoning suitability (%)
-   Potential number of new homes (#)
-   Train service frequency in peak (Trains per hour)
-   Train line patronage in peak (# People)
-   Local amenities nearby (Composite Index)
-   Distance to CBD (m)
-   Bus and tram frequencies (Services per hour)

The raw metrics are transformed to a score between zero and one. Zero represents the lowest score across all stations, and one is the highest. For example, an individual station score of 0.8 corresponds to a score that is 80% of the maximum value across all stations.


\

For some metrics, higher values are 'worse' for upzoning, which means their scores are negative.

\

The full methodology, including a description of the transformation process is [here](rankings.html "Rankings Page").
:::
:::{focus-on="cr-main"}

This page is only a summary of the ten most well suited stations.

\

Supporting web pages have been created for each individual train station which details why each metric is important for upzoning considerations, and how each are calculated.

\

A clickable map of all stations and searchable table are at the foot of the document (here).

\

Each of the top ten stations name is also a clickable link to view more details on.

:::



:::{focus-on="cr-map1"}

## [`r transformed_scores$station[1]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[1]),'/quarto/',san_station(transformed_scores$station[1]),'.html') `)


###### Rank: 1

###### Total Score: `r transformed_scores$score[1]` / 5

\

Distribution of scores:

```{r}

printScores(1)

```

See more information [here](`r paste0('../stations/stations/',san_station(transformed_scores$station[1]),'/quarto/',san_station(transformed_scores$station[1]),'.html') `).

:::

:::{focus-on="cr-map2"}

## [`r transformed_scores$station[2]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[2]),'/quarto/',san_station(transformed_scores$station[2]),'.html') `)


###### Rank: 2

###### Total Score: `r transformed_scores$score[2]` / 5

\

Distribution of scores:

```{r}

printScores(2)

```
See more information [here](`r paste0('../stations/stations/',san_station(transformed_scores$station[2]),'/quarto/',san_station(transformed_scores$station[2]),'.html') `).
:::

:::{focus-on="cr-map3"}

## [`r transformed_scores$station[3]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[3]),'/quarto/',san_station(transformed_scores$station[3]),'.html') `)


###### Rank: 3

###### Total Score: `r transformed_scores$score[3]` / 5

\

Distribution of scores:

```{r}

printScores(3)

```
See more information [here](`r paste0('../stations/stations/',san_station(transformed_scores$station[3]),'/quarto/',san_station(transformed_scores$station[3]),'.html') `).
:::

:::{focus-on="cr-map4"}

## [`r transformed_scores$station[4]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[4]),'/quarto/',san_station(transformed_scores$station[4]),'.html') `)


###### Rank: 4

###### Total Score: `r transformed_scores$score[4]` / 5

\

Distribution of scores:

```{r}

printScores(4)

```
See more information [here](`r paste0('../stations/stations/',san_station(transformed_scores$station[4]),'/quarto/',san_station(transformed_scores$station[4]),'.html') `).
:::

:::{focus-on="cr-map5"}

## [`r transformed_scores$station[5]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[5]),'/quarto/',san_station(transformed_scores$station[5]),'.html') `)


###### Rank: 5

###### Total Score: `r transformed_scores$score[5]` / 5

\

Distribution of scores:

```{r}

printScores(5)

```
See more information [here](`r paste0('../stations/stations/',san_station(transformed_scores$station[5]),'/quarto/',san_station(transformed_scores$station[5]),'.html') `).
:::

:::{focus-on="cr-map6"}

## [`r transformed_scores$station[6]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[6]),'/quarto/',san_station(transformed_scores$station[6]),'.html') `)


###### Rank: 6

###### Total Score: `r transformed_scores$score[6]` / 5

\

Distribution of scores:

```{r}

printScores(6)

```
See more information [here](`r paste0('../stations/stations/',san_station(transformed_scores$station[6]),'/quarto/',san_station(transformed_scores$station[6]),'.html') `).
:::

:::{focus-on="cr-map7"}

## [`r transformed_scores$station[7]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[7]),'/quarto/',san_station(transformed_scores$station[7]),'.html') `)


###### Rank: 7

###### Total Score: `r transformed_scores$score[7]` / 5

\

Distribution of scores:

```{r}

printScores(7)

```
See more information [here](`r paste0('../stations/stations/',san_station(transformed_scores$station[7]),'/quarto/',san_station(transformed_scores$station[7]),'.html') `).
:::

:::{focus-on="cr-map8"}

## [`r transformed_scores$station[8]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[8]),'/quarto/',san_station(transformed_scores$station[8]),'.html') `)


###### Rank: 8

###### Total Score: `r transformed_scores$score[8]` / 5

\

Distribution of scores:

```{r}

printScores(8)

```

See more information [here](`r paste0('../stations/stations/',san_station(transformed_scores$station[8]),'/quarto/',san_station(transformed_scores$station[8]),'.html') `).

:::

:::{focus-on="cr-map9"}

## [`r transformed_scores$station[9]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[9]),'/quarto/',san_station(transformed_scores$station[9]),'.html') `)


###### Rank: 9

###### Total Score: `r transformed_scores$score[9]` / 5

\

Distribution of scores:

```{r}

printScores(9)

```

See more information [here](`r paste0('../stations/stations/',san_station(transformed_scores$station[9]),'/quarto/',san_station(transformed_scores$station[9]),'.html') `).

:::


:::{focus-on="cr-map10"}

## [`r transformed_scores$station[10]`](`r paste0('../stations/stations/',san_station(transformed_scores$station[10]),'/quarto/',san_station(transformed_scores$station[10]),'.html') `)


###### Rank: 10

###### Total Score: `r transformed_scores$score[10]` / 5

\

Distribution of scores:

```{r}

printScores(10)

```

See more information [here](`r paste0('../stations/stations/',san_station(transformed_scores$station[10]),'/quarto/',san_station(transformed_scores$station[10]),'.html') `).

:::

:::{focus-on="cr-click"}

## Clickable Map

You can find more details about your own local station by zooming in on the map and clicking on the label.

Alternatively, use the searchable table below.

## Searchable Table

```{r}

# transformed_scores %>%
#   select(station, score) %>%
#   reactable(theme = cyborg(),
#             class = "pageinforeactable",
#             columns = list(
#               'station' = colDef(name = 'station'),
#               'score' = colDef(name = "Score",
#                              cell = data_bars(.,
#                                               fill_color = 'white',
#                                               background = 'opaque'))
#             )
#             
#             )



# readRDS('../r_objects/transformed_scores.Rdata') %>%
#   as.data.frame() %>%
#   mutate(across(where(is.numeric), ~round(.x, 2))) %>%
#   rename(!!!translations) %>%
#   reactable(theme = sandstone(),searchable = T, defaultSorted = "Total Score", defaultSortOrder = "desc", defaultPageSize = 10)

 df_with_links = readRDS('../r_objects/transformed_scores.Rdata')  %>%
  as.data.frame() %>%
  select(station) %>%
  mutate(safe_name = gsub("[^a-zA-Z0-9]", "_", station)) %>%
  mutate(win_url = paste0('stations/', safe_name, '/quarto/', safe_name, '.html')) %>%
  select(-safe_name)

reactable(df_with_links,
          theme = cyborg(),
          filterable = T,
  columns = list(
    station = colDef(
      cell = function(value, index) {
        url <- df_with_links$win_url[index]
        htmltools::a(href = url, value, target = "_blank")
      }
    ),
    win_url = colDef(show = FALSE)  # Hide the URL column
  )
)

```

:::

:::{#cr-main}

:::
:::{#cr-map1}

:::

:::{#cr-map2}

:::

:::{#cr-map3}

:::

:::{#cr-map4}

:::

:::{#cr-map5}

:::

:::{#cr-map6}

:::

:::{#cr-map7}

:::

:::{#cr-map8}

:::

:::{#cr-map9}

:::

:::{#cr-map10}

:::
:::{#cr-click}
```{r}

colours = tribble(
  ~group, ~ colour,
  'Sandringham' , "#F178AF",
  'CrossCity' , "#028430",
  'Cran/Pak' , "#279FD5",
  "Burnley" , "#152C6B",
  "Northern" , "#FFBE00",
  "Eastern" , "#BE1014",
  'event' , "#95979A"
)

lines_dissolved <- read_sf('../shapefiles/qgis/final_map.shp') %>%
  left_join(colours, by = 'group') 


locations = locations %>%
  mutate(safe_name = gsub("[^a-zA-Z0-9]", "_", Station_Name)) %>%
  mutate(message = 
           paste0(
             '<div style = \" background-color: black; \">',
             "<p style = \" color: white; text-align:center ; padding: 5px; \" >", Station_Name, '</p>',
             '</div>'
             
           )
  ) %>%
  mutate(win_url = paste0('stations/', safe_name, '/quarto/', safe_name, '.html'))



js_code <- "
function(el, x, data) {

    var marker = document.getElementsByClassName('my-labels');
  for(var i=0; i < marker.length; i++){
    (function(){
      console.log('hello');
      var v = data.win_url[i];
      marker[i].addEventListener('click', function() { window.open(v);}, false);
  }()); 
  }

  var map = this;
  
  
// Optional: Re-enable scrolling when mouse enters the map
map.on('mouseenter', function() {
    if (!document.getElementById('cr-click').classList.contains('cr-active')) {
        map.scrollWheelZoom.enable();
        console.log('a');
    }
});

// Optional: Disable scrolling again when mouse leaves the map
map.on('mouseleave', function() {
    if (!document.getElementById('cr-click').classList.contains('cr-active')) {
        map.scrollWheelZoom.disable();
        console.log('b');
    }
});
  
  function updateMapScrolling() {
     var crClickDiv = document.getElementById('cr-click');
    var mapContainer = map.getContainer();
    
    if (crClickDiv.classList.contains('cr-active')) {
        // Enable map interaction
        map.scrollWheelZoom.enable();
        map.dragging.enable();
        map.touchZoom.enable();
        map.doubleClickZoom.enable();
        map.boxZoom.enable();
        map.keyboard.enable();
        if (map.tap) map.tap.enable();
        mapContainer.style.pointerEvents = 'auto';
    } else {
        // Disable all map interaction
        map.scrollWheelZoom.disable();
        map.dragging.disable();
        map.touchZoom.disable();
        map.doubleClickZoom.disable();
        map.boxZoom.disable();
        map.keyboard.disable();
        if (map.tap) map.tap.disable();
        mapContainer.style.pointerEvents = 'none';
    }
  }
  

  function updateLabelVisibility() {
   
    var currentZoom = map.getZoom();
   
    var showLabelsZoomLevel = 13;

    var labels = document.getElementsByClassName('leaflet-tooltip');
   
    for (var i = 0; i < labels.length; i++) {
      if (currentZoom >= showLabelsZoomLevel) {
        labels[i].style.display = 'block';
      } else {
        labels[i].style.display = 'none';
      }
    }
  }
  
  // Initial setup
updateMapScrolling();

// Add event listener to check for class changes
var observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            updateMapScrolling();
            console.log('cr click updated status');
        }
    });
});

var crClickDiv = document.getElementById('cr-click');
observer.observe(crClickDiv, { attributes: true });

  // Ensure the map is fully loaded before adding the event listener
  map.whenReady(function() {
  
  
 
    map.on('zoomend', function() {
  
      updateLabelVisibility();
    });
    
    // Initial call to set correct visibility
    updateLabelVisibility();
  });
}






"

m <- leaflet(width = '100%', height = '100vh') %>%
  leaflet::setView(lng = 144.9668, lat = -37.8181, zoom = 12) %>%
  addPolylines(data = lines_dissolved, color = ~colour, opacity = 1) %>%
  addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(opacity = 0.5)) %>%
  addCircleMarkers(lng = locations$lng, lat=locations$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
  addLabelOnlyMarkers(lng = locations$lng,
                      lat = locations$lat,
                      label = lapply(locations$message, htmltools::HTML),
                      labelOptions = labelOptions(noHide = T, clickable = T,  className = 'my-labels', direction = 'auto', textOnly = T, textsize = '10pt',
                                                  style = list(
                                                    'font-weight' = '800',
                                                    'text-decoration' = 'underline',
                                                    'text-decoration-color' = 'white',
                                                    'margin' = '5px',
                                                    'letter-spacing' = '0.5px'
                                                  ))) %>%
  htmlwidgets::onRender(js_code, data = locations) 

m

```
:::
:::