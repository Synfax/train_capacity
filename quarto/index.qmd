---
format:
  closeread-html:
    code-fold: false
    toc: true
    toc-location: left
    toc-expand: true
    toc-depth: 4
    grid: 
      body-width: 900px
    theme: zephr
    page-layout: article
    remove-header-space: false
    css: 
      - index.css
      - nav_fixes.css
    image: "index_images/main.png"
    cr-section:
      layout: "overlay-left"
---

```{=html}
<script>
function modifyMainDiv() {
  console.log('blue');
  const mainDiv = document.getElementById('quarto-document-content');
  if (mainDiv) {
    console.log('found');
    mainDiv.classList.remove('column-body');
    mainDiv.classList.add('column-page-right');
    // You can add more class modifications here
  }
}

// This function will be called by the script in the Quarto document
modifyMainDiv();
</script>
```
```{r, message=FALSE, warning=FALSE}

library(tidyverse)
library(sf)
library(leaflet)
library(shiny)
library(htmlwidgets)
library(plotly)
library(reactablefmtr)

locations <- readRDS('../r_objects/locations.Rdata')
source('../r/constants.r')

source('../r/theme.r')
source('../r/graphs.r')
source('../r/prepare_index_page.r')
source('../r/transform.r')
source('../r/existing_upzoned_stations.r')

transformed_scores <- readRDS('../r_objects/transformed_scores.Rdata')
original_values <- readRDS('../r_objects/station_rankings.Rdata')

# combined_scores <- original_values %>%
#   left_join(transformed_scores, by = 'station') %>%
#   arrange(desc(score)) %>%
#   slice_head(n = 10) %>%
#   mutate(across(where(is.numeric), .fns = function(x) round(x, 2) )) %>%
#   mutate(rank = row_number())


transformed_scores <- readRDS('../r_objects/transformed_scores.Rdata') %>%
  remove_null_weighted_cols() %>%
  as.data.frame() %>%
  mutate(across(where(is.numeric), .fns = function(x) round(x, 2) )) %>%
  mutate(rank = row_number()) 

san_station <- function(x) {
  return( str_replace(x, ' ', '_') )
}

# translations = c(
#   'grz_nrz_pc' = 'Zoning suitability',
#   'capacity_delta' = 'Potential new homes',
#   'average_peak_service_freq' = 'Train frequency',
#   'average_peak_service_cap' = 'Available train capacity',
#   'walkability_score' = 'Local services',
#   'distance' = 'Distance to CBD',
#   'n_bus_tram' = 'Other transport infrastructure'
# )

# compact_data_bars <- function(data, fill_color = "#00bfc4", inside_color = "white", outside_color = "black", force_outside = FALSE, ...) {
#   orig_formatter <- reactablefmtr::data_bars(data, fill_color = fill_color, force_outside = force_outside, ...)
#   
#   function(value, index, name) {
#     bar <- orig_formatter(value, index, name)
#     script <- sprintf("
#       const b = this.querySelector('.bar-cell');
#       if (b) {
#         const t = b.querySelector('span');
#         if (t) t.style.color = (b.querySelector('.bar').offsetWidth < b.offsetWidth && %s) ? '%s' : '%s';
#       }
#     ", !force_outside, inside_color, outside_color)
#     
#     tagList(bar, tags$script(HTML(script)))
#   }
# }

translations <- translations <- gsub("\\s*\\([^)]+\\)", "", translations)


printScores <- function(r) {
  
  transformed_scores %>% 
  filter(rank == r) %>%
  pivot_longer(-station) %>%
  select(-station) %>%
  filter(!(name %in% c('score','rank'))) %>%
  mutate(name = translations[name]) %>%
  reactable(
            class = "pageinforeactable",
            columns = list(
              'name' = colDef(name = 'Metric'),
              'value' = colDef(name = "Score",
                             cell = data_bars(.,
                                              text_position = 'above',
                                              fill_color = '#1B5E20',
                                              text_color = 'black',
                                              background = 'opaque',
                                              fill_opacity = 1,
                                              bar_height = 24,
                                              bold_text = T))
            )
            
            ) %>%
  return()
  
}

```

# The Next 25: Executive Summary

::: column-body
As part of Plan for Victoria, the Government has elected to upzone dozens of train stations as part of the Activity Centres Program. This is a sound policy. Melbourne has bountiful infrastructure and the ability to accommodate many more Melburnians in the places where they want to live. We have outlined the impetus for transit-oriented planning reform in our previous reports including [Melbourne's Missing Middle](https://www.yimby.melbourne/missing-middle) and [Missing Middle Housing Targets](https://targets.yimby.melbourne/).

::: {.column-margin}
Sidenote: A total of 60 Activity Centres have been announced. Of the initial 10, seven are focused around train stations. Of the 25 announced in October 2024, one tram stop (Toorak Village) was included. The total number of train stations confirmed for upzoning to date, therefore, is 31. Should the yet-to-be-announced Activity Centres all be train stations, as this report assumes, that would bring the total up to 56.
:::

Here, we build upon previous work to answer a simple question: across Melbourne's transport network, which additional 25 train stations should be prioritised for inclusion in the Activity Centre Program?

*See the full report [here](report.html "Full Report").*

<!-- ### Methodology -->

<!-- \ -->

<!-- For each train station, metrics are calculated on: -->

<!-- -   Zoning suitability (% land area) -->

<!-- -   Potential number of new homes (# homes) -->

<!-- -   Train service frequency in peak (trains per hour) -->

<!-- -   Spare train line capacity in peak (# passengers) -->

<!-- -   Local amenities nearby (composite index) -->

<!-- -   Proximity to CBD (metres) -->

<!-- -   Bus and tram frequencies (services per hour) -->

<!-- Each metric calculated uses different units of measurement, and need to be transformed into comparable units so that a single score can be generated for each train station. -->

<!-- This report uses xmin-xmax scaling, which transforms each 'raw' metric into a value between zero and one. If a station receives a 'transformed' score of zero, it corresponds to the lowest value out of all stations. Likewise, a value of one represents the best out of all stations in Melbourne. -->

<!-- These 'transformed' scores are summed together to produce a final score for each station. -->

<!-- ::: callout-note -->

<!-- There are some restrictions placed on final rankings: -->

<!-- -   City loop stations are excluded as they can't be upzoned further. -->

<!-- -   Edge transfer stations (North Melbourne, South Yarra, Richmond) were excluded due to extreme outliers in the data impacting the transformation process. -->

<!-- -   Stations further than 25km of Flinders Street are excluded as they are generally economically unfeasible to upzone. -->
:::

<!-- The full methodology is contained in the full report. -->

<!-- \ -->

<!-- **`r transformed_scores %>% filter(rank == 1) %>% pull(station)`** was the best station out of those considered in this project. -->

<!-- There is a searchable table and interactive map at the foot of this document to find your own station and see where it ranks. -->

<!-- A chart below shows the scores of the 10 highest ranked stations, with an interactive map underneath to show the spatial distribution. -->

::: column-body
## Map

::: interactive-map
```{r}


#| fig-height: 4
js_code <- "
function(el, x, data) {

  var map = this;

  function updateLabelVisibility() {
   
    var currentZoom = map.getZoom();
   
    var showLabelsZoomLevel = 13;

    var labels = document.getElementsByClassName('top-25-labels');
   
    for (var i = 0; i < labels.length; i++) {
      if (currentZoom >= showLabelsZoomLevel) {
        labels[i].style.display = 'block';
      } else {
        labels[i].style.display = 'none';
      }
    }
  }
  


  // Ensure the map is fully loaded before adding the event listener
  map.whenReady(function() {
  

    map.on('zoomend', function() {
  
      updateLabelVisibility();
    });
    
    // Initial call to set correct visibility
    updateLabelVisibility();
  });
}

"


m <- prepare_index(returnTopTen = T, topN = 25, fromQuarto = T, font_size_q = '8pt', h = '600px', w = '100%', fillC = "white", ringC = "#283696") %>%
  htmlwidgets::onRender(js_code)

m

```
:::

## Chart

```{r}
#| fig-height: 8

temp_graph <- readRDS('../r_objects/transformed_scores.Rdata') %>% 
    as.data.frame() %>%
    select(station, score) %>%
    arrange(desc(score)) %>%
    mutate(score = round(score, 2)) %>%
    slice_head(n = 25) %>%
    ggplot(mapping = aes(y = reorder(station, score), x = score, fill = score )) +
    scale_fill_gradientn(colors = create_green_palette(11)) +
    geom_col() +
    ylab("Station") +
    theme_report() + 
  theme(legend.position = "none")
  
  ggplotly(temp_graph) %>% plotly::layout(showlegend = F)

```

Of the `r nrow(transformed_scores)` Melbourne stations within 25 kilometres of the CBD and not yet included within the Activity Centre Program, these 25 are the most suitable for upzoning.

Each station in the network has been given a score based on a set of parameters. The higher a station's score, the greater reason there is to upzone around it. Scores range between `r transformed_scores$score[1]` for `r transformed_scores$station[1]` and `r transformed_scores$score[nrow(transformed_scores)]` for `r transformed_scores$station[nrow(transformed_scores)]`.

For each station, and all land within one kilometre of that station, we measure:

-   The number of trains per hour during peak travel times
-   The amount of spare train capacity during peak travel times
-   The frequency of nearby bus and tram services
-   The proportion of residential land with low-density zoning, excluding heritage overlays
-   The prevalence and diversity of local amenities such as parks and schools
-   The station's distance from the CBD

A comprehensive explanation of the report's methodology is available [here](report_shiny.html).

<!-- Note: our rankings exclude SRL Precincts and stations located within the CBD such as List -->

::: {.callout-caution collapse="true"}
## Excluded Stations and SRL Precincts

We also exclude SRL precincts and stations in the CBD.

These are: `r c(other_existing_precincts, city_loop_stations) `

:::

### Melbourne's three outlier 'Edge Stations'

Three outlier stations---North Melbourne, Richmond, and South Yarra---are excluded from our main rankings. These Edge Stations are outliers due to their extremely high rail service frequency, which dwarfs the rest of the dataset.

As such, we consider these three stations separately. By nature of their serviceability and location, these three inner-city stations are ripe for upzoning.

If the Government is only going to upzone 50 more stations in total---though we see no reason to stop at 50---we suggest prioritising the Edge Stations and then 22 of the 25 listed above. A full ranking of Melbourne's entire rail network is provided later on this page for reference.

## Results by LGA

The stations best-suited for upzoning are not equally distributed across Melbourne's local councils. This makes sense: land and infrastructure is also not equally distributed across councils. The model in this report reflects Melbourne as it is: a dynamic, vibrant city, in which some geographic areas are more suitable for upzoning than others.

Valuable inner-city land close to services, jobs, and amenities will always score higher when measuring the city as a whole rather than within the arbitrary segments of local government areas. For more on the importance of measuring the entirety of Melbourne, you can read our submission to the Inquiry into Local Government funding and services, and the Abundant Housing Network Australia's submission to the National Urban Policy.

Below, we chart the distribution of our 25 additional stations suitable for upzoning.
:::

::: column-body
```{r}

top_stations_by_lga() 

```
:::

Next, we take into account the current confirmed stations---those included in the Activity Centre Program pilot and the announced 25---alongside the top 25 additional stations returned by our model.

::: column-body
```{r}

top_stations_by_lga() 

```
:::

The 56 train stations selected for upzoning represent areas with strong housing targets as calculated through econometric modelling within our Housing Targets report, released earlier this year.

\[housing targets picture\]

What these models together make clear is that the 56 selected stations are not just in areas suitable for people to live---they are in areas where people want to live. We know this because apartments in many of these areas trade at a premium---indicating a shortfall of supply relative to demand.

## Results by train line

## Upzoning into Melbourne's vibrant future

```{r}


total_stations <- nrow(transformed_scores)
tick_positions <- seq(25, total_stations, by = 25)

p <- ggplot() +
  annotate("rect", xmin = 0, xmax = 25, ymin = -0.5, ymax = max(transformed_scores$score) + 0.5,
              fill = "#8FC49A",  alpha = 0.34) +
  geom_vline(xintercept = 25, linetype = "dashed") + 
  geom_point(data = transformed_scores, mapping = aes(y = score, x = rank), fill = "#283696", size = 0.9  ) +
  xlab("Station Rank") +
  ylab("Scores ordered descending") +
  scale_x_continuous(
    breaks = tick_positions,
    labels = tick_positions,
    expand = c(0.01, 0)
  ) +
  theme_report() +
  coord_cartesian(ylim = c(0, max(transformed_scores$score)))

ggplotly(p)

```

A final point we wish to highlight in this report is that the 56 stations above are by no means an exhaustive list of upzoning options. Our model indicates no significant difference between the upzoning capacities of stations number 25 and 75. Indeed, there is no reason the Activity Centre Program could not be doubled in scope---from 50 to 100 stations---in the near future.

This report provides the evidence base required for the Government to confidently scale their planning reform policy ambitions as we move our state forward.

The great strength of upzoning is that it is low-cost and future-focused. It enables our city to remain dynamic and open. It lets communities grow and change over time, and it breathes life into our streets and the buildings that line them. It champions small business, vibrancy, and dynamism---it reminds us that our city is not a dusty museum, but a place where people come and choose to live.

You can explore the full network and see how your station scores via the map and table below.

### Searchable Map

Pages for each individual train station have also been produced to detail how each performed in the metrics.

The map below is interactive and clickable. Scroll and find any train station and click the label for further information.

::: column-body
```{r}


js_code <- "
function(el, x, data) {

    var marker = document.getElementsByClassName('my-labels');
  for(var i=0; i < marker.length; i++){
    (function(){
      console.log('hello');
      var v = data.win_url[i];
      marker[i].addEventListener('click', function() { window.open(v);}, false);
  }()); 
  }

  var map = this;
  
  
  
  

  function updateLabelVisibility() {
   
    var currentZoom = map.getZoom();
   
    var showLabelsZoomLevel = 13;

    var labels = document.getElementsByClassName('my-labels');
   
    for (var i = 0; i < labels.length; i++) {
      if (currentZoom >= showLabelsZoomLevel) {
        labels[i].style.display = 'block';
      } else {
        labels[i].style.display = 'none';
      }
    }
  }
  


  // Ensure the map is fully loaded before adding the event listener
  map.whenReady(function() {
  
  
 
    map.on('zoomend', function() {
  
      updateLabelVisibility();
    });
    
    // Initial call to set correct visibility
    updateLabelVisibility();
  });
}

"

colours = tribble(
  ~group, ~ colour,
  'Sandringham' , "#F178AF",
  'CrossCity' , "#028430",
  'Cran/Pak' , "#279FD5",
  "Burnley" , "#152C6B",
  "Northern" , "#FFBE00",
  "Eastern" , "#BE1014",
  'event' , "#95979A"
)

lines_dissolved <- read_sf('../shapefiles/qgis/final_map.shp') %>%
  left_join(colours, by = 'group') 

valid_stations <-  readRDS('../r_objects/transformed_scores.Rdata') %>%
  pull(station)

locations = locations %>%
  filter(Station_Name %in% valid_stations) %>%
  mutate(safe_name = gsub("[^a-zA-Z0-9]", "_", Station_Name)) %>%
  mutate(message = 
           paste0(
             '<div style = \" background-color: black; \">',
             "<p style = \" color: white; text-align:center ; padding: 5px; \" >", Station_Name, '</p>',
             '</div>'
             
           )
  ) %>%
  mutate(win_url = paste0('../stations/', safe_name, '.html'))

m <- leaflet(width = '100%', height = '600px') %>%
  leaflet::setView(lng = 144.9668, lat = -37.8181, zoom = 12) %>%
  addPolylines(data = lines_dissolved, color = ~colour, opacity = 0.5) %>%
  addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(opacity = 0.3)) %>%
  addCircleMarkers(lng = locations$lng, lat=locations$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
  addLabelOnlyMarkers(lng = locations$lng,
                      lat = locations$lat,
                      label = lapply(locations$message, htmltools::HTML),
                      labelOptions = labelOptions(noHide = T, clickable = T,  className = 'my-labels', direction = 'auto', textOnly = T, textsize = '10pt',
                                                  style = list(
                                                    'font-weight' = '800',
                                                    'text-decoration' = 'underline',
                                                    'text-decoration-color' = 'white',
                                                    'margin' = '5px',
                                                    'letter-spacing' = '0.5px'
                                                  ))) %>%
  htmlwidgets::onRender(js_code, data = locations)

m

```
:::

### Searchable Table

The table below contains links to each individual station page.

::: column-body
```{r}

# transformed_scores %>%
#   select(station, score) %>%
#   reactable(theme = cyborg(),
#             class = "pageinforeactable",
#             columns = list(
#               'station' = colDef(name = 'station'),
#               'score' = colDef(name = "Score",
#                              cell = data_bars(.,
#                                               fill_color = 'white',
#                                               background = 'opaque'))
#             )
#             
#             )



# readRDS('../r_objects/transformed_scores.Rdata') %>%
#   as.data.frame() %>%
#   mutate(across(where(is.numeric), ~round(.x, 2))) %>%
#   rename(!!!translations) %>%
#   reactable(theme = sandstone(),searchable = T, defaultSorted = "Total Score", defaultSortOrder = "desc", defaultPageSize = 10)


 df_with_links = readRDS('../r_objects/transformed_scores.Rdata')  %>%
  as.data.frame() %>%
  select(station) %>%
  mutate(safe_name = gsub("[^a-zA-Z0-9]", "_", station)) %>%
  mutate(win_url = paste0('../stations/', safe_name, '.html')) %>%
  select(-safe_name)

reactable(df_with_links,
          filterable = T,
  columns = list(
    station = colDef(
      name = "Station",
      cell = function(value, index) {
        url <- df_with_links$win_url[index]
        htmltools::a(href = url, value, target = "_blank")
      }
    ),
    win_url = colDef(show = FALSE)  # Hide the URL column
  )
)

```
:::

::: column-body
# In-Depth Analysis of Top 10 Stations

This next section will step through the next 25 recommended stations.

It will include a breakdown of how its score was formed, which uses the transformed scores discussed in the methodology section. These scores are bounded between zero and one.

A table below shows a *rough* guide of how to interpret the transformed scores.

| Transformed Value | Interpretation |
|-------------------|----------------|
| 0-0.35            | Poor           |
| 0.35 - 0.6        | Low            |
| 0.6 - 0.8         | Good           |
| 0.8 - 1           | Excellent      |

Use a laptop or desktop for the best viewing experience. (keep scrolling!)
:::

::: cr-section
::: {focus-on="cr-map1"}
## [`r transformed_scores$station[1]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B1%5D),%20'.html')%60)

###### Rank: 1

###### Total Score: `r transformed_scores$score[1]` / `r sum(weights)`

\

```{r}

printScores(1)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B1%5D),%20'.html')%60).
:::

::: {focus-on="cr-map2"}
## [`r transformed_scores$station[2]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B2%5D),%20'.html')%60)

###### Rank: 2

###### Total Score: `r transformed_scores$score[2]` / `r sum(weights)`

\

```{r}

printScores(2)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B2%5D),%20'.html')%60).
:::

::: {focus-on="cr-map3"}
## [`r transformed_scores$station[3]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B3%5D),%20'.html')%60)

###### Rank: 3

###### Total Score: `r transformed_scores$score[3]` / `r sum(weights)`

\

```{r}

printScores(3)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B3%5D),%20'.html')%60).
:::

::: {focus-on="cr-map4"}
## [`r transformed_scores$station[4]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B4%5D),%20'.html')%60)

###### Rank: 4

###### Total Score: `r transformed_scores$score[4]` / `r sum(weights)`

\

```{r}

printScores(4)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B4%5D),%20'.html')%60).
:::

::: {focus-on="cr-map5"}
## [`r transformed_scores$station[5]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B5%5D),%20'.html')%60)

###### Rank: 5

###### Total Score: `r transformed_scores$score[5]` / `r sum(weights)`

\

```{r}

printScores(5)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B5%5D),%20'.html')%60).
:::

::: {focus-on="cr-map6"}
## [`r transformed_scores$station[6]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B6%5D),%20'.html')%60)

###### Rank: 6

###### Total Score: `r transformed_scores$score[6]` / `r sum(weights)`

\

```{r}

printScores(6)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B6%5D),%20'.html')%60).
:::

::: {focus-on="cr-map7"}
## [`r transformed_scores$station[7]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B7%5D),%20'.html')%60)

###### Rank: 7

###### Total Score: `r transformed_scores$score[7]` / `r sum(weights)`

\

```{r}

printScores(7)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B7%5D),%20'.html')%60).
:::

::: {focus-on="cr-map8"}
## [`r transformed_scores$station[8]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B8%5D),%20'.html')%60)

###### Rank: 8

###### Total Score: `r transformed_scores$score[8]` / `r sum(weights)`

\

```{r}

printScores(8)

```

See more information [here](%60r%20paste0('stations/',san_station(transformed_scores$station%5B8%5D),'/quarto/',san_station(transformed_scores$station%5B8%5D),'.html')%20%60).
:::

::: {focus-on="cr-map9"}
## [`r transformed_scores$station[9]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B9%5D),%20'.html')%60)

###### Rank: 9

###### Total Score: `r transformed_scores$score[9]` / `r sum(weights)`

\

```{r}

printScores(9)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B9%5D),%20'.html')%60).
:::

::: {focus-on="cr-map10"}
## [`r transformed_scores$station[10]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B10%5D),%20'.html')%60)

###### Rank: 10

###### Total Score: `r transformed_scores$score[10]` / `r sum(weights)`

\

```{r}

printScores(10)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B10%5D),%20'.html')%60).
:::

::: {focus-on="cr-map11"}
## [`r transformed_scores$station[11]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B11%5D),%20'.html')%60)

###### Rank: 11

###### Total Score: `r transformed_scores$score[11]` / `r sum(weights)`

\

```{r}

printScores(11)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B11%5D),%20'.html')%60).
:::

::: {focus-on="cr-map12"}
## [`r transformed_scores$station[12]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B12%5D),%20'.html')%60)

###### Rank: 12

###### Total Score: `r transformed_scores$score[1]` / `r sum(weights)`

\

```{r}

printScores(12)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B12%5D),%20'.html')%60).
:::

::: {focus-on="cr-map13"}
## [`r transformed_scores$station[13]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B13%5D),%20'.html')%60)

###### Rank: 13

###### Total Score: `r transformed_scores$score[10]` / `r sum(weights)`

\

```{r}

printScores(13)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B13%5D),%20'.html')%60).
:::

::: {focus-on="cr-map14"}
## [`r transformed_scores$station[14]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B14%5D),%20'.html')%60)

###### Rank: 14

###### Total Score: `r transformed_scores$score[14]` / `r sum(weights)`

\

```{r}

printScores(14)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B14%5D),%20'.html')%60).
:::

::: {focus-on="cr-map15"}
## [`r transformed_scores$station[15]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B15%5D),%20'.html')%60)

###### Rank: 15

###### Total Score: `r transformed_scores$score[15]` / `r sum(weights)`

\

```{r}

printScores(15)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B15%5D),%20'.html')%60).
:::

::: {focus-on="cr-map16"}
## [`r transformed_scores$station[16]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B16%5D),%20'.html')%60)

###### Rank: 16

###### Total Score: `r transformed_scores$score[16]` / `r sum(weights)`

\

```{r}

printScores(16)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B16%5D),%20'.html')%60).
:::

::: {focus-on="cr-map17"}
## [`r transformed_scores$station[17]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B17%5D),%20'.html')%60)

###### Rank: 17

###### Total Score: `r transformed_scores$score[17]` / `r sum(weights)`

\

```{r}

printScores(17)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B17%5D),%20'.html')%60).
:::

::: {focus-on="cr-map18"}
## [`r transformed_scores$station[18]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B18%5D),%20'.html')%60)

###### Rank: 18

###### Total Score: `r transformed_scores$score[18]` / `r sum(weights)`

\

```{r}

printScores(18)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B18%5D),%20'.html')%60).
:::

::: {focus-on="cr-map19"}
## [`r transformed_scores$station[19]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B19%5D),%20'.html')%60)

###### Rank: 19

###### Total Score: `r transformed_scores$score[19]` / `r sum(weights)`

\

```{r}

printScores(19)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B19%5D),%20'.html')%60).
:::

::: {focus-on="cr-map20"}
## [`r transformed_scores$station[20]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B20%5D),%20'.html')%60)

###### Rank: 20

###### Total Score: `r transformed_scores$score[20]` / `r sum(weights)`

\

```{r}

printScores(20)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B20%5D),%20'.html')%60).
:::

::: {focus-on="cr-map21"}
## [`r transformed_scores$station[21]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B21%5D),%20'.html')%60)

###### Rank: 21

###### Total Score: `r transformed_scores$score[21]` / `r sum(weights)`

\

```{r}

printScores(21)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B21%5D),%20'.html')%60).
:::

::: {focus-on="cr-map22"}
## [`r transformed_scores$station[22]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B22%5D),%20'.html')%60)

###### Rank: 22

###### Total Score: `r transformed_scores$score[22]` / `r sum(weights)`

\

```{r}

printScores(22)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B22%5D),%20'.html')%60).
:::

::: {focus-on="cr-map23"}
## [`r transformed_scores$station[23]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B23%5D),%20'.html')%60)

###### Rank: 23

###### Total Score: `r transformed_scores$score[23]` / `r sum(weights)`

\

```{r}

printScores(23)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B23%5D),%20'.html')%60).
:::

::: {focus-on="cr-map24"}
## [`r transformed_scores$station[24]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B24%5D),%20'.html')%60)

###### Rank: 24

###### Total Score: `r transformed_scores$score[24]` / `r sum(weights)`

\

```{r}

printScores(24)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B24%5D),%20'.html')%60).
:::

::: {focus-on="cr-map25"}
## [`r transformed_scores$station[25]`](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B25%5D),%20'.html')%60)

###### Rank: 25

###### Total Score: `r transformed_scores$score[25]` / `r sum(weights)`

\

```{r}

printScores(25)

```

See more information [here](%60r%20paste0('../',%22stations/%22,san_station(transformed_scores$station%5B25%5D),%20'.html')%60).
:::

::: {#cr-main}
:::

::: {#cr-map1}
:::

::: {#cr-map2}
:::

::: {#cr-map3}
:::

::: {#cr-map4}
:::

::: {#cr-map5}
:::

::: {#cr-map6}
:::

::: {#cr-map7}
:::

::: {#cr-map8}
:::

::: {#cr-map9}
:::

::: {#cr-map10}
:::

::: {#cr-map11}
:::

::: {#cr-map12}
:::

::: {#cr-map13}
:::

::: {#cr-map14}
:::

::: {#cr-map15}
:::

::: {#cr-map16}
:::

::: {#cr-map17}
:::

::: {#cr-map18}
:::

::: {#cr-map19}
:::

::: {#cr-map20}
:::

::: {#cr-map21}
:::

::: {#cr-map22}
:::

::: {#cr-map23}
:::

::: {#cr-map24}
:::

::: {#cr-map25}
:::
:::
