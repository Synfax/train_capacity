---
format:
  closeread-html:
    grid: 
      body-width: 900px
    theme: zephr
    page-layout: article
    remove-header-space: false
    css: 
      - index.css
      - nav_fixes.css
    image: "index_images/main.png"
    cr-section:
      layout: "overlay-left"
---

```{=html}
<script>
function modifyMainDiv() {
  console.log('blue');
  const mainDiv = document.getElementById('quarto-document-content');
  if (mainDiv) {
    console.log('found');
    mainDiv.classList.remove('column-body');
    mainDiv.classList.add('column-page-right');
    // You can add more class modifications here
  }
}

// This function will be called by the script in the Quarto document
modifyMainDiv();
</script>
```
```{r, message=FALSE, warning=FALSE}

library(tidyverse)
library(sf)
library(leaflet)
library(shiny)
library(htmlwidgets)
library(plotly)
library(reactablefmtr)

locations <- readRDS('../r_objects/locations.Rdata')
source('../r/constants.r')

source('../r/theme.r')
source('../r/graphs.r')
source('../r/prepare_index_page.r')
source('../r/transform.r')

transformed_scores <- readRDS('../r_objects/transformed_scores.Rdata')
original_values <- readRDS('../r_objects/station_rankings.Rdata')

# combined_scores <- original_values %>%
#   left_join(transformed_scores, by = 'station') %>%
#   arrange(desc(score)) %>%
#   slice_head(n = 10) %>%
#   mutate(across(where(is.numeric), .fns = function(x) round(x, 2) )) %>%
#   mutate(rank = row_number())


transformed_scores <- readRDS('../r_objects/transformed_scores.Rdata') %>%
  remove_null_weighted_cols() %>%
  as.data.frame() %>%
  slice_head(n = 10) %>%
  mutate(across(where(is.numeric), .fns = function(x) round(x, 2) )) %>%
  mutate(rank = row_number()) 

san_station <- function(x) {
  return( str_replace(x, ' ', '_') )
}

# translations = c(
#   'grz_nrz_pc' = 'Zoning suitability',
#   'capacity_delta' = 'Potential new homes',
#   'average_peak_service_freq' = 'Train frequency',
#   'average_peak_service_cap' = 'Available train capacity',
#   'walkability_score' = 'Local services',
#   'distance' = 'Distance to CBD',
#   'n_bus_tram' = 'Other transport infrastructure'
# )

# compact_data_bars <- function(data, fill_color = "#00bfc4", inside_color = "white", outside_color = "black", force_outside = FALSE, ...) {
#   orig_formatter <- reactablefmtr::data_bars(data, fill_color = fill_color, force_outside = force_outside, ...)
#   
#   function(value, index, name) {
#     bar <- orig_formatter(value, index, name)
#     script <- sprintf("
#       const b = this.querySelector('.bar-cell');
#       if (b) {
#         const t = b.querySelector('span');
#         if (t) t.style.color = (b.querySelector('.bar').offsetWidth < b.offsetWidth && %s) ? '%s' : '%s';
#       }
#     ", !force_outside, inside_color, outside_color)
#     
#     tagList(bar, tags$script(HTML(script)))
#   }
# }

translations <- translations <- gsub("\\s*\\([^)]+\\)", "", translations)


printScores <- function(r) {
  
  transformed_scores %>% 
  filter(rank == r) %>%
  pivot_longer(-station) %>%
  select(-station) %>%
  filter(!(name %in% c('score','rank'))) %>%
  mutate(name = translations[name]) %>%
  reactable(
            class = "pageinforeactable",
            columns = list(
              'name' = colDef(name = 'Metric'),
              'value' = colDef(name = "Score",
                             cell = data_bars(.,
                                              text_position = 'above',
                                              fill_color = '#1B5E20',
                                              text_color = 'black',
                                              background = 'opaque',
                                              fill_opacity = 1,
                                              bar_height = 24,
                                              bold_text = T))
            )
            
            ) %>%
  return()
  
}

```

::: column-body

\

# Train Station Upzoning Rankings: Executive Summary

\

Melbourne is going to have to make some choices soon about where to build more housing.

Locating new dwellings nearby to train stations as a form of Transit Oriented Development has emerged as a favoured solution by policymakers, with recent applications in Sydney.

However, policymakers face difficult choices in choosing which stations to upzone. For example, train stations close to the the city may be ideal for locating people near employment opportunities, although they may already be developed, or, the train line may lack spare passenger capacity. Stations further away may be less developed, although they might have poorer service frequencies or other nearby amenities.

The purpose of this report is to tackle these trade-offs by building a robust and data-driven framework to identify the train stations that are best suited for this broad upzoning.

*See the full report [here](report.html "Full Report").*

### Methodology

\

For each train station, metrics are calculated on:

-   Zoning suitability (% land area)
<!-- -   Potential number of new homes (# homes) -->
-   Train service frequency in peak (trains per hour)
-   Spare train line capacity in peak (# passengers)
-   Local amenities nearby (composite index)
-   Proximity to CBD (metres)
-   Bus and tram frequencies (services per hour)

Each metric calculated uses different units of measurement, and need to be transformed into comparable units so that a single score can be generated for each train station.

This report uses xmin-xmax scaling, which transforms each 'raw' metric into a value between zero and one. If a station receives a 'transformed' score of zero, it corresponds to the lowest value out of all stations. Likewise, a value of one represents the best out of all stations in Melbourne.

These 'transformed' scores are summed together to produce a final score for each station.

::: callout-note
There are some restrictions placed on final rankings:

-   City loop stations are excluded as they can't be upzoned further.

-   Edge transfer stations (North Melbourne, South Yarra, Richmond) were excluded due to extreme outliers in the data impacting the transformation process.

-   Stations further than 25km of Flinders Street are excluded as they are generally economically unfeasible to upzone.
:::

The full methodology is contained in the full report.

### Key Result: The Next 25

\

**`r transformed_scores %>% filter(rank == 1) %>% pull(station)`** was the best station out of those considered in this project.

There is a searchable table and interactive map at the foot of this document to find your own station and see where it ranks.

A chart below shows the scores of the 10 highest ranked stations, with an interactive map underneath to show the spatial distribution.

::: column-body

## Map
::: {.interactive-map}
```{r}
#| fig-height: 4
js_code <- "
function(el, x, data) {

  var map = this;

  function updateLabelVisibility() {
   
    var currentZoom = map.getZoom();
   
    var showLabelsZoomLevel = 13;

    var labels = document.getElementsByClassName('top-25-labels');
   
    for (var i = 0; i < labels.length; i++) {
      if (currentZoom >= showLabelsZoomLevel) {
        labels[i].style.display = 'block';
      } else {
        labels[i].style.display = 'none';
      }
    }
  }
  


  // Ensure the map is fully loaded before adding the event listener
  map.whenReady(function() {
  

    map.on('zoomend', function() {
  
      updateLabelVisibility();
    });
    
    // Initial call to set correct visibility
    updateLabelVisibility();
  });
}

"


m <- prepare_index(returnTopTen = T, topN = 25, fromQuarto = T, font_size_q = '8pt', h = '600px', w = '100%', fillC = "#fdffee") %>%
  htmlwidgets::onRender(js_code)

m

```
:::

## Chart

```{r}
#| fig-height: 6

temp_graph <- readRDS('../r_objects/transformed_scores.Rdata') %>% 
    as.data.frame() %>%
    select(station, score) %>%
    arrange(desc(score)) %>%
    mutate(score = round(score, 2)) %>%
    slice_head(n = 25) %>%
    ggplot(mapping = aes(y = reorder(station, score), x = score, fill = score )) +
    scale_fill_gradientn(colors = create_green_palette(11)) +
    geom_col() +
    ylab("Station") +
    theme_report() + 
  theme(legend.position = "none")
  
  ggplotly(temp_graph) %>% plotly::layout(showlegend = F)

```


:::

### Key result: Distribution by LGA

\

The best stations for upzoning are not equally distributed across Melbourne.

Local government areas in the inner south east, such as Stonnington & Boroondara, have the most stations in the top 25 ranking stations.

Hover over the bar chart below for an interactive effect.
:::

::: column-body
```{r}

top_stations_by_lga() 

```
:::

### Searchable Map

\

Pages for each individual train station have also been produced to detail how each performed in the metrics.

The map below is interactive and clickable. Scroll and find any train station and click the label for further information.

::: {.column-body}

```{r}


js_code <- "
function(el, x, data) {

    var marker = document.getElementsByClassName('my-labels');
  for(var i=0; i < marker.length; i++){
    (function(){
      console.log('hello');
      var v = data.win_url[i];
      marker[i].addEventListener('click', function() { window.open(v);}, false);
  }()); 
  }

  var map = this;
  
  
  
  

  function updateLabelVisibility() {
   
    var currentZoom = map.getZoom();
   
    var showLabelsZoomLevel = 13;

    var labels = document.getElementsByClassName('my-labels');
   
    for (var i = 0; i < labels.length; i++) {
      if (currentZoom >= showLabelsZoomLevel) {
        labels[i].style.display = 'block';
      } else {
        labels[i].style.display = 'none';
      }
    }
  }
  


  // Ensure the map is fully loaded before adding the event listener
  map.whenReady(function() {
  
  
 
    map.on('zoomend', function() {
  
      updateLabelVisibility();
    });
    
    // Initial call to set correct visibility
    updateLabelVisibility();
  });
}

"

colours = tribble(
  ~group, ~ colour,
  'Sandringham' , "#F178AF",
  'CrossCity' , "#028430",
  'Cran/Pak' , "#279FD5",
  "Burnley" , "#152C6B",
  "Northern" , "#FFBE00",
  "Eastern" , "#BE1014",
  'event' , "#95979A"
)

lines_dissolved <- read_sf('../shapefiles/qgis/final_map.shp') %>%
  left_join(colours, by = 'group') 

valid_stations <-  readRDS('../r_objects/transformed_scores.Rdata') %>%
  pull(station)

locations = locations %>%
  filter(Station_Name %in% valid_stations) %>%
  mutate(safe_name = gsub("[^a-zA-Z0-9]", "_", Station_Name)) %>%
  mutate(message = 
           paste0(
             '<div style = \" background-color: black; \">',
             "<p style = \" color: white; text-align:center ; padding: 5px; \" >", Station_Name, '</p>',
             '</div>'
             
           )
  ) %>%
  mutate(win_url = paste0('../stations/', safe_name, '.html'))

m <- leaflet(width = '100%', height = '600px') %>%
  leaflet::setView(lng = 144.9668, lat = -37.8181, zoom = 12) %>%
  addPolylines(data = lines_dissolved, color = ~colour, opacity = 1) %>%
  addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(opacity = 0.5)) %>%
  addCircleMarkers(lng = locations$lng, lat=locations$lat, radius = 5, color = 'black', fillColor = 'black', fillOpacity = 1, opacity = 0.7) %>%
  addLabelOnlyMarkers(lng = locations$lng,
                      lat = locations$lat,
                      label = lapply(locations$message, htmltools::HTML),
                      labelOptions = labelOptions(noHide = T, clickable = T,  className = 'my-labels', direction = 'auto', textOnly = T, textsize = '10pt',
                                                  style = list(
                                                    'font-weight' = '800',
                                                    'text-decoration' = 'underline',
                                                    'text-decoration-color' = 'white',
                                                    'margin' = '5px',
                                                    'letter-spacing' = '0.5px'
                                                  ))) %>%
  htmlwidgets::onRender(js_code, data = locations)

m

```

:::

### Searchable Table

:::{.column-body}
```{r}

# transformed_scores %>%
#   select(station, score) %>%
#   reactable(theme = cyborg(),
#             class = "pageinforeactable",
#             columns = list(
#               'station' = colDef(name = 'station'),
#               'score' = colDef(name = "Score",
#                              cell = data_bars(.,
#                                               fill_color = 'white',
#                                               background = 'opaque'))
#             )
#             
#             )



# readRDS('../r_objects/transformed_scores.Rdata') %>%
#   as.data.frame() %>%
#   mutate(across(where(is.numeric), ~round(.x, 2))) %>%
#   rename(!!!translations) %>%
#   reactable(theme = sandstone(),searchable = T, defaultSorted = "Total Score", defaultSortOrder = "desc", defaultPageSize = 10)


 df_with_links = readRDS('../r_objects/transformed_scores.Rdata')  %>%
  as.data.frame() %>%
  select(station) %>%
  mutate(safe_name = gsub("[^a-zA-Z0-9]", "_", station)) %>%
  mutate(win_url = paste0('../stations/', safe_name, '.html')) %>%
  select(-safe_name)

reactable(df_with_links,
          filterable = T,
  columns = list(
    station = colDef(
      name = "Station",
      cell = function(value, index) {
        url <- df_with_links$win_url[index]
        htmltools::a(href = url, value, target = "_blank")
      }
    ),
    win_url = colDef(show = FALSE)  # Hide the URL column
  )
)

```
:::

::: column-body
# In-Depth Analysis of Top 10 Stations

This next section will step through each 10 highest ranked stations. It will include a breakdown of how its score was formed, which uses the transformed scores discussed in the methodology section. These scores are bounded between zero and one.

A table below shows a *rough* guide of how to interpret the transformed scores.

| Transformed Value | Interpretation |
|-------------------|----------------|
| 0-0.35            | Poor           |
| 0.35 - 0.6        | Low            |
| 0.6 - 0.8         | Good           |
| 0.8 - 1           | Excellent      |

Use a laptop or desktop for the best viewing experience. (keep scrolling!)
:::

::: cr-section
::: {focus-on="cr-map1"}
## [`r transformed_scores$station[1]`](`r paste0('../',"stations/",san_station(transformed_scores$station[1]), '.html')`)

###### Rank: 1

###### Total Score: `r transformed_scores$score[1]` / `r sum(weights)`

\

```{r}

printScores(1)

```

See more information [here](`r paste0('../',"stations/",san_station(transformed_scores$station[1]), '.html')`).
:::

::: {focus-on="cr-map2"}
## [`r transformed_scores$station[2]`](`r paste0('../',"stations/",san_station(transformed_scores$station[2]), '.html')`)

###### Rank: 2

###### Total Score: `r transformed_scores$score[2]` / `r sum(weights)`

\

```{r}

printScores(2)

```

See more information [here](`r paste0('../',"stations/",san_station(transformed_scores$station[2]), '.html')`).
:::

::: {focus-on="cr-map3"}
## [`r transformed_scores$station[3]`](`r paste0('../',"stations/",san_station(transformed_scores$station[3]), '.html')`)

###### Rank: 3

###### Total Score: `r transformed_scores$score[3]` / `r sum(weights)`

\

```{r}

printScores(3)

```

See more information [here](`r paste0('../',"stations/",san_station(transformed_scores$station[3]), '.html')`).
:::

::: {focus-on="cr-map4"}
## [`r transformed_scores$station[4]`](`r paste0('../',"stations/",san_station(transformed_scores$station[4]), '.html')`)

###### Rank: 4

###### Total Score: `r transformed_scores$score[4]` / `r sum(weights)`

\

```{r}

printScores(4)

```

See more information [here](`r paste0('../',"stations/",san_station(transformed_scores$station[4]), '.html')`).
:::

::: {focus-on="cr-map5"}
## [`r transformed_scores$station[5]`](`r paste0('../',"stations/",san_station(transformed_scores$station[5]), '.html')`)

###### Rank: 5

###### Total Score: `r transformed_scores$score[5]` / `r sum(weights)`

\

```{r}

printScores(5)

```

See more information [here](`r paste0('../',"stations/",san_station(transformed_scores$station[5]), '.html')`).
:::

::: {focus-on="cr-map6"}
## [`r transformed_scores$station[6]`](`r paste0('../',"stations/",san_station(transformed_scores$station[6]), '.html')`)

###### Rank: 6

###### Total Score: `r transformed_scores$score[6]` / `r sum(weights)`

\

```{r}

printScores(6)

```

See more information [here](`r paste0('../',"stations/",san_station(transformed_scores$station[6]), '.html')`).
:::

::: {focus-on="cr-map7"}
## [`r transformed_scores$station[7]`](`r paste0('../',"stations/",san_station(transformed_scores$station[7]), '.html')`)

###### Rank: 7

###### Total Score: `r transformed_scores$score[7]` / `r sum(weights)`

\

```{r}

printScores(7)

```

See more information [here](`r paste0('../',"stations/",san_station(transformed_scores$station[7]), '.html')`).
:::

::: {focus-on="cr-map8"}
## [`r transformed_scores$station[8]`](`r paste0('../',"stations/",san_station(transformed_scores$station[8]), '.html')`)

###### Rank: 8

###### Total Score: `r transformed_scores$score[8]` / `r sum(weights)`

\

```{r}

printScores(8)

```

See more information [here](%60r%20paste0('stations/',san_station(transformed_scores$station%5B8%5D),'/quarto/',san_station(transformed_scores$station%5B8%5D),'.html')%20%60).
:::

::: {focus-on="cr-map9"}
## [`r transformed_scores$station[9]`](`r paste0('../',"stations/",san_station(transformed_scores$station[9]), '.html')`)

###### Rank: 9

###### Total Score: `r transformed_scores$score[9]` / `r sum(weights)`

\

```{r}

printScores(9)

```

See more information [here](`r paste0('../',"stations/",san_station(transformed_scores$station[9]), '.html')`).
:::

::: {focus-on="cr-map10"}
## [`r transformed_scores$station[10]`](`r paste0('../',"stations/",san_station(transformed_scores$station[10]), '.html')`)

###### Rank: 10

###### Total Score: `r transformed_scores$score[10]` / `r sum(weights)`

\

```{r}

printScores(10)

```

See more information [here](`r paste0('../',"stations/",san_station(transformed_scores$station[10]), '.html')`).
:::


::: {#cr-main}
:::

::: {#cr-map1}
:::

::: {#cr-map2}
:::

::: {#cr-map3}
:::

::: {#cr-map4}
:::

::: {#cr-map5}
:::

::: {#cr-map6}
:::

::: {#cr-map7}
:::

::: {#cr-map8}
:::

::: {#cr-map9}
:::

::: {#cr-map10}
:::

:::
