---
title: "Full Station Rankings"
author: "Paul S"
date: "6/6/24"
params: 
  station: "Brunswick"
format: 
  html: 
    theme: zephyr
    fig-width: 8
    fig-height: 8
    code-fold: false
    toc: true
    toc-depth: 4
    toc-location: left
    page-layout: full
---
This page aims to describe how scores are transformed from their raw calculations into a rank which allows comparison across stations.

The first table contains the raw scores in a searchable table. 

The next section details the transformation process, and the final section contains a searchable table of the final scores.

## Raw Scores

```{r warning=FALSE,message=FALSE}
#| echo: false 

station = params$station

library(tidyverse)
library(reactablefmtr)

source('../r/station_functions.R')
source('../r/constants.R')
source('../r/transform.R')


station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
  mutate(across(-station, as.numeric)) %>%
  mutate(across(where(is.numeric), .fns = function(x) {round(x,2)}))

station_rankings %>%
  reactable( pagination = T,
    theme = sandstone(), searchable = T)

```

#Full Methodology

This page includes information about the seven categories and why they should be considered as factors in priority upzoning:

-   Zoning suitability
-   Potential number of new homes
-   Train service frequency in peak
-   Train service passenger numbers in peak
-   Number of local services within a 500m walk
-   Distance to CBD
-   Existing transport infrastructure.

# Zoning suitability

The number of lots within 1km of stations zoned as either Neighbourhood Residential or General Residential, and NOT under heritage protection is an approximation of 'ease of upzoning' for a given station.

#Zoned Capacity

Zoned capacity is a measure of how many dwellings could fit in an area, given the current zoning. It is a theoretic maximum. This section looks at the current zoned capacity, and compares it to a theoretic zoned capacity under 'Missing Middle' zoning. To reiterate, the potential future zoned capacity is **a theoretic maximum**, and extremely unlikely to be realised if upzoning occured.

#Line Capacity

This metric aims to measure the amount of space available on trains passing through this station, as there is little point upzoning if there is no capacity to move people.

However, for stations in the middle of a train line, passengers will typically continue to board the train until the city. This means that it is not useful to only look at the patronage as trains pass through a given station as more passengers may board later.

Instead, it is best to look at the average number of passengers on trains at their last station before the CBD. This gives a better measure of how busy the line itself is overall.

##### Process for `r station`

1. Find the train line(s) that serve `r station`: `r station_lines`

2. For each train line, find the station nearest to the CBD. These are by definition the same for each line: `r station_targets`.

3. For each of these stations just before the CBD, calculate the average patronage of train services at that station, but restrict the search to only train services on the lines identified in step 1.


## How does the transformation work?

Each raw score is in different units, so the first task is to transform all the metrics into something that can be summed into one total score.

This is achieved by scaling each column (of all the scores) so that each value is relative to the maximum and minimum values from other stations, also known as xmin-xmax scaling. The end result is a value between zero and 1 across all metrics, allowing an easy summation.

$$
x = \frac{x - \min{x} }{ \max{x} - \min{x} }
$$

The problem is that some metrics are beneficial, e.g. NRZ/GRZ Percentage. However, some metrics are detrimental, e.g. distance.

To deal with this problem, weights are applied to each metric, with negative weights representing unwanted metrics.

By default, weights are set as:

```{r warning=FALSE,message=FALSE}
#| echo: false 

weights_df <- weights %>%
  as.data.frame() 

weights_df = weights_df %>%
  mutate(var = rownames(weights_df))
  
colnames(weights_df) = c('weight' , 'variable')

weights_df = weights_df %>%
  pivot_wider(names_from = variable, values_from = weight)

rownames(weights_df) = "Weight"

weights_df %>%
  reactable(rownames = T, theme = sandstone())

```

These transformed scores are then summed to produce a final score.

:::{.callout-note}
There are some restrictions placed on final rankings:

- City loop stations are excluded as they can't be upzoned further.

- Stations further than 25km of Flinders Street are excluded as they are generally economically unfeasible to upzone.

This restriction is arbitrary and will be improved alongside the model.
:::
<!-- ## Example Transformation -->

```{r warning=FALSE,message=FALSE}
#| echo: false 

# example_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
#   filter(station %in% c('Brunswick', 'Merri', 'Carnegie')) %>%
#   mutate(across(-station, as.numeric)) %>%
#   mutate(across(where(is.numeric), .fns = function(x) {round(x,2)}))

#example_rankings %>% reactable()

#example_transformed = transform_scores_xminxmax(example_rankings)

#example_transformed %>% reactable()


```

## Transformed Scores

```{r warning=FALSE,message=FALSE}
#| echo: false 

transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
  mutate(across(-station, as.numeric)) %>%
  mutate(across(where(is.numeric), .fns = function(x) {round(x,2)}))

transformed_scores %>%
  reactable( theme = sandstone(),
             searchable = T,
             defaultSorted = 'score',
             defaultSortOrder = 'desc',
             columns = list(
             ) )

```
