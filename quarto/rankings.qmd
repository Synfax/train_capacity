---
title: "Full Station Rankings"
author: "Paul S"
date: "6/6/24"
params: 
  station: "Brunswick"
format: 
  html: 
    theme: zephyr
    fig-width: 8
    fig-height: 8
    code-fold: false
    toc: true
    toc-depth: 4
    toc-location: left
    page-layout: full
---

This page contains information about the ranking of stations for priority upzoning.

The page contains first the raw scores for each train station. Then, a section explaining how scores are transformed, and then the transformed scores are show in full.

## Raw Scores

```{r warning=FALSE,message=FALSE}
#| echo: false 

library(tidyverse)
library(reactablefmtr)

source('../r/station_functions.R')

station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
  mutate(across(-station, as.numeric)) %>%
  mutate(across(where(is.numeric), .fns = function(x) {round(x,2)}))

station_rankings %>%
  reactable( pagination = T,
    theme = sandstone(),
             columns = list(
               station = colDef(name = "Station"),
               grz_nrz_percentage = colDef(name = "GRZ/NRZ %"),
               capacity_delta = colDef(name = "Delta"),
               heritage_pc = colDef(name = "Heritage"),
               average_peak_service_freq = colDef(name = 'Service Frequency'),
               average_peak_service_cap = colDef(name = 'Average load'),
               walkability_score = colDef(name = 'Walkability')
             ) )

```

## How does the transformation work?

Each raw score is in different units, so the first task is to transform all the metrics into something that can be summed into one total score. 

This is achieved by scaling each column (of all the scores) so that each value is its percent of the largest number, e.g., the highest score gets a value of one. 

The second problem is that some metrics are beneficial, e.g. NRZ/GRZ Percentage. However, some metrics are detrimental, e.g. heritage percentage. 

So, we need to denote which columns are 'bad'. When we sum the scores up together, these columns are subtracted instead of added.

<!-- ## Example Transformation -->

```{r warning=FALSE,message=FALSE}
#| echo: false 

example_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
  filter(station %in% c('Brunswick', 'Merri', 'Carnegie')) %>%
  mutate(across(-station, as.numeric)) %>%
  mutate(across(where(is.numeric), .fns = function(x) {round(x,2)}))

#example_rankings %>% reactable()

example_transformed = transform_scores(example_rankings)

#example_transformed %>% reactable()


```

## Transformed Scores

```{r warning=FALSE,message=FALSE}
#| echo: false 

transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
  mutate(across(-station, as.numeric)) %>%
  mutate(across(where(is.numeric), .fns = function(x) {round(x,2)}))

transformed_scores %>%
  reactable( theme = sandstone(),
             defaultSorted = 'score',
             defaultSortOrder = 'desc',
             columns = list(
               station = colDef(name = "Station"),
               grz_nrz_percentage = colDef(name = "GRZ/NRZ %"),
               capacity_delta = colDef(name = "Delta"),
               heritage_pc = colDef(name = "Heritage"),
               average_peak_service_freq = colDef(name = 'Service Frequency'),
               average_peak_service_cap = colDef(name = 'Average load'),
               walkability_score = colDef(name = 'Walkability'),
               score = colDef(name = "Total Score"),
               n_metrics = colDef(show = F),
               percent_score = colDef(show = F)
             ) )

```
