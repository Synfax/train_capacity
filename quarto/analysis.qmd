---
title: "Extra Information & Analytics"
author: "Paul S"
date: "6/6/24"
params: 
  station: "South Yarra"
format: 
  html: 
    theme: zephyr
    fig-width: 8
    fig-height: 6
    code-fold: false
    toc: true
    toc-depth: 4
    toc-location: left
    page-layout: full
---

```{r warning=FALSE,message=FALSE}
#| echo: false 
library(tidyverse)
library(sf)
library(leaflet)
library(stringr)
library(RColorBrewer)
library(plotly)
library(ggridges)
```

## Transformation of Scores

To see how scores are transformed, see [here](rankings.html "Rankings Page").

## Distributions of Scores


Shown below are density plots of the scores, both raw and after transformation. The density plots seek to show how the underlying data is distributed, as well as how many extreme values there are.


::: panel-tabset
## Transformed scores


```{r warning=FALSE,message=FALSE}
#| echo: false 

# translations = c(
#   'grz_nrz_pc' = 'Zoning suitability',
#   'capacity_delta' = 'Potential new homes',
#   'average_peak_service_freq' = 'Train frequency',
#   'average_peak_service_cap' = 'Available train capacity',
#   'walkability_score' = 'Local services',
#   'distance' = 'Distance to CBD',
#   'n_bus_tram' = 'Other transport infrastructure'
# )

transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
  as.data.frame()

transformed_scores = transformed_scores %>%
  select(-score) %>%
  pivot_longer(cols = -c('station')) %>%
  mutate(name = translations[name])

  # mutate(name = str_wrap(name, width = 5))

# <- ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free') + theme_bw()

ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
  geom_density_ridges(alpha = 0.5, bins = 30, stat = 'binline') +
  theme_ridges()  + 
  theme(legend.position = "none") + xlab("Transformed Score") +
  ylab("")


# ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
#   geom_density_ridges(alpha = 0.5, bins = 30) +
#   theme_ridges()  + 
#   theme(legend.position = "none")




```

## Raw scores

```{r warning=FALSE,message=FALSE}
#| echo: false 

translations = c(
  'grz_nrz_pc' = 'Zoning suitability (%)',
  'capacity_delta' = 'Potential new homes (#)',
  'average_peak_service_freq' = 'Train frequency (#/h)',
  'average_peak_service_cap' = 'Current train patronage (#)',
  'walkability_score' = 'Local services (#)',
  'distance' = 'Distance to CBD (m)',
  'n_bus_tram' = 'Other transport infrastructure (#)'
)

raw_scores = readRDS('../r_objects/station_rankings.Rdata') %>%
  filter(distance > 3000 & distance < 25000)

raw_scores = raw_scores %>%
  pivot_longer(cols = -c('station')) %>%
  mutate(name = translations[name])


ggplot(raw_scores) + geom_density(aes( x = value)) +
  facet_wrap(~ name, scales = 'free') +
  theme_bw() +
  theme(axis.text.y = element_blank()) + xlab("Raw score") + ylab("Density")

```

:::{.callout-note}
The same exclusion restrictions outlined [here](rankings.html "Rankings Page") are applied to the raw score plots.
:::

:::

## Top scores by LGA

## K-clustering

```{r warning=FALSE,message=FALSE}
#| echo: false 

station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
  as.data.frame()


station_rankings[, 2:ncol(station_rankings) ] = scale(station_rankings[, 2:ncol(station_rankings) ])


getSS <- function(n) {
  km <- kmeans(station_rankings[, 2:ncol(station_rankings) ], n, iter.max = 10, nstart =  25)
  return(sum(km$withinss))
}

res.df = data.frame(n = 1:10, ss = map(1:10, getSS) %>% unlist() %>% as.vector() )

#plot(x = res.df$n, y= res.df$ss)

## elbow is around 4

km.res <- kmeans(station_rankings[, 2:ncol(station_rankings) ], 4, iter.max = 10, nstart =  25)

station_rankings = station_rankings %>%
  mutate(cluster = km.res$cluster) %>%
  rename(Station_Name = 'station') %>%
  select(Station_Name, cluster)

locations = readRDS('../r_objects/locations.Rdata') %>% left_join(station_rankings, by = 'Station_Name') %>%
  st_as_sf(coords = c('lng', 'lat'))

fillPal = colorFactor('viridis', domain = locations$cluster)

leaflet(locations) %>%
  addProviderTiles('CartoDB.Positron') %>%
  addCircleMarkers(fillColor = ~fillPal(cluster), stroke = NA, fillOpacity = 0.5 ) %>%
  addLegend(position = 'bottomleft', pal = fillPal, values = ~cluster )

```
