---
title: "Extra Statistics & Analytics"
author: "Paul S"
date: "6/6/24"
params: 
  station: "South Yarra"
format: 
  html: 
    theme: zephyr
    fig-width: 8
    fig-height: 6
    code-fold: false
    toc: true
    toc-depth: 4
    toc-location: left
    page-layout: full
---

## Distribution of scores

```{r warning=FALSE,message=FALSE}
#| echo: false 

library(tidyverse)
library(sf)
library(leaflet)
library(stringr)
library(RColorBrewer)
library(plotly)

translations = c(
  'grz_nrz_pc' = 'Zoning suitability',
  'capacity_delta' = 'Potential new homes',
  'average_peak_service_freq' = 'Train frequency',
  'average_peak_service_cap' = 'Available train capacity',
  'walkability_score' = 'Local services',
  'distance' = 'Distance to CBD',
  'n_bus_tram' = 'Other transport infrastructure'
)

transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
  as.data.frame()

transformed_scores = transformed_scores %>%
  select(-score) %>%
  pivot_longer(cols = -c('station')) %>%
  mutate(name = translations[name])

  # mutate(name = str_wrap(name, width = 5))

# <- ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free') + theme_bw()


makeDensityPlot <- function(var = 'Zoning suitability') {
  
  plot <- ggplot(transformed_scores %>% filter(name == var)) +
    geom_density(aes(x = value)) +
    theme_bw() 
 
  print(plot)
}

```

:::{.panel-tabset}

##   Zoning suitability

```{r}
makeDensityPlot('Zoning suitability')
```

##  Potential number of new homes

##   Train service frequency in peak

##  Train service passenger numbers in peak

##  Number of local services within a 500m walk

##  Distance to CBD

##  Existing transport infrastructure.


:::



## Top scores by LGA


## K-clustering

```{r warning=FALSE,message=FALSE}
#| echo: false 

station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
  as.data.frame()


station_rankings[, 2:ncol(station_rankings) ] = scale(station_rankings[, 2:ncol(station_rankings) ])


getSS <- function(n) {
  km <- kmeans(station_rankings[, 2:ncol(station_rankings) ], n, iter.max = 10, nstart =  25)
  return(sum(km$withinss))
}

res.df = data.frame(n = 1:10, ss = map(1:10, getSS) %>% unlist() %>% as.vector() )

#plot(x = res.df$n, y= res.df$ss)

## elbow is around 4

km.res <- kmeans(station_rankings[, 2:ncol(station_rankings) ], 4, iter.max = 10, nstart =  25)

station_rankings = station_rankings %>%
  mutate(cluster = km.res$cluster) %>%
  rename(Station_Name = 'station') %>%
  select(Station_Name, cluster)

locations = readRDS('../r_objects/locations.Rdata') %>% left_join(station_rankings, by = 'Station_Name') %>%
  st_as_sf(coords = c('lng', 'lat'))

fillPal = colorFactor('viridis', domain = locations$cluster)

leaflet(locations) %>%
  addProviderTiles('CartoDB.Positron') %>%
  addCircleMarkers(fillColor = ~fillPal(cluster), stroke = NA, fillOpacity = 0.5 ) %>%
  addLegend(position = 'bottomleft', pal = fillPal, values = ~cluster )

```