---
title: "Extra Information & Analytics"
author: "Paul S"
date: "6/6/24"
params: 
  station: "South Yarra"
css: run_for_station.css
format: 
  html: 
    theme: zephyr
    fig-width: 8
    fig-height: 6
    code-fold: false
    toc: true
    toc-depth: 4
    toc-location: left
    page-layout: full
---

```{r warning=FALSE,message=FALSE}
#| echo: false 
library(tidyverse)
library(sf)
library(leaflet)
library(stringr)
library(RColorBrewer)
library(plotly)
library(ggridges)

source('../r/constants.R')
source('../r/transform.R')
```

## Transformation of Scores

To see how scores are transformed, see [here](rankings.html "Rankings Page").

## Distributions of Scores


Shown below are density plots of the scores, both raw and after transformation. The density plots seek to show how the underlying data is distributed, as well as how many extreme values there are.



#### Transformed scores
::: graph

```{r warning=FALSE,message=FALSE}
#| echo: false 

# translations = c(
#   'grz_nrz_pc' = 'Zoning suitability',
#   'capacity_delta' = 'Potential new homes',
#   'average_peak_service_freq' = 'Train frequency',
#   'average_peak_service_cap' = 'Available train capacity',
#   'walkability_score' = 'Local services',
#   'distance' = 'Distance to CBD',
#   'n_bus_tram' = 'Other transport infrastructure'
# )

transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
  as.data.frame()

transformed_scores = transformed_scores %>%
  select(-score) %>%
  pivot_longer(cols = -c('station')) %>%
  mutate(name = translations_simple[name])

  # mutate(name = str_wrap(name, width = 5))

# <- ggplot(transformed_scores) + geom_density(aes( x = value)) + facet_grid(rows = vars(name), scales = 'free') + theme_bw()

ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
  geom_density_ridges(alpha = 0.5, bins = 30, stat = 'binline') +
  theme_ridges()  + 
  theme(legend.position = "none") + xlab("Transformed Score") +
  ylab("")


# ggplot(transformed_scores, aes(x = value, y  = name, fill = name)) +
#   geom_density_ridges(alpha = 0.5, bins = 30) +
#   theme_ridges()  + 
#   theme(legend.position = "none")




```
:::


::: column-margin
Created with `ggridgeline`.
:::

#### Raw scores
::: graph
```{r warning=FALSE,message=FALSE}
#| echo: false 



raw_scores = readRDS('../r_objects/station_rankings.Rdata') %>%
  filter(distance < 25000) %>%
  filter(!(station %in% city_loop_stations))

  raw_scores = raw_scores %>%
  pivot_longer(cols = -c('station')) %>%
  mutate(name = translations_simple[name])


ggplot(raw_scores) + geom_density(aes( x = value)) +
  facet_wrap(~ name, scales = 'free') +
  theme_bw() +
  theme(axis.text.y = element_blank()) + xlab("Raw score") + ylab("Density")

```
:::

:::{.callout-note}
The same exclusion restrictions outlined [here](rankings.html "Rankings Page") are applied to the raw score plots.
:::



## Top scores by LGA

```{r warning=FALSE,message=FALSE}
#| echo: false

n_slice = 25

```

The chart below breaks down the best `r n_slice` stations into their Local Government Areas. It is clear to see that the highest ranked stations are typically located in the south east of Melbourne or in the inner north.

::: graph
```{r warning=FALSE,message=FALSE}
#| echo: false



```
:::

## Top Scores by Line

The below plot shows which train lines how the `r n_slice` top stations are located on. For stations on many lines, each line is counted once.


::: graph
```{r warning=FALSE,message=FALSE}
#| echo: false 

station_lines = readRDS('../r_objects/stations_with_lines.Rdata') 

transformed_scores = readRDS('../r_objects/transformed_scores.Rdata') %>%
  as.data.frame() %>%
  rename(Station_Name = "station") %>%
  arrange(desc(score)) %>%
  mutate(rank = row_number())

transformed_scores %>%
  left_join(station_lines, by = 'Station_Name') %>%
  slice_head(n = n_slice) %>%
  select(Station_Name, rank, lines) %>%
  unnest(lines) %>%
  count(lines, sort = T) %>%
  filter(lines != "Richmond and City Loop") %>%
  rename(line = 'lines') %>%
  left_join(line_groups, by = 'line') %>%
  ggplot(., mapping = aes(x = reorder(line, -n) , y = n)) +
  theme_minimal() +
  geom_col(aes(fill = group)) +
  scale_fill_manual(values = setNames(colours$colour, colours$group)) +
  guides(x = guide_axis(angle = 45)) +
  xlab("Train Line") +
  ylab(paste0("Number of stops in top ", n_slice )) 

```
:::


```{r warning=FALSE,message=FALSE}
#| echo: false 

# 
# station_lines = readRDS('../r_objects/stations_with_lines.Rdata') 
# 
# station_rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
#   rename(Station_Name = "station") %>%
#   as.data.frame()
# 
# 
# (station_rankings %>%
#   filter_stations(., "Station_Name") %>%
#   left_join(station_lines, by = 'Station_Name') %>%
#   select(average_peak_service_cap, lines) %>%
#   unique() %>%
#   rowwise() %>%
#   mutate(lines = lines %>% unlist() %>% as.vector() %>% paste0(.,collapse = ',') ) %>%
#   ggplot(mapping = aes(y = reorder(lines, average_peak_service_cap), x = average_peak_service_cap)) +
#   geom_col() +
#   theme_minimal() +
#   xlab("Avg number of people on peak train before flinders") +
#   ylab("Lines serving station")) %>%
#   ggplotly()

```
