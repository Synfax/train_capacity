---
title: "Station Information"
author: "Paul S"
date: "6/6/24"
params: 
  station: "Mentone"
css: ../../../run_for_station.css
format: 
  html: 
    theme: zephyr
    fig-width: 6
    fig-height: 6
    code-fold: false
    toc: true
    toc-depth: 4
    toc-location: left
    page-layout: full
---

```{r warning=FALSE,message=FALSE}
#| echo: false 
station = params$station

zoom_level = 15


library(knitr)
library(tidyverse)
library(sf)
library(leaflet)
devtools::install_github("walkerke/mapgl")
library(mapgl)
library(htmltools)
library(htmlwidgets)
library(reactablefmtr)
library(plotly)
library(RColorBrewer)
library(ggridges)
library(collapse)

source('../r/constants.R')

source('../r/station_functions.R')

near_properties = get_near_properties(station, fromQuarto = T)

yimby_colours <- list(
  hero = "#10461B",
  body = "#000000",
  background  = "#FDFFEE",
  green_base  = "#10461B",
  blue_base   = "#283696",
  red_base    = "#BA1B21",
  yellow_base = "#F6AE00",
  green_palette  = c("#10461B", "#2C6F3A", "#579A64", "#8FC49A", "#D6EFDB"),
  blue_palette   = c("#1A235F", "#283696", "#9EA7E2", "#D0D6FF", "#E8ECFF"),
  red_palette    = c("#D92127", "#BA1B21", "#8E3437", "#C6A2A3", "#E3BABB"),
  yellow_palette = c("#F6AE00", "#DE9B00", "#C79E3E", "#F2DCA5", "#FFF7E3")
)

specified_colors <- c("Already developed"                       = "#989898",
                      "Housing not permitted"                   = "#b1b1b1",
                      "Civic use makes development less likely" = "#cacaca", 
                      "Low density residential"                 = yimby_colours$blue_palette[5],
                      "2 storeys (NRZ)"                         = yimby_colours$blue_palette[4],
                      "3 storeys (GRZ)"                         = yimby_colours$blue_palette[3],
                      "4 storeys (RGZ)"                         = yimby_colours$blue_palette[2],
                      "4+ storeys (Mixed use zones)"            = yimby_colours$blue_palette[1],
                      "6 storeys (Missing middle)"              = yimby_colours$green_palette[3]
)


hourly_factors = readRDS('../r_objects/hourly_factors.Rdata') %>%
  as.data.frame()


rankings = readRDS('../r_objects/station_rankings.Rdata') %>%
  rename(Station_Name = "station") %>%
  filter(Station_Name == station) %>%
  pivot_longer(-Station_Name) %>%
  select(-Station_Name) %>%
  mutate(value = round(value, 2)) 


transformed_rankings = readRDS('../r_objects/transformed_scores.Rdata') %>%
  rename(Station_Name = "station") %>%
  arrange(-score) %>%
  as.data.frame() %>%
  mutate(rank = row_number())

nrow <- nrow(transformed_rankings)  
rank <- transformed_rankings %>%
    filter(Station_Name == station) %>%
  pull(rank)
  
transformed_rankings = transformed_rankings %>%
  filter(Station_Name == station) %>%
  select(-rank) %>%
  pivot_longer(-Station_Name) %>%
  select(-Station_Name) %>%
  mutate(value = round(value, 2)) %>%
  filter(name != 'score') 

total_score <- sum(transformed_rankings$value)

```

## Overall Scores

`r station` obtained a final score of **`r total_score`**, placing it number `r rank` out of `r nrow`.

The remainder of this page steps through each factor listed below in no particular order.

::: {.callout-note icon="false"}
## Full Methodology

The full methodology for how these scores are calculated and why they are important for consideration in upzoning is [here](../../../rankings.html).
:::
:::{.graph}
```{r warning=FALSE,message=FALSE}
#| echo: false 



rankings %>%
  left_join(transformed_rankings, by = 'name') %>%
  mutate(name = translations[name]) %>%
reactable(theme = sandstone(),
            columns = list(
              'name' = colDef(name = 'Metric'),
              'value.x' = colDef(name = "Value"),
              'value.y' = colDef(name = "Score")
            )
            
            )

```
:::
## Service Frequency

Service frequency is calculated as the mean number of services per hour in two time periods:

-   Between 7 and 10am towards Flinders Street, shown in blue.

-   Between 4 and 7pm away from Flinders Street, shown in green.

:::{.graph}
```{r warning=FALSE,message=FALSE}
#| echo: false 


service_frequencies = readRDS('../r_objects/service_frequencies.Rdata')

for_select_station = service_frequencies %>%
  filter(Station_Name == station) %>%
  filter(Day_Type == 'Normal Weekday') %>%
  mutate(hour_of_day = as.numeric(hour_of_day)) %>%
  arrange(desc(Direction))

morning_to_flinders = for_select_station %>%
    filter(Direction == 'Towards Flinders',
           as.numeric(hour_of_day) %in% peak_morning) %>%
    pull(sph) %>% mean() %>% round(., 2)

evening_away_from_flinders = for_select_station %>%
    filter(Direction == 'Away from Flinders',
           as.numeric(hour_of_day) %in% peak_evening) %>%
    pull(sph) %>% mean() %>% round(., 2)

final_frequency_score = mean(c(morning_to_flinders, evening_away_from_flinders)) %>% round(., 2)

vlines <- data.frame(
  Direction = c("Towards Flinders", "Away from Flinders"),  # Your actual directions
  xintercept = c( c(7, 16), c(10,19) ),
  fill = c("morning", "evening")
)

rect_data <- data.frame(
  Direction = c("Towards Flinders", "Away from Flinders"),  # Your actual directions
  xmin = c(7, 16),
  xmax = c(10, 19),
  ymin = -1000,
  ymax = 1000,
  fill = c("morning", "evening")
)

mean_data <- data.frame(
  Direction = c("Towards Flinders", "Away from Flinders"),
  y = c(morning_to_flinders, evening_away_from_flinders),
  xmin = c(7, 16),
  xmax = c(10, 19),
  fill = c("morning", "evening")
)
  
sph_plot <- ggplot() +
  geom_rect(data = rect_data, 
            mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = fill),  
            alpha = 0.1) + 
  facet_grid(rows = vars(Direction)) +
  geom_segment(data  = mean_data, mapping = aes(x = xmin, xend = xmax, y = y, yend = y, fill = fill), size = 1, linetype = 'dashed', color = 'darkgrey') +
  geom_vline(data = vlines, mapping = aes(xintercept = xintercept), linetype = 'dashed',  color = 'red') +
  geom_point(data = for_select_station, mapping = aes(x = hour_of_day, y = sph, group = 1)) +
  scale_fill_manual(values = c('morning' = 'blue', 'evening' = 'green')) +
  scale_x_continuous(breaks = 0:23, limits = c(0, 23)) +
  labs(title = "Service Frequency by time of day", fill = " Peak Period") +
  theme(base_size = 13) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(legend.position = "bottom") + 
  theme_minimal() +
  xlab('Hour of day') + 
  ylab('Services per hour') + 
  coord_cartesian(ylim = c(0, max(for_select_station$sph) + 1 ))

interactive_sph = ggplotly(sph_plot, height = 550)
interactive_sph = layout(interactive_sph, height = "550", autosize = T, legend = list(orientation = "v",   # horizontal legend
                                         yanchor = "middle",
                                         x = 0.05,
                                         y = 0.85,
                                          bordercolor = "black",    # Border color of the legend
    borderwidth = 1
                                         ))

div(class = "plot", interactive_sph)
#interactive_sph
```
:::
::: column-margin
The chart is also split by direction of travel, which in Melbourne's radial network is either towards or away from Flinders street.

\

The mean values of these two periods are shown as dashed lines, and the mean of those two numbers is the final score.
:::

\

The morning average freqency is `r morning_to_flinders`, the average evening frequency is `r evening_away_from_flinders`, which forms a mean score of **`r final_frequency_score`**.

## Available Line Capacity

```{r warning=FALSE,message=FALSE}
#| echo: false 

station_lines = readRDS('../r_objects/stations_with_lines.Rdata') %>%
  filter(Station_Name == station) %>%
  pull(lines) %>%
  unlist() %>%
  as.vector()

station_targets = readRDS('../r_objects/target_stations.Rdata') %>% 
  filter(Station_Name == station) %>%
  pull(targets) %>%
  unlist() %>%
  as.vector() %>%
  first()
```

<!-- ##### Patronage at `r station_targets` on the `r station_lines` line(s): -->

The chart below shows the average patronage on the `r station_lines` line(s) at the last stop before the CBD (`r station_targets`). It is calculated for two times:

-   Between 7 and 10am towards Flinders Street, denoted as blue.

-   Between 4 and 7pm away from Flinders street, shown as green.

:::{.graph}
```{r warning=FALSE,message=FALSE}
#| echo: false 

to_plot <- hourly_factors %>%
  ungroup() %>%
  as.data.frame() %>%
  filter(Station_Name == station_targets, Day_Type == 'Normal Weekday') %>%
  filter(Line_Name %in% station_lines) %>%
  mutate(hour_of_day = as.numeric(hour_of_day)) %>%
  group_by(hour_of_day, Direction) %>%
  summarise(avg_patronage = mean(avg_patronage))

morning_to_flinders = to_plot %>%
    filter(Direction == 'Towards Flinders',
           as.numeric(hour_of_day) %in% peak_morning) %>%
    pull(avg_patronage) %>% mean() %>% round(., 2)

evening_away_from_flinders = to_plot %>%
    filter(Direction == 'Away from Flinders',
           as.numeric(hour_of_day) %in% peak_evening) %>%
    pull(avg_patronage) %>% mean() %>% round(., 2)

final_patronage_score = mean(c(morning_to_flinders, evening_away_from_flinders)) %>% round(., 2)

rect_data <- data.frame(
  Direction = c("Towards Flinders", "Away from Flinders"),  # Your actual directions
  xmin = c(7, 16),
  xmax = c(10, 19),
  ymin = -100,
  ymax = 1000,
  fill = c("morning", "evening")
)

mean_data <- data.frame(
  Direction = c("Towards Flinders", "Away from Flinders"),
  y = c(morning_to_flinders, evening_away_from_flinders),
  xmin = c(7, 16),
  xmax = c(10, 19),
  fill = c("morning", "evening")
)

patronage_plot <- ggplot() +
  geom_rect(data = rect_data, 
            mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = fill),  
            alpha = 0.1) + 
  facet_grid(rows = vars(Direction)) +
  geom_segment(data  = mean_data, mapping = aes(x = xmin, xend = xmax, y = y, yend = y, fill = fill), size = 1, linetype = 'dashed', color = 'darkgrey') +
  geom_vline(data = vlines, mapping = aes(xintercept = xintercept), linetype = 'dashed',  color = 'red') +
  geom_point(data = to_plot, mapping = aes(x = hour_of_day, y = avg_patronage, group = 1)) +
  scale_fill_manual(values = c('morning' = 'blue', 'evening' = 'green')) +
  scale_x_continuous(breaks = 0:23, limits = c(0, 23)) +
  labs(title = paste0("Average patronage by time of day at ", station_targets), fill = " Peak Period") +
  theme(base_size = 13) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme_minimal() +
  xlab('Hour of day') + 
  ylab('Patronage per train') +
  coord_cartesian(ylim = c(0, max(to_plot$avg_patronage) + 50))

interactive_patronage = ggplotly(patronage_plot, height = 550)
interactive_patronage = layout(interactive_patronage, autosize = T, height = '550', legend = list(orientation = "v",   # horizontal legend
                                         yanchor = "middle",
                                         x = 0.05,
                                         y = 0.85,
                                         bordercolor = "black",    # Border color of the legend
    borderwidth = 1
                                         ))

div(class = 'plot', interactive_patronage)

```
:::
::: column-margin
The chart is also split by direction of travel, which in Melbourne's radial network is either towards or away from Flinders street.

\

The mean values of these two periods are shown as dashed lines, and the mean of those two numbers is the final score.
:::

\

The morning average patronage is `r morning_to_flinders`, the average evening patronage is `r evening_away_from_flinders`, which forms a mean score of **`r final_patronage_score`.**

## Zoning Suitability

The map below shows the properties within 1km of `r station` that are suitable for upzoning in orange, with unsuitable properties in black.

::: column-margin
Suitable properties are either neighbourhood residential or general residential and not under heritage restrictions.
:::

```{r warning=FALSE,message=FALSE}
#| echo: false 
#| column: page


# grz_nrz = near_properties %>%
#     filter(type_short %in% c('Neighbourhood residential', 'General residential')) %>%
#     filter(heritage == F)

grz_nrz = near_properties %>%
  mutate(isNRZGRZ = case_when((zone_short %in% c('Neighbourhood residential', 'General residential', 'Residential growth') & !heritage) ~ T, .default =  F ) ) %>%
  mutate(colour = ifelse(isNRZGRZ, 'orange' ,'black'))

bounds <- c(min(grz_nrz$lon, na.rm = T), min(grz_nrz$lat, na.rm = T),
            max(grz_nrz$lon, na.rm = T), max(grz_nrz$lat, na.rm = T))

#fix panes

leaflet(grz_nrz) %>%
  fitBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%
  setView(lng = mean(c(bounds[1], bounds[3])), lat = mean(c(bounds[2], bounds[4])), zoom = zoom_level) %>%
  addMapPane("background_map", zIndex = 410) %>%  # Level 1: bottom
  addMapPane("polygons", zIndex = 420) %>%        # Level 2: middle
  addMapPane("labels", zIndex = 430) %>%  
  addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(opacity = 0.7, pane = "background_map")) %>%
  addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_labels/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(pane = "labels")) %>%
  addPolygons(fillColor = ~colour, color = NA, weight = 0, fillOpacity = 0.7, options = pathOptions(pane = "polygons")) %>%
  addLegend(position = 'bottomleft', colors = c('orange','black'), labels = c('Suitable lot for upzoning','Unsuitable lot'), title = "Lot Suitability")
  
n_suitable = grz_nrz %>%
  st_drop_geometry() %>%
  count(isNRZGRZ) %>%
  filter(isNRZGRZ) %>%
  pull(n)

n_unsuitable = grz_nrz %>%
  st_drop_geometry() %>%
  count(isNRZGRZ) %>%
  filter(!isNRZGRZ) %>%
  pull(n)

by_validity <- grz_nrz %>%
  group_by(isNRZGRZ) %>%
  summarise(total_area = sum(st_area(geom))) %>%
  st_drop_geometry()

area_ratio = ( ( by_validity %>% filter(isNRZGRZ) %>% pull(total_area) ) / sum(by_validity$total_area) %>% unname() %>% as.vector() ) %>% round(.,2)

```

\

Out of `r n_suitable + n_unsuitable` lots within `r radius`m radius of `r station`, `r n_suitable` are suitable for upzoning.

In terms of area, the most suitable properties cover **`r area_ratio*100`**% of the total area.

For more information, see the table below.

:::{.graph}
```{r warning=FALSE,message=FALSE}
#| echo: false 

by_zone_heritage <- near_properties %>%
  st_drop_geometry() %>%
  count(heritage, zone_short) %>%
  dplyr::relocate(zone_short, .before = heritage) %>%
  arrange(zone_short)

# by_zone_heritage %>%
#   mutate(heritage = ifelse(heritage, 'Yes','No')) %>%
#   reactable(
#     theme = sandstone(),
#     pagination = F,
#     columns = list(
#       zone_short = colDef(name = "Zone"),
#       heritage = colDef(name = "Heritage protected"),
#       n = colDef(name = "Number of lots")
#     )
#   )

by_zone_heritage %>%
  group_by(zone_short) %>%
  summarise(n_total = sum(n), percent = n[heritage] / n_total, n_heritage = n[heritage], n_not_heritage = n[!heritage]) %>%
  mutate(percent = round(percent, 2)) %>%
  mutate(percent = percent * 100) %>%
  relocate(n_total, .after = n_not_heritage) %>%
  reactable(
    theme = sandstone(),
    pagination = F,
    columns = list(
      zone_short = colDef(name = "Zone"),
      percent = colDef(name = "% Heritage"),
      n_heritage = colDef(name = "# Heritage Lots"),
      n_not_heritage = colDef(name = "# Non Heritage Lots"),
      n_total = colDef(name = "Total")
    )
  )



```
:::

## Existing Transport Infrastructure

The map below shows tram routes and tram stops in green, as well as bus routes and bus stops in orange.

```{r warning=FALSE,message=FALSE}
#| echo: false 
#| column: page
 
bus_stops = read_sf('../shapefiles/ptv/PTV_METRO_BUS_STOP.shp')
tram_stops = read_sf('../shapefiles/ptv/PTV_METRO_TRAM_STOP.shp')
tram_routes = read_sf('../shapefiles/Order_JRGGG7/ll_gda2020/esrishape/whole_of_dataset/victoria/PTV/PTV_METRO_TRAM_ROUTE.shp')
bus_routes = read_sf('../shapefiles/Order_JRGGG7/ll_gda2020/esrishape/whole_of_dataset/victoria/PTV/PTV_METRO_BUS_ROUTE.SHP')

bus_frequencies = readRDS(paste0('../r_objects/bus_stop_frequencies.Rdata')) %>%
    rename(STOP_ID = "stop_id") %>%
    mutate(STOP_ID = as.character(STOP_ID)) %>%
    select(peak_type, n, STOP_ID) %>%
    group_by(STOP_ID) %>%
    summarise(avg_sph = mean(n))
  
tram_frequencies = readRDS(paste0('../r_objects/tram_stop_frequencies.Rdata')) %>%
    rename(STOP_ID = "stop_id") %>%
    mutate(STOP_ID = as.character(STOP_ID)) %>%
    select(peak_type, n, STOP_ID) %>%
    group_by(STOP_ID) %>%
    summarise(avg_sph = mean(n))

locations = readRDS(paste0('../r_objects/locations.Rdata'))
  
station_location = locations %>%
    filter(Station_Name == station) %>%
    st_as_sf(coords = c('lng','lat'), crs = 'wgs84')
  
buffer = st_buffer(station_location, dist = radius) %>%
    st_transform(crs = 7844)
  
near_bus_vector <- st_within(bus_stops, buffer, sparse = F)
  
bus_stops_near_station = bus_stops %>%
    filter(near_bus_vector) 

bus_routes_near_station = bus_routes %>%
  filter(ROUTESHTNM %in% bus_stops_near_station$ROUTEUSSP) %>%
  st_intersection(buffer)
  
near_tram_vector <- st_within(tram_stops, buffer, sparse = F)
  
tram_stops_near_station = tram_stops %>%
    filter(near_tram_vector) 

tram_routes_near_station = tram_routes %>%
  filter(ROUTESHTNM %in% tram_stops_near_station$ROUTEUSSP) %>%
  st_intersection(buffer)

tram_route_list <- tram_routes_near_station %>%
  st_drop_geometry() %>%
  pull(ROUTESHTNM) %>% unique()

bus_route_list <- bus_routes_near_station %>%
  st_drop_geometry() %>%
  pull(ROUTESHTNM) %>% unique()

leaflet() %>%
  fitBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%
  setView(lng = mean(c(bounds[1], bounds[3])), lat = mean(c(bounds[2], bounds[4])), zoom = zoom_level) %>%
  addMapPane("background_map", zIndex = 410) %>%  # Level 1: bottom
  addMapPane("polygons", zIndex = 420) %>%        # Level 2: middle
  addMapPane("labels", zIndex = 430) %>%  
  addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(opacity = 0.7, pane = "background_map")) %>%
    addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_labels/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(pane = "labels")) %>%
  addCircleMarkers(data = tram_stops_near_station, color = "black", radius = 3, fillColor = "#78BE20", fillOpacity = 1, options = pathOptions(pane = 'polygons'), stroke = 0.5, weight = 1, opacity = 1) %>%
  addCircleMarkers(data = bus_stops_near_station, fillOpacity = 1, radius = 3, fillColor = "#FF8200", color = "black", stroke = 0.5, options = pathOptions(pane = 'polygons'), weight = 1, opacity = 1) %>%
  addPolylines(data = bus_routes_near_station, color = "#FF8200", options = pathOptions(pane = 'polygons'), fillOpacity = 0.7) %>%
  addPolylines(data = tram_routes_near_station, color = "#78BE20", options = pathOptions(pane = 'polygons'), fillOpacity = 0.7) %>%
  addPolygons(data = buffer, color = 'black', fillColor = 'grey', fillOpacity = 0.3, options = pathOptions(pane = 'polygons'))

bus_f_df <- bus_stops_near_station %>%
   left_join(bus_frequencies, by = 'STOP_ID') %>%
    group_by(ROUTEUSSP) %>%
    summarise(avg_sph = mean(avg_sph, na.rm=T)) %>%
    filter(!str_detect(ROUTEUSSP, ',')) %>%
    st_drop_geometry() %>%
  mutate(mode = 'bus')

tram_f_df <- tram_stops_near_station %>%
    left_join(tram_frequencies, by = 'STOP_ID')  %>%
    group_by(ROUTEUSSP) %>%
    summarise(avg_sph = mean(avg_sph, na.rm=T)) %>%
    filter(!str_detect(ROUTEUSSP, ',')) %>%
    st_drop_geometry() %>%
  mutate(mode = 'tram')


# tram_f_df <- data.frame( sph = tram_stops_near_station %>%
#   left_join(tram_frequencies, by = 'STOP_ID') %>%
#   pull(avg_sph), mode = 'Tram')
# 
# bus_f_df <- data.frame(sph=bus_stops_near_station %>%
#   left_join(bus_frequencies, by = 'STOP_ID') %>%
#   pull(avg_sph), mode = 'Bus')

```

\

There are `r tram_stops_near_station %>% nrow()` tram stops in a 1km radius, with route(s) `r tram_route_list` servicing the area.

For buses, there are `r bus_stops_near_station %>% nrow()`, with route(s) `r bus_route_list`.

The data below shows the frequencies per route in both table and bar chart form.

::: panel-tabset
## Data

```{r warning=FALSE,message=FALSE}
#| echo: false 


merged_f_df = rbind.data.frame(tram_f_df, bus_f_df) %>%
   filter(!is.na(avg_sph)) %>%
   arrange(avg_sph) 

total_score <- merged_f_df %>%
  mutate(weight = case_when(mode == "bus" ~ 1, mode == "tram" ~ 2)) %>%
  mutate(weighted = weight*avg_sph) %>%
  pull(weighted) %>%
  sum(na.rm=T)

frequency_chart <- merged_f_df %>%
  mutate(mode = stringr::str_to_title(mode) ) %>%
  mutate(avg_sph = round(avg_sph, 2)) %>%
  reactable(theme=sandstone(),
            defaultSorted = 'avg_sph',
            defaultSortOrder = 'desc',
            columns =
              list(ROUTEUSSP = colDef(name = "Route"),
                   avg_sph = colDef(name = "Service Frequency"),
                   mode = colDef(name = "Mode")))

frequency_chart
```

## Chart

```{r warning=FALSE,message=FALSE}
#| echo: false 



mode_colors <- setNames(c("#FF8200", "#78BE20"), c('bus','tram'))



col_chart <- ggplot(merged_f_df, mapping = aes(x = reorder(ROUTEUSSP, avg_sph), y = avg_sph, fill = mode), ) + geom_col(width = 0.7 ) +
  scale_fill_manual(values = mode_colors) +
  ylab('Services Per Hour') +
  theme_minimal() +
  xlab('Route Number') +
   coord_flip()


freq_bar_chart <- ggplotly(col_chart, height = 350)
# 
# # ggplot(tram_f_df, mapping = aes(x = sph, y = mode, fill = mode)) +
# #   geom_density_ridges(alpha = 0.5,bins = 15, stat = 'binline') +
# #   theme_ridges()  +
# #   theme(legend.position = "none") + xlab("Services Per Hour") +
# #   ylab("Mode")
# # 
# # ggplot(tram_f_df, mapping = aes(x = sph)) +
# #   geom_density() +
# #   facet_wrap(~mode, scales = 'free') +
# #   theme_bw()
# 
# ggplot(tram_f_df, aes(x = sph, y = mode, fill = mode)) +
#   geom_boxplot() +
#   geom_jitter(width = 0.2, height = 0.2, alpha = 0.5) +
#   facet_grid(rows = vars(mode), scales = "free") +
#   theme_bw() +
#   theme(legend.position = 'none') + xlab('Services Per Hour') + ylab('Transport Mode')

freq_bar_chart

```
:::

```{r}
#| column: page
#| layout-nrow: 1


```

The final score for 'existing transport infrastructure' is computed by summing the average frequencies of each route and applying a weight to each mode.

The current weights are intended to reflect the throughput each mode is capable of. At a minimum, trams can move twice as many people as buses at the same frequency, so trams are weighted twice as much as buses.

The final score is **`r round(total_score, 2)`**.

## Local Amenities

The map below shows the local amenities near `r station` within a `r radius`m radius.

::: {.callout-caution collapse="true"}
## Notes on Data Visualisation

OpenStreetMap point locations were joined to polygon dwelling data for this visualisation. Some points could not be joined and are displayed as circles on the map.

Some amenities are within the same building, e.g. multiple shops in shopping centres. In these cases, the building is assigned a colour corresponding to the most common amenity within it.
:::

```{r warning=FALSE,message=FALSE}
#| echo: false 
#| column: page

  walkability_df <- readRDS('../r_objects/station_walkability.Rdata')

  buffer = get_buffer(station, fromQuarto = T)

  full_prop_list = map_amenities(get_near_osm(station, fromQuarto = T), station, fromQuarto = T) %>%
    rename(type = 'type.x')
  
  amenPal <- colorFactor(brewer.pal(name = 'Set1', n = length(unique(full_prop_list$type))), domain = full_prop_list$type)

  unmatched_props <- full_prop_list %>%
    filter(st_is_empty(poly_geom)) %>%
    st_set_geometry('point_geom')
  
  matched_props <- full_prop_list %>%
    filter(!st_is_empty(poly_geom)) %>%
    st_set_geometry('poly_geom') %>%
    select( - point_geom)
  
  matched_props = matched_props %>%
    group_by(poly_geom) %>%
    summarise(n = n(), type = fmode(type) )
  
  leaflet() %>%
    fitBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%
  setView(lng = mean(c(bounds[1], bounds[3])), lat = mean(c(bounds[2], bounds[4])), zoom = zoom_level) %>%
    addMapPane("background_map", zIndex = 410) %>%  # Level 1: bottom
    addMapPane("polygons", zIndex = 420) %>%        # Level 2: middle
    addMapPane("labels", zIndex = 430) %>%  
    addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_background/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(opacity = 0.7, pane = "background_map")) %>%
    addTiles('https://tiles.stadiamaps.com/tiles/stamen_toner_labels/{z}/{x}/{y}.png?api_key=090a847c-32a2-4e35-99a9-543ad8f4ecc8', options = tileOptions(pane = "labels")) %>%
    addPolygons(data = matched_props, fillColor = ~amenPal(type), fillOpacity = 0.7, color = 'black', options = pathOptions(pane = 'polygons'), weight = 1) %>%
    addCircles(data = unmatched_props, fillColor = ~amenPal(type), fillOpacity = 0.7,  color = 'black', options = pathOptions(pane = 'polygons'), weight = 1) %>%
    addLegend(position = 'bottomleft', pal = amenPal, values = full_prop_list$type) %>%
    addPolygons(data = buffer, color = 'black', fillColor = 'grey', fillOpacity = 0.3, options = pathOptions(pane = 'polygons'))
  
  


```

\

The plot below shows the number of local services within a `r radius`m radius. Data is drawn from OpenStreetMaps classifications. Black dotted lines represent the means across all stations that meet the criteria for ranking.

:::{.graph}
```{r warning=FALSE,message=FALSE}
#| echo: false 
#| fig-height: 4

walkability_this_station = walkability_df %>%
  rename(Station_Name = 'station') %>%
  filter(Station_Name == station) %>%
  as.data.frame() %>%
  pivot_longer(cols = (-Station_Name)) %>%
  arrange(desc(value))

valid_stations <- readRDS('../r_objects/transformed_scores.Rdata') %>%
  pull(station) 

amenity_means = walkability_df %>%
  filter(station %in% valid_stations) %>%
  summarise(across(-station, mean)) %>%
  pivot_longer(cols = everything()) %>%
  left_join(walkability_this_station, by = 'name') %>%
  arrange(desc(value.y))

col_width = 0.7

ymax = max( max(amenity_means$value.x), max(amenity_means$value.y)  )

(ggplot(amenity_means, aes(x = name, y = value.y, fill = name)) +
  geom_col(width = col_width) +
    ylim(0, ymax) +
  guides(fill = 'none') +
    xlab('Amenity') +
    theme_minimal() +
    ylab('Number in radius') +
  geom_segment(aes(x = as.numeric(factor(name)) - col_width/2,
                   xend = as.numeric(factor(name)) + col_width/2,
                   y = value.x, yend = value.x),
               color = "black", size = 1, linetype = "dashed") ) %>%
  ggplotly()
    
    
  # xlab('Amenity') +
  # ylab('Number in radius') +
  # theme_bw() ) %>% ggplotly()

```
:::

\

Calculation of the final score for local services uses an index measure. It is described in more detail [here](../../../rankings.html)..

## Zoned Capacity

Zoned Capacity is a measure of the **theoretical** number of dwellings possible under different zoning implementations.

:::{.graph}
```{r warning=FALSE,message=FALSE}
#| echo: false 

delta = near_properties %>%
  st_drop_geometry() %>%
  group_by(zone_short) %>%
  summarise(old_yield = sum(buxton_yeilds_corrected_net, na.rm = T), new_yield = sum(mm_yield_net, na.rm = T))

delta %>% reactable(theme = sandstone(),
                    columns = list(
                      zone_short = colDef(name = "Current Zone"),
                      old_yield = colDef(name = "Existing Zoned Capacity"),
                      new_yield = colDef(name = "Potential Future Zoned Capacity")
                    )) 

sum_delta <- sum(delta$new_yield)

```
:::

\

Under 'Missing Middle' zoning, `r station` could **theoretically** host `r prettyNum(sum_delta, big.mark = ',')` homes.
