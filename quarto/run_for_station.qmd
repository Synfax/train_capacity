---
title: "Station Capacity"
author: "Paul S"
date: "6/6/24"
params: 
  station: "Brunswick"
format: 
  html: 
    theme: zephyr
    fig-width: 8
    fig-height: 8
    code-fold: false
    toc: true
    toc-depth: 4
    toc-location: left
    page-layout: full
---

This file needs to have one section for each of the metrics. e.g. heritage by zone, zoned capacity, etc. In addition to other cool patronage stuff.

```{r}


library(knitr)
library(tidyverse)
library(sf)
library(leaflet)
devtools::install_github("walkerke/mapgl")
library(mapgl)
library(htmltools)
library(htmlwidgets)
library(reactablefmtr)


source('../r/station_functions.R')


yimby_colours <- list(
  hero = "#10461B",
  body = "#000000",
  background  = "#FDFFEE",
  green_base  = "#10461B",
  blue_base   = "#283696",
  red_base    = "#BA1B21",
  yellow_base = "#F6AE00",
  green_palette  = c("#10461B", "#2C6F3A", "#579A64", "#8FC49A", "#D6EFDB"),
  blue_palette   = c("#1A235F", "#283696", "#9EA7E2", "#D0D6FF", "#E8ECFF"),
  red_palette    = c("#D92127", "#BA1B21", "#8E3437", "#C6A2A3", "#E3BABB"),
  yellow_palette = c("#F6AE00", "#DE9B00", "#C79E3E", "#F2DCA5", "#FFF7E3")
)

specified_colors <- c("Already developed"                       = "#989898",
                      "Housing not permitted"                   = "#b1b1b1",
                      "Civic use makes development less likely" = "#cacaca", 
                      "Low density residential"                 = yimby_colours$blue_palette[5],
                      "2 storeys (NRZ)"                         = yimby_colours$blue_palette[4],
                      "3 storeys (GRZ)"                         = yimby_colours$blue_palette[3],
                      "4 storeys (RGZ)"                         = yimby_colours$blue_palette[2],
                      "4+ storeys (Mixed use zones)"            = yimby_colours$blue_palette[1],
                      "6 storeys (Missing middle)"              = yimby_colours$green_palette[3]
)

```

output `r params$station `

todo: what line does the station serve (could be multiple?)

where does this station rank within its line? where does it rank in the overall network?

when is this station busiest? 

## Info


::: {.panel-tabset}

## Average Patronage

```{r warning=FALSE,message=FALSE}
#| echo: false 


station = params$station

station = 'Brunswick'

hourly_factors = readRDS('../r_objects/hourly_factors.Rdata') %>%
  as.data.frame()

to_plot <- hourly_factors %>% filter(Station_Name == station)
  
p <- ggplot(to_plot, mapping = aes(x = hour_of_day, y = avg_patronage)) + geom_point()
  
p + facet_grid(rows = vars(Direction)) + theme_bw(base_size = 15)

```

## Frequency and Load Factors


```{r  warning=FALSE,message=FALSE}
#| echo: false 

service_frequencies = readRDS('../r_objects/service_frequencies.Rdata')

  for_select_station = service_frequencies %>% filter(Station_Name == station)
  
  coeff = ( max(for_select_station %>%
                   filter(Day_Type == 'Normal Weekday') %>%
                   select(sph) ) /
              max( hourly_factors %>% filter(Station_Name == station) %>% select(capacity_factor)  ))

  ggplot( ) +
    geom_line(for_select_station %>% filter(Day_Type == 'Normal Weekday') , mapping = aes(x = hour_of_day, y = sph, group = 1)) +
    geom_point(for_select_station %>% filter(Day_Type == 'Normal Weekday') , mapping = aes(x = hour_of_day, y = sph, group = 1)) +
    geom_line(hourly_factors %>% filter(Station_Name == station), mapping = aes(x = hour_of_day, y = capacity_factor * coeff, group = 1), col = 'red') +
    geom_point(hourly_factors %>% filter(Station_Name == station), mapping = aes(x = hour_of_day, y = capacity_factor * coeff, group = 1), col = 'red') +
    scale_y_continuous(

      # Features of the first axis
      name = "Services Per Hour",

      # Add a second axis and specify its features
      sec.axis = sec_axis(~.*(1/coeff), name="Capacity Factor")
    ) + facet_grid(rows = vars(Direction))
  
  # max_capacity = for_select_station %>%
  #   filter(Day_Type == 'Normal Weekday') %>%
  #   select(sph) %>%
  #   max()
  # 
  # ggplot( ) +
  #   geom_line(for_select_station %>% filter(Day_Type == 'Normal Weekday') , mapping = aes(x = hour_of_day, y = sph/max_capacity, group = 1)) +
  #   geom_point(for_select_station %>% filter(Day_Type == 'Normal Weekday') , mapping = aes(x = hour_of_day, y = sph/max_capacity, group = 1)) +
  #   geom_line(hourly_factors %>% filter(Station_Name == station), mapping = aes(x = hour_of_day, y = capacity_factor, group = 1), col = 'red') +
  #   geom_point(hourly_factors %>% filter(Station_Name == station), mapping = aes(x = hour_of_day, y = capacity_factor, group = 1), col = 'red') +
  #   facet_grid(rows = vars(Direction)) + theme_bw()
  # 
  # ratio = for_select_station %>%
  #   filter(Day_Type == 'Normal Weekday') %>% left_join(
  #           (hourly_factors %>%
  #              filter(Station_Name == station)), by = c('hour_of_day', 'Direction') )
  # 
  # ratio = ratio %>% mutate(rt = capacity_factor /  (sph/max_capacity) )
  # 
  # ggplot() + geom_line(ratio, mapping = aes(x = hour_of_day, y = rt, group = 1 )) + facet_grid(rows = vars(Direction))


```

:::



## map

```{r warning=FALSE,message=FALSE}
#| echo: false 

near_station = get_near_properties(station, fromQuarto = T)

# %>% mutate( old_color = specified_colors[category], new_color = specified_colors[category_new] )

# m1 <- mapgl::maplibre(style = mapgl::carto_style('positron')) %>%
#   mapgl::add_fill_extrusion_layer(id = 'brunswick', source = near_station,
#                            fill_extrusion_opacity = 0.85,
#                            fill_extrusion_color = c('get', 'old_color'),
#                            fill_extrusion_height = c("get", "old_height") ) %>%
#     mapgl::fly_to(
#       center = c(145.063115,-37.814175),
#       zoom = 9,
#       pitch = 40
#     )
# 
# m1

#palTest = colorFactor(palette = 'Dark2', domain = near_station$category)
leaflet(near_station) %>%
  addProviderTiles('CartoDB.Positron') %>%
  addPolygons(fillColor = , color = NA, weight = 0, fillOpacity = 0.7) 

```

### Land Use Distribution

```{r warning=FALSE,message=FALSE}
#| echo: false 

split_by_zone = split_by_zone_type(near_station)

bar_chart <- function(label, width = "100%", height = "1rem", fill = "#00bfc4", background = NULL) {
  bar <- div(style = list(background = fill, width = width, height = height))
  chart <- div(style = list(flexGrow = 1, marginLeft = "0.5rem", background = background), bar)
  div(style = list(display = "flex", alignItems = "center"), label, chart)
}

near_station %>%
  reactable(
    defaultSorted = list('ttl_area' = "desc"),
    theme = sandstone(),
    columns = list(
      type_short = colDef(name = "Type Short"),
      ttl_area = colDef(name = "Total Area", cell = function(value) {
          width <- paste0(value / max(.$ttl_area) * 100, "%")
          bar_chart(value, width = width)
        })
      
    ))



```


